[
    {
        "repo": "pallets/flask",
        "instance_id": "pallets__flask-4045",
        "base_commit": "d8c37f43724cd9fb0870f77877b7c4c7e38a19e0",
        "patch": "diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -188,6 +188,10 @@ def __init__(\n             template_folder=template_folder,\n             root_path=root_path,\n         )\n+\n+        if \".\" in name:\n+            raise ValueError(\"'name' may not contain a dot '.' character.\")\n+\n         self.name = name\n         self.url_prefix = url_prefix\n         self.subdomain = subdomain\n@@ -360,12 +364,12 @@ def add_url_rule(\n         \"\"\"Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for\n         the :func:`url_for` function is prefixed with the name of the blueprint.\n         \"\"\"\n-        if endpoint:\n-            assert \".\" not in endpoint, \"Blueprint endpoints should not contain dots\"\n-        if view_func and hasattr(view_func, \"__name__\"):\n-            assert (\n-                \".\" not in view_func.__name__\n-            ), \"Blueprint view function name should not contain dots\"\n+        if endpoint and \".\" in endpoint:\n+            raise ValueError(\"'endpoint' may not contain a dot '.' character.\")\n+\n+        if view_func and hasattr(view_func, \"__name__\") and \".\" in view_func.__name__:\n+            raise ValueError(\"'view_func' name may not contain a dot '.' character.\")\n+\n         self.record(lambda s: s.add_url_rule(rule, endpoint, view_func, **options))\n \n     def app_template_filter(self, name: t.Optional[str] = None) -> t.Callable:\n",
        "test_patch": "diff --git a/tests/test_basic.py b/tests/test_basic.py\n--- a/tests/test_basic.py\n+++ b/tests/test_basic.py\n@@ -1631,7 +1631,7 @@ def something_else():\n \n \n def test_inject_blueprint_url_defaults(app):\n-    bp = flask.Blueprint(\"foo.bar.baz\", __name__, template_folder=\"template\")\n+    bp = flask.Blueprint(\"foo\", __name__, template_folder=\"template\")\n \n     @bp.url_defaults\n     def bp_defaults(endpoint, values):\n@@ -1644,12 +1644,12 @@ def view(page):\n     app.register_blueprint(bp)\n \n     values = dict()\n-    app.inject_url_defaults(\"foo.bar.baz.view\", values)\n+    app.inject_url_defaults(\"foo.view\", values)\n     expected = dict(page=\"login\")\n     assert values == expected\n \n     with app.test_request_context(\"/somepage\"):\n-        url = flask.url_for(\"foo.bar.baz.view\")\n+        url = flask.url_for(\"foo.view\")\n     expected = \"/login\"\n     assert url == expected\n \ndiff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -1,5 +1,3 @@\n-import functools\n-\n import pytest\n from jinja2 import TemplateNotFound\n from werkzeug.http import parse_cache_control_header\n@@ -253,28 +251,9 @@ def test_templates_list(test_apps):\n     assert templates == [\"admin/index.html\", \"frontend/index.html\"]\n \n \n-def test_dotted_names(app, client):\n-    frontend = flask.Blueprint(\"myapp.frontend\", __name__)\n-    backend = flask.Blueprint(\"myapp.backend\", __name__)\n-\n-    @frontend.route(\"/fe\")\n-    def frontend_index():\n-        return flask.url_for(\"myapp.backend.backend_index\")\n-\n-    @frontend.route(\"/fe2\")\n-    def frontend_page2():\n-        return flask.url_for(\".frontend_index\")\n-\n-    @backend.route(\"/be\")\n-    def backend_index():\n-        return flask.url_for(\"myapp.frontend.frontend_index\")\n-\n-    app.register_blueprint(frontend)\n-    app.register_blueprint(backend)\n-\n-    assert client.get(\"/fe\").data.strip() == b\"/be\"\n-    assert client.get(\"/fe2\").data.strip() == b\"/fe\"\n-    assert client.get(\"/be\").data.strip() == b\"/fe\"\n+def test_dotted_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"app.ui\", __name__)\n \n \n def test_dotted_names_from_app(app, client):\n@@ -343,62 +322,19 @@ def index():\n def test_route_decorator_custom_endpoint_with_dots(app, client):\n     bp = flask.Blueprint(\"bp\", __name__)\n \n-    @bp.route(\"/foo\")\n-    def foo():\n-        return flask.request.endpoint\n-\n-    try:\n-\n-        @bp.route(\"/bar\", endpoint=\"bar.bar\")\n-        def foo_bar():\n-            return flask.request.endpoint\n-\n-    except AssertionError:\n-        pass\n-    else:\n-        raise AssertionError(\"expected AssertionError not raised\")\n-\n-    try:\n-\n-        @bp.route(\"/bar/123\", endpoint=\"bar.123\")\n-        def foo_bar_foo():\n-            return flask.request.endpoint\n-\n-    except AssertionError:\n-        pass\n-    else:\n-        raise AssertionError(\"expected AssertionError not raised\")\n-\n-    def foo_foo_foo():\n-        pass\n-\n-    pytest.raises(\n-        AssertionError,\n-        lambda: bp.add_url_rule(\"/bar/123\", endpoint=\"bar.123\", view_func=foo_foo_foo),\n-    )\n-\n-    pytest.raises(\n-        AssertionError, bp.route(\"/bar/123\", endpoint=\"bar.123\"), lambda: None\n-    )\n-\n-    foo_foo_foo.__name__ = \"bar.123\"\n+    with pytest.raises(ValueError):\n+        bp.route(\"/\", endpoint=\"a.b\")(lambda: \"\")\n \n-    pytest.raises(\n-        AssertionError, lambda: bp.add_url_rule(\"/bar/123\", view_func=foo_foo_foo)\n-    )\n+    with pytest.raises(ValueError):\n+        bp.add_url_rule(\"/\", endpoint=\"a.b\")\n \n-    bp.add_url_rule(\n-        \"/bar/456\", endpoint=\"foofoofoo\", view_func=functools.partial(foo_foo_foo)\n-    )\n+    def view():\n+        return \"\"\n \n-    app.register_blueprint(bp, url_prefix=\"/py\")\n+    view.__name__ = \"a.b\"\n \n-    assert client.get(\"/py/foo\").data == b\"bp.foo\"\n-    # The rule's didn't actually made it through\n-    rv = client.get(\"/py/bar\")\n-    assert rv.status_code == 404\n-    rv = client.get(\"/py/bar/123\")\n-    assert rv.status_code == 404\n+    with pytest.raises(ValueError):\n+        bp.add_url_rule(\"/\", view_func=view)\n \n \n def test_endpoint_decorator(app, client):\n",
        "problem_statement": "Raise error when blueprint name contains a dot\nThis is required since every dot is now significant since blueprints can be nested. An error was already added for endpoint names in 1.0, but should have been added for this as well.\n",
        "hints_text": "",
        "created_at": "2021-05-13T21:32:41Z",
        "version": "2.0",
        "FAIL_TO_PASS": "[\"tests/test_blueprints.py::test_dotted_name_not_allowed\", \"tests/test_blueprints.py::test_route_decorator_custom_endpoint_with_dots\"]",
        "PASS_TO_PASS": "[\"tests/test_basic.py::test_method_route_no_methods\", \"tests/test_basic.py::test_disallow_string_for_allowed_methods\", \"tests/test_basic.py::test_error_handler_unknown_code\", \"tests/test_basic.py::test_request_locals\", \"tests/test_basic.py::test_exception_propagation\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[None-True-True-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[None-True-True-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[None-True-False-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[None-True-False-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[None-False-True-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[None-False-True-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[None-False-False-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[None-False-False-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[True-True-True-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[True-True-True-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[True-True-False-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[True-True-False-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[True-False-True-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[True-False-True-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[True-False-False-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[True-False-False-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[False-True-True-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[False-True-True-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[False-True-False-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[False-True-False-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[False-False-True-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[False-False-True-False]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[False-False-False-True]\", \"tests/test_basic.py::test_werkzeug_passthrough_errors[False-False-False-False]\", \"tests/test_basic.py::test_get_method_on_g\", \"tests/test_basic.py::test_g_iteration_protocol\", \"tests/test_basic.py::test_run_defaults\", \"tests/test_basic.py::test_run_server_port\", \"tests/test_basic.py::test_run_from_config[None-None-pocoo.org:8080-pocoo.org-8080]\", \"tests/test_basic.py::test_run_from_config[localhost-None-pocoo.org:8080-localhost-8080]\", \"tests/test_basic.py::test_run_from_config[None-80-pocoo.org:8080-pocoo.org-80]\", \"tests/test_basic.py::test_run_from_config[localhost-80-pocoo.org:8080-localhost-80]\", \"tests/test_basic.py::test_run_from_config[localhost-0-localhost:8080-localhost-0]\", \"tests/test_basic.py::test_run_from_config[None-None-localhost:8080-localhost-8080]\", \"tests/test_basic.py::test_run_from_config[None-None-localhost:0-localhost-0]\", \"tests/test_basic.py::test_app_freed_on_zero_refcount\", \"tests/test_blueprints.py::test_template_filter\", \"tests/test_blueprints.py::test_add_template_filter\", \"tests/test_blueprints.py::test_template_filter_with_name\", \"tests/test_blueprints.py::test_add_template_filter_with_name\", \"tests/test_blueprints.py::test_template_test\", \"tests/test_blueprints.py::test_add_template_test\", \"tests/test_blueprints.py::test_template_test_with_name\", \"tests/test_blueprints.py::test_add_template_test_with_name\", \"tests/test_blueprints.py::test_template_global\"]",
        "environment_setup_commit": "4346498c85848c53843b810537b83a8f6124c9d3"
    },
    {
        "repo": "pallets/flask",
        "instance_id": "pallets__flask-5063",
        "base_commit": "182ce3dd15dfa3537391c3efaf9c3ff407d134d4",
        "patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -9,7 +9,7 @@\n import traceback\n import typing as t\n from functools import update_wrapper\n-from operator import attrgetter\n+from operator import itemgetter\n \n import click\n from click.core import ParameterSource\n@@ -989,49 +989,62 @@ def shell_command() -> None:\n @click.option(\n     \"--sort\",\n     \"-s\",\n-    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),\n+    type=click.Choice((\"endpoint\", \"methods\", \"domain\", \"rule\", \"match\")),\n     default=\"endpoint\",\n     help=(\n-        'Method to sort routes by. \"match\" is the order that Flask will match '\n-        \"routes when dispatching a request.\"\n+        \"Method to sort routes by. 'match' is the order that Flask will match routes\"\n+        \" when dispatching a request.\"\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n @with_appcontext\n def routes_command(sort: str, all_methods: bool) -> None:\n     \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n-\n     rules = list(current_app.url_map.iter_rules())\n+\n     if not rules:\n         click.echo(\"No routes were registered.\")\n         return\n \n-    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n+    ignored_methods = set() if all_methods else {\"HEAD\", \"OPTIONS\"}\n+    host_matching = current_app.url_map.host_matching\n+    has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)\n+    rows = []\n \n-    if sort in (\"endpoint\", \"rule\"):\n-        rules = sorted(rules, key=attrgetter(sort))\n-    elif sort == \"methods\":\n-        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n+    for rule in rules:\n+        row = [\n+            rule.endpoint,\n+            \", \".join(sorted((rule.methods or set()) - ignored_methods)),\n+        ]\n \n-    rule_methods = [\n-        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n-        for rule in rules\n-    ]\n+        if has_domain:\n+            row.append((rule.host if host_matching else rule.subdomain) or \"\")\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n-    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+        row.append(rule.rule)\n+        rows.append(row)\n+\n+    headers = [\"Endpoint\", \"Methods\"]\n+    sorts = [\"endpoint\", \"methods\"]\n+\n+    if has_domain:\n+        headers.append(\"Host\" if host_matching else \"Subdomain\")\n+        sorts.append(\"domain\")\n+\n+    headers.append(\"Rule\")\n+    sorts.append(\"rule\")\n+\n+    try:\n+        rows.sort(key=itemgetter(sorts.index(sort)))\n+    except ValueError:\n+        pass\n \n-    click.echo(row.format(*headers).strip())\n-    click.echo(row.format(*(\"-\" * width for width in widths)))\n+    rows.insert(0, headers)\n+    widths = [max(len(row[i]) for row in rows) for i in range(len(headers))]\n+    rows.insert(1, [\"-\" * w for w in widths])\n+    template = \"  \".join(f\"{{{i}:<{w}}}\" for i, w in enumerate(widths))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for row in rows:\n+        click.echo(template.format(*row))\n \n \n cli = FlaskGroup(\n",
        "test_patch": "diff --git a/tests/test_cli.py b/tests/test_cli.py\n--- a/tests/test_cli.py\n+++ b/tests/test_cli.py\n@@ -433,16 +433,12 @@ class TestRoutes:\n     @pytest.fixture\n     def app(self):\n         app = Flask(__name__)\n-        app.testing = True\n-\n-        @app.route(\"/get_post/<int:x>/<int:y>\", methods=[\"GET\", \"POST\"])\n-        def yyy_get_post(x, y):\n-            pass\n-\n-        @app.route(\"/zzz_post\", methods=[\"POST\"])\n-        def aaa_post():\n-            pass\n-\n+        app.add_url_rule(\n+            \"/get_post/<int:x>/<int:y>\",\n+            methods=[\"GET\", \"POST\"],\n+            endpoint=\"yyy_get_post\",\n+        )\n+        app.add_url_rule(\"/zzz_post\", methods=[\"POST\"], endpoint=\"aaa_post\")\n         return app\n \n     @pytest.fixture\n@@ -450,17 +446,6 @@ def invoke(self, app, runner):\n         cli = FlaskGroup(create_app=lambda: app)\n         return partial(runner.invoke, cli)\n \n-    @pytest.fixture\n-    def invoke_no_routes(self, runner):\n-        def create_app():\n-            app = Flask(__name__, static_folder=None)\n-            app.testing = True\n-\n-            return app\n-\n-        cli = FlaskGroup(create_app=create_app)\n-        return partial(runner.invoke, cli)\n-\n     def expect_order(self, order, output):\n         # skip the header and match the start of each row\n         for expect, line in zip(order, output.splitlines()[2:]):\n@@ -493,11 +478,31 @@ def test_all_methods(self, invoke):\n         output = invoke([\"routes\", \"--all-methods\"]).output\n         assert \"GET, HEAD, OPTIONS, POST\" in output\n \n-    def test_no_routes(self, invoke_no_routes):\n-        result = invoke_no_routes([\"routes\"])\n+    def test_no_routes(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n         assert result.exit_code == 0\n         assert \"No routes were registered.\" in result.output\n \n+    def test_subdomain(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        app.add_url_rule(\"/a\", subdomain=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", subdomain=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Subdomain\" in result.output\n+\n+    def test_host(self, runner):\n+        app = Flask(__name__, static_folder=None, host_matching=True)\n+        app.add_url_rule(\"/a\", host=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", host=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Host\" in result.output\n+\n \n def dotenv_not_available():\n     try:\n",
        "problem_statement": "Flask routes to return domain/sub-domains information\nCurrently when checking **flask routes** it provides all routes but **it is no way to see which routes are assigned to which subdomain**.\r\n\r\n**Default server name:**\r\nSERVER_NAME: 'test.local'\r\n\r\n**Domains (sub-domains):**\r\ntest.test.local\r\nadmin.test.local\r\ntest.local\r\n\r\n**Adding blueprints:**\r\napp.register_blueprint(admin_blueprint,url_prefix='',subdomain='admin')\r\napp.register_blueprint(test_subdomain_blueprint,url_prefix='',subdomain='test')\r\n\r\n\r\n```\r\n$ flask routes\r\n * Tip: There are .env or .flaskenv files present. Do \"pip install python-dotenv\" to use them.\r\nEndpoint                                                 Methods    Rule\r\n-------------------------------------------------------  ---------  ------------------------------------------------\r\nadmin_blueprint.home                                      GET        /home\r\ntest_subdomain_blueprint.home                             GET        /home\r\nstatic                                                    GET        /static/<path:filename>\r\n...\r\n```\r\n\r\n\r\n**Feature request**\r\nIt will be good to see something like below (that will make more clear which route for which subdomain, because now need to go and check configuration).\r\n**If it is not possible to fix routes**, can you add or tell which method(s) should be used to get below information from flask? \r\n\r\n```\r\n$ flask routes\r\n * Tip: There are .env or .flaskenv files present. Do \"pip install python-dotenv\" to use them.\r\nDomain                Endpoint                                             Methods    Rule\r\n-----------------   ----------------------------------------------------  ----------  ------------------------------------------------\r\nadmin.test.local     admin_blueprint.home                                  GET        /home\r\ntest.test.local      test_subdomain_blueprint.home                         GET        /home\r\ntest.local           static                                                GET        /static/<path:filename>\r\n...\r\n```\r\n\n",
        "hints_text": "",
        "created_at": "2023-04-14T16:36:54Z",
        "version": "2.3",
        "FAIL_TO_PASS": "[\"tests/test_cli.py::TestRoutes::test_subdomain\", \"tests/test_cli.py::TestRoutes::test_host\"]",
        "PASS_TO_PASS": "[\"tests/test_cli.py::test_cli_name\", \"tests/test_cli.py::test_find_best_app\", \"tests/test_cli.py::test_prepare_import[test-path0-test]\", \"tests/test_cli.py::test_prepare_import[test.py-path1-test]\", \"tests/test_cli.py::test_prepare_import[a/test-path2-test]\", \"tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]\", \"tests/test_cli.py::test_prepare_import[test/__init__-path4-test]\", \"tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]\", \"tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]\", \"tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]\", \"tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]\", \"tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]\", \"tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]\", \"tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-None-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\\\"foo\\\",\", \"tests/test_cli.py::test_locate_app[cliapp.factory-\", \"tests/test_cli.py::test_locate_app_raises[notanapp.py-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp/app-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\\\"foo\\\")]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]\", \"tests/test_cli.py::test_locate_app_suppress_raise\", \"tests/test_cli.py::test_get_version\", \"tests/test_cli.py::test_scriptinfo\", \"tests/test_cli.py::test_app_cli_has_app_context\", \"tests/test_cli.py::test_with_appcontext\", \"tests/test_cli.py::test_appgroup_app_context\", \"tests/test_cli.py::test_flaskgroup_app_context\", \"tests/test_cli.py::test_flaskgroup_debug[True]\", \"tests/test_cli.py::test_flaskgroup_debug[False]\", \"tests/test_cli.py::test_flaskgroup_nested\", \"tests/test_cli.py::test_no_command_echo_loading_error\", \"tests/test_cli.py::test_help_echo_loading_error\", \"tests/test_cli.py::test_help_echo_exception\", \"tests/test_cli.py::TestRoutes::test_simple\", \"tests/test_cli.py::TestRoutes::test_sort\", \"tests/test_cli.py::TestRoutes::test_all_methods\", \"tests/test_cli.py::TestRoutes::test_no_routes\", \"tests/test_cli.py::test_load_dotenv\", \"tests/test_cli.py::test_dotenv_path\", \"tests/test_cli.py::test_dotenv_optional\", \"tests/test_cli.py::test_disable_dotenv_from_env\", \"tests/test_cli.py::test_run_cert_path\", \"tests/test_cli.py::test_run_cert_adhoc\", \"tests/test_cli.py::test_run_cert_import\", \"tests/test_cli.py::test_run_cert_no_ssl\", \"tests/test_cli.py::test_cli_blueprints\", \"tests/test_cli.py::test_cli_empty\"]",
        "environment_setup_commit": "182ce3dd15dfa3537391c3efaf9c3ff407d134d4"
    },
    {
        "repo": "pallets/flask",
        "instance_id": "pallets__flask-4992",
        "base_commit": "4c288bc97ea371817199908d0d9b12de9dae327e",
        "patch": "diff --git a/src/flask/config.py b/src/flask/config.py\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -234,6 +234,7 @@ def from_file(\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        text: bool = True,\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,8 +245,8 @@ def from_file(\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n-            import toml\n-            app.config.from_file(\"config.toml\", load=toml.load)\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, text=False)\n \n         :param filename: The path to the data file. This can be an\n             absolute path or relative to the config root path.\n@@ -254,14 +255,18 @@ def from_file(\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param text: Open the file in text or binary mode.\n         :return: ``True`` if the file was loaded successfully.\n \n+        .. versionchanged:: 2.3\n+            The ``text`` parameter was added.\n+\n         .. versionadded:: 2.0\n         \"\"\"\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, \"r\" if text else \"rb\") as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
        "test_patch": "diff --git a/tests/static/config.toml b/tests/static/config.toml\nnew file mode 100644\n--- /dev/null\n+++ b/tests/static/config.toml\n@@ -0,0 +1,2 @@\n+TEST_KEY=\"foo\"\n+SECRET_KEY=\"config\"\ndiff --git a/tests/test_config.py b/tests/test_config.py\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -6,7 +6,6 @@\n \n import flask\n \n-\n # config keys used for the TestConfig\n TEST_KEY = \"foo\"\n SECRET_KEY = \"config\"\n@@ -30,13 +29,23 @@ def test_config_from_object():\n     common_object_test(app)\n \n \n-def test_config_from_file():\n+def test_config_from_file_json():\n     app = flask.Flask(__name__)\n     current_dir = os.path.dirname(os.path.abspath(__file__))\n     app.config.from_file(os.path.join(current_dir, \"static\", \"config.json\"), json.load)\n     common_object_test(app)\n \n \n+def test_config_from_file_toml():\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, text=False\n+    )\n+    common_object_test(app)\n+\n+\n def test_from_prefixed_env(monkeypatch):\n     monkeypatch.setenv(\"FLASK_STRING\", \"value\")\n     monkeypatch.setenv(\"FLASK_BOOL\", \"true\")\n",
        "problem_statement": "Add a file mode parameter to flask.Config.from_file()\nPython 3.11 introduced native TOML support with the `tomllib` package. This could work nicely with the `flask.Config.from_file()` method as an easy way to load TOML config files:\r\n\r\n```python\r\napp.config.from_file(\"config.toml\", tomllib.load)\r\n```\r\n\r\nHowever, `tomllib.load()` takes an object readable in binary mode, while `flask.Config.from_file()` opens a file in text mode, resulting in this error:\r\n\r\n```\r\nTypeError: File must be opened in binary mode, e.g. use `open('foo.toml', 'rb')`\r\n```\r\n\r\nWe can get around this with a more verbose expression, like loading from a file opened with the built-in `open()` function and passing the `dict` to `app.Config.from_mapping()`:\r\n\r\n```python\r\n# We have to repeat the path joining that from_file() does\r\nwith open(os.path.join(app.config.root_path, \"config.toml\"), \"rb\") as file:\r\n    app.config.from_mapping(tomllib.load(file))\r\n```\r\n\r\nBut adding a file mode parameter to `flask.Config.from_file()` would enable the use of a simpler expression. E.g.:\r\n\r\n```python\r\napp.config.from_file(\"config.toml\", tomllib.load, mode=\"b\")\r\n```\r\n\n",
        "hints_text": "You can also use:\r\n\r\n```python\r\napp.config.from_file(\"config.toml\", lambda f: tomllib.load(f.buffer))\r\n```\nThanks - I was looking for another way to do it. I'm happy with that for now, although it's worth noting this about `io.TextIOBase.buffer` from the docs:\r\n\r\n> This is not part of the [TextIOBase](https://docs.python.org/3/library/io.html#io.TextIOBase) API and may not exist in some implementations.\nOh, didn't mean for you to close this, that was just a shorter workaround. I think a `text=True` parameter would be better, easier to use `True` or `False` rather than mode strings. Some libraries, like `tomllib`, have _Opinions_ about whether text or bytes are correct for parsing files, and we can accommodate that.\ncan i work on this?\nNo need to ask to work on an issue. As long as the issue is not assigned to anyone and doesn't have have a linked open PR (both can be seen in the sidebar), anyone is welcome to work on any issue.",
        "created_at": "2023-02-22T14:00:17Z",
        "version": "2.3",
        "FAIL_TO_PASS": "[\"tests/test_config.py::test_config_from_file_toml\"]",
        "PASS_TO_PASS": "[\"tests/test_config.py::test_config_from_pyfile\", \"tests/test_config.py::test_config_from_object\", \"tests/test_config.py::test_config_from_file_json\", \"tests/test_config.py::test_from_prefixed_env\", \"tests/test_config.py::test_from_prefixed_env_custom_prefix\", \"tests/test_config.py::test_from_prefixed_env_nested\", \"tests/test_config.py::test_config_from_mapping\", \"tests/test_config.py::test_config_from_class\", \"tests/test_config.py::test_config_from_envvar\", \"tests/test_config.py::test_config_from_envvar_missing\", \"tests/test_config.py::test_config_missing\", \"tests/test_config.py::test_config_missing_file\", \"tests/test_config.py::test_custom_config_class\", \"tests/test_config.py::test_session_lifetime\", \"tests/test_config.py::test_get_namespace\", \"tests/test_config.py::test_from_pyfile_weird_encoding[utf-8]\", \"tests/test_config.py::test_from_pyfile_weird_encoding[iso-8859-15]\", \"tests/test_config.py::test_from_pyfile_weird_encoding[latin-1]\"]",
        "environment_setup_commit": "182ce3dd15dfa3537391c3efaf9c3ff407d134d4"
    }
]