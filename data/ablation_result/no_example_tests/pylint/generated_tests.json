[
    {
        "repo": "pylint-dev/pylint",
        "instance_id": "pylint-dev__pylint-7993",
        "base_commit": "e90702074e68e20dc8e5df5013ee3ecf22139c3e",
        "patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,7 +175,7 @@ def on_set_current_module(self, module: str, filepath: str | None) -> None:\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{(\\w+?)(:.*)?\\}\", template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n",
        "test_patch": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -14,6 +14,7 @@\n from typing import TYPE_CHECKING\n \n import pytest\n+from _pytest.recwarn import WarningsRecorder\n \n from pylint import checkers\n from pylint.interfaces import HIGH\n@@ -88,16 +89,12 @@ def test_template_option_non_existing(linter) -> None:\n     \"\"\"\n     output = StringIO()\n     linter.reporter.out = output\n-    linter.config.msg_template = (\n-        \"{path}:{line}:{a_new_option}:({a_second_new_option:03d})\"\n-    )\n+    linter.config.msg_template = \"{path}:{line}:{categ}:({a_second_new_option:03d})\"\n     linter.open()\n     with pytest.warns(UserWarning) as records:\n         linter.set_current_module(\"my_mod\")\n         assert len(records) == 2\n-        assert (\n-            \"Don't recognize the argument 'a_new_option'\" in records[0].message.args[0]\n-        )\n+        assert \"Don't recognize the argument 'categ'\" in records[0].message.args[0]\n     assert (\n         \"Don't recognize the argument 'a_second_new_option'\"\n         in records[1].message.args[0]\n@@ -113,7 +110,24 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+def test_template_option_with_header(linter: PyLinter) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\n+        \"line-too-long\", line=2, end_lineno=2, end_col_offset=4, args=(3, 4)\n+    )\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"convention\" }'\n+\n+\n+def test_deprecation_set_output(recwarn: WarningsRecorder) -> None:\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
        "problem_statement": "Using custom braces in message template does not work\n### Bug description\n\nHave any list of errors:\r\n\r\nOn pylint 1.7 w/ python3.6 - I am able to use this as my message template\r\n```\r\n$ pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\r\nNo config file found, using default configuration\r\n************* Module [redacted].test\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"error\" }\r\n{ \"Category\": \"error\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"error\" }\r\n```\r\n\r\nHowever, on Python3.9 with Pylint 2.12.2, I get the following:\r\n```\r\n$ pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\r\n[redacted]/site-packages/pylint/reporters/text.py:206: UserWarning: Don't recognize the argument '{ \"Category\"' in the --msg-template. Are you sure it is supported on the current version of pylint?\r\n  warnings.warn(\r\n************* Module [redacted].test\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n```\r\n\r\nIs this intentional or a bug?\n\n### Configuration\n\n_No response_\n\n### Command used\n\n```shell\npylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\n```\n\n\n### Pylint output\n\n```shell\n[redacted]/site-packages/pylint/reporters/text.py:206: UserWarning: Don't recognize the argument '{ \"Category\"' in the --msg-template. Are you sure it is supported on the current version of pylint?\r\n  warnings.warn(\r\n************* Module [redacted].test\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\n```\n\n\n### Expected behavior\n\nExpect the dictionary to print out with `\"Category\"` as the key.\n\n### Pylint version\n\n```shell\nAffected Version:\r\npylint 2.12.2\r\nastroid 2.9.2\r\nPython 3.9.9+ (heads/3.9-dirty:a2295a4, Dec 21 2021, 22:32:52) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\r\n\r\n\r\nPreviously working version:\r\nNo config file found, using default configuration\r\npylint 1.7.4, \r\nastroid 1.6.6\r\nPython 3.6.8 (default, Nov 16 2020, 16:55:22) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\n```\n\n\n### OS / Environment\n\n_No response_\n\n### Additional dependencies\n\n_No response_\n",
        "hints_text": "Subsequently, there is also this behavior with the quotes\r\n```\r\n$ pylint test.py --msg-template='\"Category\": \"{category}\"'\r\n************* Module test\r\nCategory\": \"convention\r\nCategory\": \"error\r\nCategory\": \"error\r\nCategory\": \"convention\r\nCategory\": \"convention\r\nCategory\": \"error\r\n\r\n$ pylint test.py --msg-template='\"\"Category\": \"{category}\"\"'\r\n************* Module test\r\n\"Category\": \"convention\"\r\n\"Category\": \"error\"\r\n\"Category\": \"error\"\r\n\"Category\": \"convention\"\r\n\"Category\": \"convention\"\r\n\"Category\": \"error\"\r\n```\nCommit that changed the behavior was probably this one: https://github.com/PyCQA/pylint/commit/7c3533ca48e69394391945de1563ef7f639cd27d#diff-76025f0bc82e83cb406321006fbca12c61a10821834a3164620fc17c978f9b7e\r\n\r\nAnd I tested on 2.11.1 that it is working as intended on that version.\nThanks for digging into this !",
        "created_at": "2022-12-27T18:20:50Z",
        "version": "2.15",
        "FAIL_TO_PASS": "[\"tests/reporters/unittest_reporting.py::test_template_option_with_header\"]",
        "PASS_TO_PASS": "[\"tests/reporters/unittest_reporting.py::test_template_option\", \"tests/reporters/unittest_reporting.py::test_template_option_default\", \"tests/reporters/unittest_reporting.py::test_template_option_end_line\", \"tests/reporters/unittest_reporting.py::test_template_option_non_existing\", \"tests/reporters/unittest_reporting.py::test_deprecation_set_output\", \"tests/reporters/unittest_reporting.py::test_parseable_output_deprecated\", \"tests/reporters/unittest_reporting.py::test_parseable_output_regression\", \"tests/reporters/unittest_reporting.py::test_multi_format_output\", \"tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages\", \"tests/reporters/unittest_reporting.py::test_display_results_is_renamed\"]",
        "environment_setup_commit": "e90702074e68e20dc8e5df5013ee3ecf22139c3e",
        "issue_title": "Using custom braces in message template does not work",
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/pylint/tests/reporters/unittest_reporting.py",
        "searched_functions": [
            "def test_template_option_non_existing(linter) -> None:\n    \"\"\"Test the msg-template option with non-existent options.\n    This makes sure that this option remains backwards compatible as new\n    parameters do not break on previous versions\n    \"\"\"\n    output = StringIO()\n    linter.reporter.out = output\n    linter.config.msg_template = (\n        \"{path}:{line}:{a_new_option}:({a_second_new_option:03d})\"\n    )\n    linter.open()\n    with pytest.warns(UserWarning) as records:\n        linter.set_current_module(\"my_mod\")\n        assert len(records) == 2\n        assert (\n            \"Don't recognize the argument 'a_new_option'\" in records[0].message.args[0]\n        )\n    assert (\n        \"Don't recognize the argument 'a_second_new_option'\"\n        in records[1].message.args[0]\n    )\n\n    linter.add_message(\"C0301\", line=1, args=(1, 2))\n    linter.add_message(\n        \"line-too-long\", line=2, end_lineno=2, end_col_offset=4, args=(3, 4)\n    )\n\n    out_lines = output.getvalue().split(\"\\n\")\n    assert out_lines[1] == \"my_mod:1::()\"\n    assert out_lines[2] == \"my_mod:2::()\"",
            "def test_template_option_end_line(linter) -> None:\n    \"\"\"Test the msg-template option with end_line and end_column.\"\"\"\n    output = StringIO()\n    linter.reporter.out = output\n    linter.config.msg_template = (\n        \"{path}:{line}:{column}:{end_line}:{end_column}: {msg_id}: {msg} ({symbol})\"\n    )\n    linter.open()\n    linter.set_current_module(\"my_mod\")\n    linter.add_message(\"C0301\", line=1, args=(1, 2))\n    linter.add_message(\n        \"line-too-long\", line=2, end_lineno=2, end_col_offset=4, args=(3, 4)\n    )\n\n    out_lines = output.getvalue().split(\"\\n\")\n    assert out_lines[1] == \"my_mod:1:0::: C0301: Line too long (1/2) (line-too-long)\"\n    assert out_lines[2] == \"my_mod:2:0:2:4: C0301: Line too long (3/4) (line-too-long)\"",
            "def test_template_option(linter):\n    output = StringIO()\n    linter.reporter.out = output\n    linter.config.msg_template = \"{msg_id}:{line:03d}\"\n    linter.open()\n    linter.set_current_module(\"0123\")\n    linter.add_message(\"C0301\", line=1, args=(1, 2))\n    linter.add_message(\"line-too-long\", line=2, args=(3, 4))\n    assert output.getvalue() == \"************* Module 0123\\nC0301:001\\nC0301:002\\n\"",
            "def test_template_option_default(linter) -> None:\n    \"\"\"Test the default msg-template setting.\"\"\"\n    output = StringIO()\n    linter.reporter.out = output\n    linter.open()\n    linter.set_current_module(\"my_module\")\n    linter.add_message(\"C0301\", line=1, args=(1, 2))\n    linter.add_message(\"line-too-long\", line=2, args=(3, 4))\n\n    out_lines = output.getvalue().split(\"\\n\")\n    assert out_lines[1] == \"my_module:1:0: C0301: Line too long (1/2) (line-too-long)\"\n    assert out_lines[2] == \"my_module:2:0: C0301: Line too long (3/4) (line-too-long)\"",
            "def handle_message(self, msg: Message) -> None:\n            msg.msg = \"Modified message\"",
            "def test_parseable_output_deprecated():\n    with warnings.catch_warnings(record=True) as cm:\n        warnings.simplefilter(\"always\")\n        ParseableTextReporter()\n\n    assert len(cm) == 1\n    assert isinstance(cm[0].message, DeprecationWarning)",
            "def writeln(self, string=\"\"):\n        pass",
            "def handle_message(self, msg: Message) -> None:\n            assert (\n                msg.msg == check_message\n            ), \"Message object should not be changed by other reporters.\"",
            "def writeln(self, string: str = \"\") -> None:\n            pass",
            "def writeln(self, string: str = \"\") -> None:\n            pass"
        ],
        "imports_info": [
            "from __future__ import annotations",
            "import sys",
            "import warnings",
            "from contextlib import redirect_stdout",
            "from io import StringIO",
            "from json import dumps",
            "from typing import TYPE_CHECKING",
            "import pytest",
            "from pylint import checkers",
            "from pylint.interfaces import HIGH",
            "from pylint.lint import PyLinter",
            "from pylint.message.message import Message",
            "from pylint.reporters import BaseReporter, MultiReporter",
            "from pylint.reporters.text import ParseableTextReporter, TextReporter",
            "from pylint.typing import FileItem, MessageLocationTuple",
            "from pylint.reporters.ureports.nodes import Section"
        ],
        "generated_tests": [
            "import pytest\nfrom pylint.lint import Run\n\ndef test_custom_message_template():\n    # Arrange\n    expected_output = '{ \"Category\": \"convention\" }'\n    args = ['--msg-template=\\'{{ \"Category\": \"{category}\" }}\\'', 'test.py']\n\n    # Act\n    try:\n        Run(args)\n    except SystemExit as e:\n        output = e.message\n\n    # Assert\n    assert expected_output in output, \"Custom message template not working as expected\"",
            "import pytest\nfrom pylint.lint import Run\n\ndef test_msg_template():\n    # Arrange\n    expected_output = '{ \"Category\": \"convention\" }'\n    args = ['--msg-template=\\'{{ \"Category\": \"{category}\" }}\\'', 'test.py']\n\n    # Act\n    try:\n        Run(args)\n    except SystemExit as e:\n        output = e.message\n\n    # Assert\n    assert expected_output in output, f\"Expected '{expected_output}' in the output, but got '{output}'\"",
            "import pytest\nfrom pylint.lint import PyLinter\n\ndef test_custom_message_template():\n    linter = PyLinter()\n    linter.set_option('msg-template', '{{ \"Category\": \"{category}\" }}')\n    linter.load_default_plugins()\n    linter.load_command_line_configuration()\n    linter.check('test.py')\n\n    output = linter.reporter.messages\n    for message in output:\n        assert \"Category\" in message, \"Custom message template not working as expected\"",
            "import pytest\nfrom pylint.lint import Run\n\ndef test_custom_msg_template():\n    # Arrange\n    msg_template = '{{ \"Category\": \"{category}\" }}'\n    expected_output = '{ \"Category\": \"convention\" }'\n    \n    # Act\n    try:\n        Run(['--msg-template', msg_template, 'test.py'])\n        output = capsys.readouterr().out\n    except Exception as e:\n        output = str(e)\n    \n    # Assert\n    assert expected_output in output, f\"Expected '{expected_output}' in output, but got '{output}'\"",
            "import pytest\nfrom pylint.lint import Run\n\ndef test_custom_message_template():\n    # Arrange\n    expected_output = '{ \"Category\": \"convention\" }'\n    args = ['--msg-template=\\'{{ \"Category\": \"{category}\" }}\\'', 'test.py']\n\n    # Act\n    try:\n        Run(args)\n    except SystemExit as e:\n        output = str(e)\n\n    # Assert\n    assert expected_output in output, \"Custom message template not working as expected\""
        ]
    }
]