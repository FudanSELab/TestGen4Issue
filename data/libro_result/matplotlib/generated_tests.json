[
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-23476",
        "base_commit": "33a0599711d26dc2b79f851c6daed4947df7c167",
        "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3023,6 +3023,9 @@ def __getstate__(self):\n         # Set cached renderer to None -- it can't be pickled.\n         state[\"_cachedRenderer\"] = None\n \n+        # discard any changes to the dpi due to pixel ratio changes\n+        state[\"_dpi\"] = state.get('_original_dpi', state['_dpi'])\n+\n         # add version information to the state\n         state['__mpl_version__'] = mpl.__version__\n \n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -2,6 +2,7 @@\n from datetime import datetime\n import io\n from pathlib import Path\n+import pickle\n import platform\n from threading import Timer\n from types import SimpleNamespace\n@@ -1380,3 +1381,11 @@ def test_deepcopy():\n \n     assert ax.get_xlim() == (1e-1, 1e2)\n     assert fig2.axes[0].get_xlim() == (0, 1)\n+\n+\n+def test_unpickle_with_device_pixel_ratio():\n+    fig = Figure(dpi=42)\n+    fig.canvas._set_device_pixel_ratio(7)\n+    assert fig.dpi == 42*7\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    assert fig2.dpi == 42\n",
        "problem_statement": "[Bug]: DPI of a figure is doubled after unpickling on M1 Mac\n### Bug summary\r\n\r\nWhen a figure is unpickled, it's dpi is doubled. This behaviour happens every time and if done in a loop it can cause an `OverflowError`.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\nimport platform\r\n\r\nprint(matplotlib.get_backend())\r\nprint('Matplotlib ver:', matplotlib.__version__)\r\nprint('Platform:', platform.platform())\r\nprint('System:', platform.system())\r\nprint('Release:', platform.release())\r\nprint('Python ver:', platform.python_version())\r\n\r\n\r\ndef dump_load_get_dpi(fig):\r\n    with open('sinus.pickle','wb') as file:\r\n        pickle.dump(fig, file)\r\n\r\n    with open('sinus.pickle', 'rb') as blob:\r\n        fig2 = pickle.load(blob)\r\n    return fig2, fig2.dpi\r\n\r\n\r\ndef run():\r\n    fig = plt.figure()\r\n    x = np.linspace(0,2*np.pi)\r\n    y = np.sin(x)\r\n\r\n    for i in range(32):\r\n        print(f'{i}: {fig.dpi}')\r\n        fig, dpi = dump_load_get_dpi(fig)\r\n\r\n\r\nif __name__ == '__main__':\r\n    run()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nMacOSX\r\nMatplotlib ver: 3.5.2\r\nPlatform: macOS-12.4-arm64-arm-64bit\r\nSystem: Darwin\r\nRelease: 21.5.0\r\nPython ver: 3.9.12\r\n0: 200.0\r\n1: 400.0\r\n2: 800.0\r\n3: 1600.0\r\n4: 3200.0\r\n5: 6400.0\r\n6: 12800.0\r\n7: 25600.0\r\n8: 51200.0\r\n9: 102400.0\r\n10: 204800.0\r\n11: 409600.0\r\n12: 819200.0\r\n13: 1638400.0\r\n14: 3276800.0\r\n15: 6553600.0\r\n16: 13107200.0\r\n17: 26214400.0\r\n18: 52428800.0\r\n19: 104857600.0\r\n20: 209715200.0\r\n21: 419430400.0\r\nTraceback (most recent call last):\r\n  File \"/Users/wsykala/projects/matplotlib/example.py\", line 34, in <module>\r\n    run()\r\n  File \"/Users/wsykala/projects/matplotlib/example.py\", line 30, in run\r\n    fig, dpi = dump_load_get_dpi(fig)\r\n  File \"/Users/wsykala/projects/matplotlib/example.py\", line 20, in dump_load_get_dpi\r\n    fig2 = pickle.load(blob)\r\n  File \"/Users/wsykala/miniconda3/envs/playground/lib/python3.9/site-packages/matplotlib/figure.py\", line 2911, in __setstate__\r\n    mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)\r\n  File \"/Users/wsykala/miniconda3/envs/playground/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 3499, in new_figure_manager_given_figure\r\n    canvas = cls.FigureCanvas(figure)\r\n  File \"/Users/wsykala/miniconda3/envs/playground/lib/python3.9/site-packages/matplotlib/backends/backend_macosx.py\", line 32, in __init__\r\n    _macosx.FigureCanvas.__init__(self, width, height)\r\nOverflowError: signed integer is greater than maximum\r\n```\r\n\r\n### Expected outcome\r\n\r\n```\r\nMacOSX\r\nMatplotlib ver: 3.5.2\r\nPlatform: macOS-12.4-arm64-arm-64bit\r\nSystem: Darwin\r\nRelease: 21.5.0\r\nPython ver: 3.9.12\r\n0: 200.0\r\n1: 200.0\r\n2: 200.0\r\n3: 200.0\r\n4: 200.0\r\n5: 200.0\r\n6: 200.0\r\n7: 200.0\r\n8: 200.0\r\n9: 200.0\r\n10: 200.0\r\n11: 200.0\r\n12: 200.0\r\n13: 200.0\r\n14: 200.0\r\n15: 200.0\r\n16: 200.0\r\n17: 200.0\r\n18: 200.0\r\n19: 200.0\r\n20: 200.0\r\n21: 200.0\r\n22: 200.0\r\n```\r\n\r\n### Additional information\r\n\r\nThis seems to happen only on M1 MacBooks and the version of python doesn't matter.\r\n\r\n### Operating system\r\n\r\nOS/X\r\n\r\n### Matplotlib Version\r\n\r\n3.5.2\r\n\r\n### Matplotlib Backend\r\n\r\nMacOSX\r\n\r\n### Python version\r\n\r\n3.9.12\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n",
        "hints_text": "I suspect this will also affect anything that know how to deal with high-dpi screens.\r\n\r\nFor, .... reasons..., when we handle high-dpi cases by doubling the dpi on the figure (we have ideas how to fix this, but it is a fair amount of work) when we show it.  We are saving the doubled dpi which when re-loaded in doubled again.\r\n\r\nI think there is an easy fix.....",
        "created_at": "2022-07-22T18:58:22Z",
        "version": "3.5",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_unpickle_with_device_pixel_ratio\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_align_labels[png]\", \"lib/matplotlib/tests/test_figure.py::test_align_labels_stray_axes\", \"lib/matplotlib/tests/test_figure.py::test_figure_label\", \"lib/matplotlib/tests/test_figure.py::test_fignum_exists\", \"lib/matplotlib/tests/test_figure.py::test_clf_keyword\", \"lib/matplotlib/tests/test_figure.py::test_figure[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_gca\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_subclass\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_invalid\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[png]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_fontproperties\", \"lib/matplotlib/tests/test_figure.py::test_alpha[png]\", \"lib/matplotlib/tests/test_figure.py::test_too_many_figures\", \"lib/matplotlib/tests/test_figure.py::test_iterability_axes_argument\", \"lib/matplotlib/tests/test_figure.py::test_set_fig_size\", \"lib/matplotlib/tests/test_figure.py::test_axes_remove\", \"lib/matplotlib/tests/test_figure.py::test_figaspect\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[both]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[major]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[minor]\", \"lib/matplotlib/tests/test_figure.py::test_change_dpi\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[1-nan]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[-1-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[inf-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_add_axes\", \"lib/matplotlib/tests/test_figure.py::test_subplots_shareax_loglabels\", \"lib/matplotlib/tests/test_figure.py::test_savefig\", \"lib/matplotlib/tests/test_figure.py::test_savefig_warns\", \"lib/matplotlib/tests/test_figure.py::test_savefig_backend\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Agg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Cairo]\", \"lib/matplotlib/tests/test_figure.py::test_figure_repr\", \"lib/matplotlib/tests/test_figure.py::test_valid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_invalid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[png]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[png]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[ps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[eps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[svg]\", \"lib/matplotlib/tests/test_figure.py::test_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_axes_removal\", \"lib/matplotlib/tests/test_figure.py::test_removed_axis\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clear]\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clf]\", \"lib/matplotlib/tests/test_figure.py::test_clf_not_redefined\", \"lib/matplotlib/tests/test_figure.py::test_picking_does_not_stale\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_twotuple\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[eps]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_all_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_tuple[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x0-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x1-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x2-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x3-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x4-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x5-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail_list_of_str\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_string_parser\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[AAA\\\\nBBB-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[\\\\nAAA\\\\nBBB\\\\n-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[ABC\\\\nDEF-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x0-(?m)we\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x1-There\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[AAA\\\\nc\\\\nBBB-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x3-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_hashable_keys[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[abc]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cab]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bca]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cba]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[acb]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bac]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_user_order\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_share_all\", \"lib/matplotlib/tests/test_figure.py::test_reused_gridspec\", \"lib/matplotlib/tests/test_figure.py::test_subfigure[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_dpi\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ss[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_double[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_spanning\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ticks\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_scatter_size[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_pdf\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_add_axes_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_ginput\", \"lib/matplotlib/tests/test_figure.py::test_waitforbuttonpress\", \"lib/matplotlib/tests/test_figure.py::test_kwargs_pass\", \"lib/matplotlib/tests/test_figure.py::test_deepcopy\"]",
        "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
        "generated_tests": [
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pickle\n\nclass TestMatplotlibDPI(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n        self.x = np.linspace(0,2*np.pi)\n        self.y = np.sin(self.x)\n\n    def dump_load_get_dpi(self, fig):\n        with open('test_figure.pickle','wb') as file:\n            pickle.dump(fig, file)\n\n        with open('test_figure.pickle', 'rb') as blob:\n            fig2 = pickle.load(blob)\n        return fig2, fig2.dpi\n\n    def test_dpi_after_unpickling(self):\n        for i in range(32):\n            self.fig, dpi = self.dump_load_get_dpi(self.fig)\n            self.assertEqual(dpi, 200.0, f\"DPI mismatch at iteration {i}\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pickle\n\nclass TestMatplotlibDPI(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n        self.x = np.linspace(0,2*np.pi)\n        self.y = np.sin(self.x)\n\n    def dump_load_get_dpi(self, fig):\n        with open('test.pickle','wb') as file:\n            pickle.dump(fig, file)\n\n        with open('test.pickle', 'rb') as blob:\n            fig2 = pickle.load(blob)\n        return fig2, fig2.dpi\n\n    def test_dpi_after_unpickling(self):\n        for i in range(32):\n            self.fig, dpi = self.dump_load_get_dpi(self.fig)\n            self.assertEqual(dpi, 200.0, f\"DPI mismatch at iteration {i}\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pickle\n\nclass TestDPIAfterUnpickling(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n        self.x = np.linspace(0,2*np.pi)\n        self.y = np.sin(self.x)\n\n    def dump_load_get_dpi(self, fig):\n        with open('test_figure.pickle','wb') as file:\n            pickle.dump(fig, file)\n\n        with open('test_figure.pickle', 'rb') as blob:\n            fig2 = pickle.load(blob)\n        return fig2, fig2.dpi\n\n    def test_dpi_after_unpickling(self):\n        initial_dpi = self.fig.dpi\n        for i in range(32):\n            self.fig, dpi = self.dump_load_get_dpi(self.fig)\n            self.assertEqual(dpi, initial_dpi, f\"DPI changed after unpickling at iteration {i}\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pickle\n\nclass TestDPIAfterUnpickling(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n        self.x = np.linspace(0,2*np.pi)\n        self.y = np.sin(self.x)\n\n    def dump_load_get_dpi(self, fig):\n        with open('sinus.pickle','wb') as file:\n            pickle.dump(fig, file)\n\n        with open('sinus.pickle', 'rb') as blob:\n            fig2 = pickle.load(blob)\n        return fig2, fig2.dpi\n\n    def test_dpi_after_unpickling(self):\n        for i in range(32):\n            self.fig, dpi = self.dump_load_get_dpi(self.fig)\n            self.assertEqual(dpi, 200.0, f\"DPI is not consistent at iteration {i}\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pickle\n\nclass TestDPIAfterUnpickling(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n        self.x = np.linspace(0,2*np.pi)\n        self.y = np.sin(self.x)\n\n    def dump_load_get_dpi(self, fig):\n        with open('test.pickle','wb') as file:\n            pickle.dump(fig, file)\n\n        with open('test.pickle', 'rb') as blob:\n            fig2 = pickle.load(blob)\n        return fig2, fig2.dpi\n\n    def test_dpi_after_unpickling(self):\n        for i in range(32):\n            self.fig, dpi = self.dump_load_get_dpi(self.fig)\n            self.assertEqual(dpi, 200.0, f\"DPI mismatch at iteration {i}\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_pickle.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-24334",
        "base_commit": "332937997d03e0c173be6d9fc1841e9186e857df",
        "patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -2029,6 +2029,9 @@ def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):\n         other limits, you should set the limits explicitly after setting the\n         ticks.\n         \"\"\"\n+        if labels is None and kwargs:\n+            raise ValueError('labels argument cannot be None when '\n+                             'kwargs are passed')\n         result = self._set_tick_locations(ticks, minor=minor)\n         if labels is not None:\n             self.set_ticklabels(labels, minor=minor, **kwargs)\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5732,6 +5732,17 @@ def test_set_get_ticklabels():\n     ax[1].set_yticklabels(ax[0].get_yticklabels())\n \n \n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+\n @check_figures_equal(extensions=[\"png\"])\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n",
        "problem_statement": "[ENH]: Axes.set_xticks/Axis.set_ticks only validates kwargs if ticklabels are set, but they should\n### Problem\n\nPer the doc of `Axis.set_ticks`:\r\n```\r\n        **kwargs\r\n            `.Text` properties for the labels. These take effect only if you\r\n            pass *labels*. In other cases, please use `~.Axes.tick_params`.\r\n```\r\nThis means that in e.g. `ax.set_xticks([0, 1], xticklabels=[\"a\", \"b\"])`, the incorrect `xticklabels` silently do nothing; they are not even validated (because `labels` has not been passed).\n\n### Proposed solution\n\nWe should at least check that `kwargs` are valid Text properties in all cases; we could even consider making any kwargs an error if `labels` is not set.\n",
        "hints_text": "> we could even consider making any kwargs an error if labels is not set.\r\n\r\n\ud83d\udc4d ",
        "created_at": "2022-11-01T18:11:43Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_set_ticks_kwargs_raise_error_without_labels\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_repr\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_shift\", \"lib/matplotlib/tests/test_axes.py::test_acorr[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_matshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla\", \"lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_arrow_in_view\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_annotate_signature\", \"lib/matplotlib/tests/test_axes.py::test_fill_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_single_date[png]\", \"lib/matplotlib/tests/test_axes.py::test_shaped_data[png]\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[png]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_axes.py::test_markevery[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_nan_bar_values\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_regression\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels_length\", \"lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_float16\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]\", \"lib/matplotlib/tests/test_axes.py::test_stairs[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_update[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_empty\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2\", \"lib/matplotlib/tests/test_axes.py::test_stairs_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error\", \"lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_log_scales\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_no_data\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_invalid\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_errorbar_polar_caps[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid\", \"lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_markerfmt\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_args\", \"lib/matplotlib/tests/test_axes.py::test_vlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_default\", \"lib/matplotlib/tests/test_axes.py::test_hlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_hlines_default\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_fs_none\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd[png]\", \"lib/matplotlib/tests/test_axes.py::test_spectrum[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases\", \"lib/matplotlib/tests/test_axes.py::test_twin_remove[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]\", \"lib/matplotlib/tests/test_axes.py::test_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_shared_aspect_error\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_method_errors\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_default[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values\", \"lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie\", \"lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc\", \"lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_set_xy_bound\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_bad_plot_args\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_shared_bool\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks_log\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates\", \"lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing\", \"lib/matplotlib/tests/test_axes.py::test_pandas_index_shape\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist\", \"lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titletwiny\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[left\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[center\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[both\", \"lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_offset_text_visible\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_inset\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_inset_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_inset_projection\", \"lib/matplotlib/tests/test_axes.py::test_inset_subclass\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan\", \"lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_secondary_minorloc\", \"lib/matplotlib/tests/test_axes.py::test_secondary_formatter\", \"lib/matplotlib/tests/test_axes.py::test_secondary_repr\", \"lib/matplotlib/tests/test_axes.py::test_normal_axes\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\", \"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\", \"lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position\", \"lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init\", \"lib/matplotlib/tests/test_axes.py::test_set_aspect_negative\", \"lib/matplotlib/tests/test_axes.py::test_redraw_in_frame\", \"lib/matplotlib/tests/test_axes.py::test_invisible_axes_events\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]\", \"lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]\", \"lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions\", \"lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_retick\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_center\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_labels\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted\", \"lib/matplotlib/tests/test_axes.py::test_nan_barlabels\", \"lib/matplotlib/tests/test_axes.py::test_patch_bounds\", \"lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_artist_sublists\", \"lib/matplotlib/tests/test_axes.py::test_empty_line_plots\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format\", \"lib/matplotlib/tests/test_axes.py::test_automatic_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_errors\", \"lib/matplotlib/tests/test_axes.py::test_clim\", \"lib/matplotlib/tests/test_axes.py::test_bezier_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_small_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_get_xticklabel\", \"lib/matplotlib/tests/test_axes.py::test_bar_leading_nan\", \"lib/matplotlib/tests/test_axes.py::test_bar_all_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_extent_units[png]\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
        "generated_tests": [
            "import pytest\nimport matplotlib.pyplot as plt\n\ndef test_set_xticks_kwargs_validation():\n    fig, ax = plt.subplots()\n    with pytest.raises(ValueError):\n        ax.set_xticks([0, 1], xticklabels=[\"a\", \"b\"], invalid_kwarg=\"test\")\n    plt.close(fig)",
            "import pytest\nimport matplotlib.pyplot as plt\n\ndef test_set_xticks_kwargs_validation():\n    fig, ax = plt.subplots()\n\n    # Test with labels set\n    ax.set_xticks([0, 1], labels=[\"a\", \"b\"], color='red')\n    labels = [tick.get_text() for tick in ax.get_xticklabels()]\n    assert labels == [\"a\", \"b\"], \"Labels should be set correctly\"\n    assert all(label.get_color() == 'red' for label in ax.get_xticklabels()), \"Label color should be set correctly\"\n\n    # Test without labels set\n    with pytest.raises(ValueError):\n        ax.set_xticks([0, 1], color='blue')",
            "import matplotlib.pyplot as plt\nimport pytest\n\ndef test_set_xticks_kwargs_validation():\n    fig, ax = plt.subplots()\n\n    # Test with labels set\n    ax.set_xticks([0, 1], labels=[\"a\", \"b\"], color='red')\n    assert ax.get_xticklabels()[0].get_text() == \"a\"\n    assert ax.get_xticklabels()[0].get_color() == 'red'\n\n    # Test without labels set\n    with pytest.raises(ValueError):\n        ax.set_xticks([0, 1], color='blue')",
            "import matplotlib.pyplot as plt\nimport pytest\n\ndef test_set_xticks_kwargs_validation():\n    fig, ax = plt.subplots()\n\n    # Test with labels\n    ax.set_xticks([0, 1], labels=[\"a\", \"b\"], color='red')\n    labels = ax.get_xticklabels()\n    assert len(labels) == 2\n    assert labels[0].get_text() == 'a'\n    assert labels[1].get_text() == 'b'\n    assert labels[0].get_color() == 'red'\n    assert labels[1].get_color() == 'red'\n\n    # Test without labels\n    with pytest.raises(ValueError):\n        ax.set_xticks([0, 1], color='blue')",
            "import pytest\nimport matplotlib.pyplot as plt\n\ndef test_set_xticks_kwargs_validation():\n    fig, ax = plt.subplots()\n    with pytest.raises(ValueError):\n        ax.set_xticks([0, 1], xticklabels=[\"a\", \"b\"], invalid_kwarg=\"test\")\n    plt.close(fig)"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_axes.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-23987",
        "base_commit": "e98d8d085e8f53ec0467422b326f7738a2dd695e",
        "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2426,9 +2426,12 @@ def __init__(self,\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n         elif constrained_layout is not None:\n-            self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n+                self.set_layout_engine(layout='constrained')\n                 self.get_layout_engine().set(**constrained_layout)\n+            elif constrained_layout:\n+                self.set_layout_engine(layout='constrained')\n+\n         else:\n             # everything is None, so use default:\n             self.set_layout_engine(layout=layout)\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -656,3 +656,14 @@ def test_compressed1():\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n     np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+\n+@pytest.mark.parametrize('arg, state', [\n+    (True, True),\n+    (False, False),\n+    ({}, True),\n+    ({'rect': None}, True)\n+])\n+def test_set_constrained_layout(arg, state):\n+    fig, ax = plt.subplots(constrained_layout=arg)\n+    assert fig.get_constrained_layout() is state\n",
        "problem_statement": "[Bug]: Constrained layout UserWarning even when False\n### Bug summary\r\n\r\nWhen using layout settings such as `plt.subplots_adjust` or `bbox_inches='tight`, a UserWarning is produced due to incompatibility with constrained_layout, even if constrained_layout = False. This was not the case in previous versions.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\na = np.linspace(0,2*np.pi,100)\r\nb = np.sin(a)\r\nc = np.cos(a)\r\nfig,ax = plt.subplots(1,2,figsize=(8,2),constrained_layout=False)\r\nax[0].plot(a,b)\r\nax[1].plot(a,c)\r\nplt.subplots_adjust(wspace=0)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nThe plot works fine but the warning is generated\r\n\r\n`/var/folders/ss/pfgdfm2x7_s4cyw2v0b_t7q80000gn/T/ipykernel_76923/4170965423.py:7: UserWarning: This figure was using a layout engine that is incompatible with subplots_adjust and/or tight_layout; not calling subplots_adjust.\r\n  plt.subplots_adjust(wspace=0)`\r\n\r\n### Expected outcome\r\n\r\nno warning\r\n\r\n### Additional information\r\n\r\nWarning disappears when constrained_layout=False is removed\r\n\r\n### Operating system\r\n\r\nOS/X\r\n\r\n### Matplotlib Version\r\n\r\n3.6.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n",
        "hints_text": "Yup, that is indeed a bug https://github.com/matplotlib/matplotlib/blob/e98d8d085e8f53ec0467422b326f7738a2dd695e/lib/matplotlib/figure.py#L2428-L2431 \r\n\r\nPR on the way.\n@VanWieren Did you mean to close this?  We normally keep bugs open until the PR to fix it is actually merged.\n> @VanWieren Did you mean to close this? We normally keep bugs open until the PR to fix it is actually merged.\r\n\r\noh oops, I did not know that. Will reopen",
        "created_at": "2022-09-22T21:39:02Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_constrainedlayout.py::test_set_constrained_layout[False-False]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout1[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout2[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout3[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout4[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout5[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout6[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_identical_subgridspec\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout7\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout8[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout9[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout10[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout11[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout11rat[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout12[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout13[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout14[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout15[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout16[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout17[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout18\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout19\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout20\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout21\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout22\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_constrained_layout23\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_colorbar_location[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_hidden_axes\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_colorbar_align\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_colorbars_no_overlapV[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_colorbars_no_overlapH[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_manually_set_position\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_bboxtight[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_bbox[png]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_align_labels\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_suplabels\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_gridspec_addressing\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_discouraged_api\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_kwargs\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_rect\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_compressed1\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_set_constrained_layout[True-True]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_set_constrained_layout[arg2-True]\", \"lib/matplotlib/tests/test_constrainedlayout.py::test_set_constrained_layout[arg3-True]\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
        "generated_tests": [
            "import matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_constrained_layout_warning(self):\n        a = np.linspace(0,2*np.pi,100)\n        b = np.sin(a)\n        c = np.cos(a)\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            fig,ax = plt.subplots(1,2,figsize=(8,2),constrained_layout=False)\n            ax[0].plot(a,b)\n            ax[1].plot(a,c)\n            plt.subplots_adjust(wspace=0)\n            self.assertEqual(len(w), 0, \"Warning was triggered\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nimport unittest\n\nclass TestMatplotlibWarning(unittest.TestCase):\n    def test_constrained_layout_warning(self):\n        a = np.linspace(0,2*np.pi,100)\n        b = np.sin(a)\n        c = np.cos(a)\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            fig,ax = plt.subplots(1,2,figsize=(8,2),constrained_layout=False)\n            ax[0].plot(a,b)\n            ax[1].plot(a,c)\n            plt.subplots_adjust(wspace=0)\n            self.assertEqual(len(w), 0, \"Warning was triggered when it shouldn't have been\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_constrained_layout_warning(self):\n        a = np.linspace(0,2*np.pi,100)\n        b = np.sin(a)\n        c = np.cos(a)\n        with warnings.catch_warnings(record=True) as w:\n            fig,ax = plt.subplots(1,2,figsize=(8,2),constrained_layout=False)\n            ax[0].plot(a,b)\n            ax[1].plot(a,c)\n            plt.subplots_adjust(wspace=0)\n            self.assertEqual(len(w), 0, \"Warning was triggered when it shouldn't have been\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_constrained_layout_warning(self):\n        a = np.linspace(0,2*np.pi,100)\n        b = np.sin(a)\n        c = np.cos(a)\n        with warnings.catch_warnings(record=True) as w:\n            fig,ax = plt.subplots(1,2,figsize=(8,2),constrained_layout=False)\n            ax[0].plot(a,b)\n            ax[1].plot(a,c)\n            plt.subplots_adjust(wspace=0)\n            self.assertEqual(len(w), 0, \"Warning was triggered when it shouldn't have been\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_constrained_layout_warning(self):\n        a = np.linspace(0,2*np.pi,100)\n        b = np.sin(a)\n        c = np.cos(a)\n        with warnings.catch_warnings(record=True) as w:\n            fig,ax = plt.subplots(1,2,figsize=(8,2),constrained_layout=False)\n            ax[0].plot(a,b)\n            ax[1].plot(a,c)\n            plt.subplots_adjust(wspace=0)\n            self.assertEqual(len(w), 0, \"Warning was triggered when it shouldn't have been\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_constrainedlayout.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-18869",
        "base_commit": "b7d05919865fc0c37a0164cf467d5d5513bd0ede",
        "patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -129,25 +129,60 @@\n   year      = 2007\n }\"\"\"\n \n+# modelled after sys.version_info\n+_VersionInfo = namedtuple('_VersionInfo',\n+                          'major, minor, micro, releaselevel, serial')\n \n-def __getattr__(name):\n-    if name == \"__version__\":\n+\n+def _parse_to_version_info(version_str):\n+    \"\"\"\n+    Parse a version string to a namedtuple analogous to sys.version_info.\n+\n+    See:\n+    https://packaging.pypa.io/en/latest/version.html#packaging.version.parse\n+    https://docs.python.org/3/library/sys.html#sys.version_info\n+    \"\"\"\n+    v = parse_version(version_str)\n+    if v.pre is None and v.post is None and v.dev is None:\n+        return _VersionInfo(v.major, v.minor, v.micro, 'final', 0)\n+    elif v.dev is not None:\n+        return _VersionInfo(v.major, v.minor, v.micro, 'alpha', v.dev)\n+    elif v.pre is not None:\n+        releaselevel = {\n+            'a': 'alpha',\n+            'b': 'beta',\n+            'rc': 'candidate'}.get(v.pre[0], 'alpha')\n+        return _VersionInfo(v.major, v.minor, v.micro, releaselevel, v.pre[1])\n+    else:\n+        # fallback for v.post: guess-next-dev scheme from setuptools_scm\n+        return _VersionInfo(v.major, v.minor, v.micro + 1, 'alpha', v.post)\n+\n+\n+def _get_version():\n+    \"\"\"Return the version string used for __version__.\"\"\"\n+    # Only shell out to a git subprocess if really needed, and not on a\n+    # shallow clone, such as those used by CI, as the latter would trigger\n+    # a warning from setuptools_scm.\n+    root = Path(__file__).resolve().parents[2]\n+    if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n         import setuptools_scm\n+        return setuptools_scm.get_version(\n+            root=root,\n+            version_scheme=\"post-release\",\n+            local_scheme=\"node-and-date\",\n+            fallback_version=_version.version,\n+        )\n+    else:  # Get the version from the _version.py setuptools_scm file.\n+        return _version.version\n+\n+\n+def __getattr__(name):\n+    if name in (\"__version__\", \"__version_info__\"):\n         global __version__  # cache it.\n-        # Only shell out to a git subprocess if really needed, and not on a\n-        # shallow clone, such as those used by CI, as the latter would trigger\n-        # a warning from setuptools_scm.\n-        root = Path(__file__).resolve().parents[2]\n-        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n-            __version__ = setuptools_scm.get_version(\n-                root=root,\n-                version_scheme=\"post-release\",\n-                local_scheme=\"node-and-date\",\n-                fallback_version=_version.version,\n-            )\n-        else:  # Get the version from the _version.py setuptools_scm file.\n-            __version__ = _version.version\n-        return __version__\n+        __version__ = _get_version()\n+        global __version__info__  # cache it.\n+        __version_info__ = _parse_to_version_info(__version__)\n+        return __version__ if name == \"__version__\" else __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_matplotlib.py b/lib/matplotlib/tests/test_matplotlib.py\n--- a/lib/matplotlib/tests/test_matplotlib.py\n+++ b/lib/matplotlib/tests/test_matplotlib.py\n@@ -7,6 +7,16 @@\n import matplotlib\n \n \n+@pytest.mark.parametrize('version_str, version_tuple', [\n+    ('3.5.0', (3, 5, 0, 'final', 0)),\n+    ('3.5.0rc2', (3, 5, 0, 'candidate', 2)),\n+    ('3.5.0.dev820+g6768ef8c4c', (3, 5, 0, 'alpha', 820)),\n+    ('3.5.0.post820+g6768ef8c4c', (3, 5, 1, 'alpha', 820)),\n+])\n+def test_parse_to_version_info(version_str, version_tuple):\n+    assert matplotlib._parse_to_version_info(version_str) == version_tuple\n+\n+\n @pytest.mark.skipif(\n     os.name == \"nt\", reason=\"chmod() doesn't work as is on Windows\")\n @pytest.mark.skipif(os.name != \"nt\" and os.geteuid() == 0,\n",
        "problem_statement": "Add easily comparable version info to toplevel\n<!--\r\nWelcome! Thanks for thinking of a way to improve Matplotlib.\r\n\r\n\r\nBefore creating a new feature request please search the issues for relevant feature requests.\r\n-->\r\n\r\n### Problem\r\n\r\nCurrently matplotlib only exposes `__version__`.  For quick version checks, exposing either a `version_info` tuple (which can be compared with other tuples) or a `LooseVersion` instance (which can be properly compared with other strings) would be a small usability improvement.\r\n\r\n(In practice I guess boring string comparisons will work just fine until we hit mpl 3.10 or 4.10 which is unlikely to happen soon, but that feels quite dirty :))\r\n<!--\r\nProvide a clear and concise description of the problem this feature will solve. \r\n\r\nFor example:\r\n* I'm always frustrated when [...] because [...]\r\n* I would like it if [...] happened when I [...] because [...]\r\n* Here is a sample image of what I am asking for [...]\r\n-->\r\n\r\n### Proposed Solution\r\n\r\nI guess I slightly prefer `LooseVersion`, but exposing just a `version_info` tuple is much more common in other packages (and perhaps simpler to understand).  The hardest(?) part is probably just bikeshedding this point :-)\r\n<!-- Provide a clear and concise description of a way to accomplish what you want. For example:\r\n\r\n* Add an option so that when [...]  [...] will happen\r\n -->\r\n\r\n### Additional context and prior art\r\n\r\n`version_info` is a pretty common thing (citation needed).\r\n<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:\r\n\r\n* Another project [...] solved this by [...]\r\n-->\r\n\n",
        "hints_text": "It seems that `__version_info__` is the way to go.\r\n\r\n### Prior art\r\n- There's no official specification for version tuples. [PEP 396 - Module Version Numbers](https://www.python.org/dev/peps/pep-0396/) only defines the string `__version__`.\r\n\r\n- Many projects don't bother with version tuples.\r\n\r\n- When they do, `__version_info__` seems to be a common thing:\r\n  - [Stackoverflow discussion](https://stackoverflow.com/a/466694)\r\n  - [PySide2](https://doc.qt.io/qtforpython-5.12/pysideversion.html#printing-project-and-qt-version) uses it.\r\n\r\n- Python itself has the string [sys.version](https://docs.python.org/3/library/sys.html#sys.version) and the (named)tuple [sys.version_info](https://docs.python.org/3/library/sys.html#sys.version_info). In analogy to that `__version_info__` next to `__version__` makes sense for packages.\r\n",
        "created_at": "2020-11-01T23:18:42Z",
        "version": "3.3",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_matplotlib.py::test_parse_to_version_info[3.5.0-version_tuple0]\", \"lib/matplotlib/tests/test_matplotlib.py::test_parse_to_version_info[3.5.0rc2-version_tuple1]\", \"lib/matplotlib/tests/test_matplotlib.py::test_parse_to_version_info[3.5.0.dev820+g6768ef8c4c-version_tuple2]\", \"lib/matplotlib/tests/test_matplotlib.py::test_parse_to_version_info[3.5.0.post820+g6768ef8c4c-version_tuple3]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_matplotlib.py::test_tmpconfigdir_warning\", \"lib/matplotlib/tests/test_matplotlib.py::test_importable_with_no_home\", \"lib/matplotlib/tests/test_matplotlib.py::test_use_doc_standard_backends\", \"lib/matplotlib/tests/test_matplotlib.py::test_importable_with__OO\"]",
        "environment_setup_commit": "28289122be81e0bc0a6ee0c4c5b7343a46ce2e4e",
        "generated_tests": [
            "import unittest\nfrom matplotlib import __version__\n\nclass TestVersionInfo(unittest.TestCase):\n    def test_version_info(self):\n        # Check if __version__ exists\n        self.assertTrue(hasattr(__version__, '__version__'))\n        \n        # Check if version_info exists\n        self.assertTrue(hasattr(__version__, 'version_info'))\n        \n        # Check if version_info is a tuple\n        self.assertIsInstance(__version__.version_info, tuple)\n        \n        # Check if LooseVersion exists\n        self.assertTrue(hasattr(__version__, 'LooseVersion'))\n        \n        # Check if LooseVersion is an instance\n        self.assertIsInstance(__version__.LooseVersion, __version__.LooseVersion)\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nfrom matplotlib import __version__\n\nclass TestVersionInfo(unittest.TestCase):\n    def test_version_info(self):\n        # Check if __version__ exists\n        self.assertTrue(hasattr(__version__, '__version__'))\n        # Check if version_info exists\n        self.assertTrue(hasattr(__version__, 'version_info'))\n        # Check if version_info is a tuple\n        self.assertIsInstance(__version__.version_info, tuple)\n        # Check if LooseVersion exists\n        self.assertTrue(hasattr(__version__, 'LooseVersion'))\n        # Check if LooseVersion is an instance of a class\n        self.assertIsInstance(__version__.LooseVersion, __version__.LooseVersion.__class__)\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nfrom matplotlib import __version__\n\nclass TestVersionInfo(unittest.TestCase):\n    def test_version_info(self):\n        # Check if __version__ exists\n        self.assertTrue(hasattr(__version__, '__version__'))\n        # Check if __version__ is a string\n        self.assertIsInstance(__version__.__version__, str)\n        # Check if __version__ can be split into a tuple and each element can be converted to int\n        try:\n            version_info = tuple(map(int, (__version__.__version__.split(\".\"))))\n        except ValueError:\n            self.fail(\"__version__ cannot be converted to a tuple of integers\")\n        # Check if version_info is a tuple\n        self.assertIsInstance(version_info, tuple)\n        # Check if all elements in version_info are integers\n        self.assertTrue(all(isinstance(i, int) for i in version_info))\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nfrom matplotlib import __version__\n\nclass TestVersionInfo(unittest.TestCase):\n    def test_version_info(self):\n        # Check if __version__ exists\n        self.assertTrue(hasattr(__version__, '__version__'))\n        # Check if __version__ is a string\n        self.assertIsInstance(__version__.__version__, str)\n        # Check if __version__ can be split into a tuple and each element can be converted to int\n        try:\n            version_info = tuple(map(int, (__version__.__version__.split(\".\"))))\n        except ValueError:\n            self.fail(\"__version__ cannot be converted to a tuple of integers\")\n        # Check if version_info is a tuple\n        self.assertIsInstance(version_info, tuple)\n        # Check if all elements in version_info are integers\n        self.assertTrue(all(isinstance(i, int) for i in version_info))\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nfrom matplotlib import __version__\n\nclass TestVersionInfo(unittest.TestCase):\n    def test_version_info(self):\n        # Check if __version__ exists\n        self.assertTrue(hasattr(__version__, '__version__'))\n        # Check if __version__ is a string\n        self.assertIsInstance(__version__.__version__, str)\n        # Check if __version__ can be split into a tuple and each element can be converted to int\n        try:\n            version_info = tuple(map(int, (__version__.__version__.split(\".\"))))\n        except ValueError:\n            self.fail(\"__version__ cannot be converted to a tuple of integers\")\n        # Check if version_info is a tuple\n        self.assertIsInstance(version_info, tuple)\n        # Check if all elements in version_info are integers\n        self.assertTrue(all(isinstance(i, int) for i in version_info))\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_rcparams.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-25311",
        "base_commit": "430fb1db88843300fb4baae3edc499bbfe073b0c",
        "patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1505,7 +1505,6 @@ def __init__(self, ref_artist, use_blit=False):\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self.canvas = self.ref_artist.figure.canvas\n         self._use_blit = use_blit and self.canvas.supports_blit\n         self.cids = [\n             self.canvas.callbacks._connect_picklable(\n@@ -1514,6 +1513,9 @@ def __init__(self, ref_artist, use_blit=False):\n                 'button_release_event', self.on_release),\n         ]\n \n+    # A property, not an attribute, to maintain picklability.\n+    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n             dx = evt.x - self.mouse_x\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,6 +1,7 @@\n from io import BytesIO\n import ast\n import pickle\n+import pickletools\n \n import numpy as np\n import pytest\n@@ -88,6 +89,7 @@ def _generate_complete_test_figure(fig_ref):\n \n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n+    plt.legend(draggable=True)\n \n \n @mpl.style.context(\"default\")\n@@ -95,9 +97,13 @@ def _generate_complete_test_figure(fig_ref):\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n     # plotting is done, now test its pickle-ability\n-    pkl = BytesIO()\n-    pickle.dump(fig_ref, pkl, pickle.HIGHEST_PROTOCOL)\n-    loaded = pickle.loads(pkl.getbuffer())\n+    pkl = pickle.dumps(fig_ref, pickle.HIGHEST_PROTOCOL)\n+    # FigureCanvasAgg is picklable and GUI canvases are generally not, but there should\n+    # be no reference to the canvas in the pickle stream in either case.  In order to\n+    # keep the test independent of GUI toolkits, run it with Agg and check that there's\n+    # no reference to FigureCanvasAgg in the pickle stream.\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    loaded = pickle.loads(pkl)\n     loaded.canvas.draw()\n \n     fig_test.set_size_inches(loaded.get_size_inches())\n",
        "problem_statement": "[Bug]: Unable to pickle figure with draggable legend\n### Bug summary\r\n\r\nI am unable to pickle figure with draggable legend. Same error comes for draggable annotations.\r\n\r\n\r\n\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\n\r\ntime=[0,1,2,3,4]\r\nspeed=[40,43,45,47,48]\r\n\r\nax.plot(time,speed,label=\"speed\")\r\n\r\nleg=ax.legend()\r\nleg.set_draggable(True) #pickling works after removing this line \r\n\r\npickle.dumps(fig)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n`TypeError: cannot pickle 'FigureCanvasQTAgg' object`\r\n\r\n### Expected outcome\r\n\r\nPickling successful\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows 10\r\n\r\n### Matplotlib Version\r\n\r\n3.7.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.10\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n",
        "hints_text": "",
        "created_at": "2023-02-23T21:04:12Z",
        "version": "3.7",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_pickle.py::test_complete[png]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_pickle.py::test_simple\", \"lib/matplotlib/tests/test_pickle.py::test_gcf\", \"lib/matplotlib/tests/test_pickle.py::test_no_pyplot\", \"lib/matplotlib/tests/test_pickle.py::test_renderer\", \"lib/matplotlib/tests/test_pickle.py::test_image\", \"lib/matplotlib/tests/test_pickle.py::test_polar\", \"lib/matplotlib/tests/test_pickle.py::test_transform\", \"lib/matplotlib/tests/test_pickle.py::test_rrulewrapper\", \"lib/matplotlib/tests/test_pickle.py::test_shared\", \"lib/matplotlib/tests/test_pickle.py::test_inset_and_secondary\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap0]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap1]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap2]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap3]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap4]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap5]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap6]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap7]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap8]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap9]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap10]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap11]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap12]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap13]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap14]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap15]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap16]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap17]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap18]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap19]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap20]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap21]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap22]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap23]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap24]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap25]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap26]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap27]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap28]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap29]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap30]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap31]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap32]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap33]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap34]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap35]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap36]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap37]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap38]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap39]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap40]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap41]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap42]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap43]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap44]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap45]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap46]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap47]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap48]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap49]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap50]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap51]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap52]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap53]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap54]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap55]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap56]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap57]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap58]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap59]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap60]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap61]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap62]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap63]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap64]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap65]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap66]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap67]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap68]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap69]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap70]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap71]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap72]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap73]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap74]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap75]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap76]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap77]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap78]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap79]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap80]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap81]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap82]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap83]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap84]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap85]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap86]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap87]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap88]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap89]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap90]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap91]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap92]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap93]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap94]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap95]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap96]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap97]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap98]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap99]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap100]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap101]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap102]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap103]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap104]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap105]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap106]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap107]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap108]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap109]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap110]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap111]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap112]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap113]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap114]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap115]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap116]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap117]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap118]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap119]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap120]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap121]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap122]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap123]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap124]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap125]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap126]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap127]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap128]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap129]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap130]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap131]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap132]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap133]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap134]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap135]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap136]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap137]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap138]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap139]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap140]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap141]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap142]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap143]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap144]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap145]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap146]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap147]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap148]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap149]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap150]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap151]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap152]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap153]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap154]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap155]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap156]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap157]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap158]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap159]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap160]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap161]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap162]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap163]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap164]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap165]\", \"lib/matplotlib/tests/test_pickle.py::test_unpickle_canvas\", \"lib/matplotlib/tests/test_pickle.py::test_mpl_toolkits\", \"lib/matplotlib/tests/test_pickle.py::test_standard_norm\", \"lib/matplotlib/tests/test_pickle.py::test_dynamic_norm\", \"lib/matplotlib/tests/test_pickle.py::test_vertexselector\"]",
        "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
        "generated_tests": [
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickling(unittest.TestCase):\n    def test_pickle_draggable_legend(self):\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time=[0,1,2,3,4]\n        speed=[40,43,45,47,48]\n\n        ax.plot(time,speed,label=\"speed\")\n\n        leg=ax.legend()\n        leg.set_draggable(True) \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertEqual(result, True, \"Unable to pickle figure with draggable legend\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickling(unittest.TestCase):\n    def test_pickling_with_draggable_legend(self):\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time=[0,1,2,3,4]\n        speed=[40,43,45,47,48]\n\n        ax.plot(time,speed,label=\"speed\")\n\n        leg=ax.legend()\n        leg.set_draggable(True) \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertEqual(result, True, \"Pickling failed with draggable legend\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickling(unittest.TestCase):\n    def test_pickle_draggable_legend(self):\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time=[0,1,2,3,4]\n        speed=[40,43,45,47,48]\n\n        ax.plot(time,speed,label=\"speed\")\n\n        leg=ax.legend()\n        leg.set_draggable(True) \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertEqual(result, True, \"Unable to pickle figure with draggable legend\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickling(unittest.TestCase):\n    def test_pickle_draggable_legend(self):\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time=[0,1,2,3,4]\n        speed=[40,43,45,47,48]\n\n        ax.plot(time,speed,label=\"speed\")\n\n        leg=ax.legend()\n        leg.set_draggable(True) \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertEqual(result, True, \"Unable to pickle figure with draggable legend\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickling(unittest.TestCase):\n    def test_pickle_draggable_legend(self):\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time=[0,1,2,3,4]\n        speed=[40,43,45,47,48]\n\n        ax.plot(time,speed,label=\"speed\")\n\n        leg=ax.legend()\n        leg.set_draggable(True) \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertEqual(result, True, \"Unable to pickle figure with draggable legend\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_pickle.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-23964",
        "base_commit": "269c0b94b4fcf8b1135011c1556eac29dc09de15",
        "patch": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -665,8 +665,9 @@ def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None):\n                 curr_stream[1].append(\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n-            # append the last entry\n-            stream.append(curr_stream)\n+            # append the last entry if exists\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -256,6 +256,15 @@ def test_linedash():\n     assert buf.tell() > 0\n \n \n+def test_empty_line():\n+    # Smoke-test for gh#23954\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+\n def test_no_duplicate_definition():\n \n     fig = Figure()\n",
        "problem_statement": "[Bug]: Text label with empty line causes a \"TypeError: cannot unpack non-iterable NoneType object\" in PostScript backend\n### Bug summary\n\nWhen saving a figure with the PostScript backend, a\r\n> TypeError: cannot unpack non-iterable NoneType object\r\n\r\nhappens if the figure contains a multi-line text label with an empty line (see example).\n\n### Code for reproduction\n\n```python\nfrom matplotlib.figure import Figure\r\n\r\nfigure = Figure()\r\nax = figure.add_subplot(111)\r\n# ax.set_title('\\nLower title')  # this would cause an error as well\r\nax.annotate(text='\\nLower label', xy=(0, 0))\r\nfigure.savefig('figure.eps')\n```\n\n\n### Actual outcome\n\n$ ./venv/Scripts/python save_ps.py\r\nTraceback (most recent call last):\r\n  File \"C:\\temp\\matplotlib_save_ps\\save_ps.py\", line 7, in <module>\r\n    figure.savefig('figure.eps')\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3272, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2338, in print_figure\r\n    result = print_method(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2204, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 410, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 869, in _print_ps\r\n    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 927, in _print_figure\r\n    self.figure.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3069, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3106, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 1995, in draw\r\n    Text.draw(self, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 736, in draw\r\n    textrenderer.draw_text(gc, x, y, clean_line,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 248, in wrapper\r\n    return meth(self, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 673, in draw_text\r\n    for ps_name, xs_names in stream:\r\nTypeError: cannot unpack non-iterable NoneType object\r\n\n\n### Expected outcome\n\nThe figure can be saved as `figure.eps` without error.\n\n### Additional information\n\n- seems to happen if a text label or title contains a linebreak with an empty line\r\n- works without error for other backends such as PNG, PDF, SVG, Qt\r\n- works with matplotlib<=3.5.3\r\n- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug \n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.9.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n",
        "hints_text": "",
        "created_at": "2022-09-20T13:49:19Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_ps.py::test_empty_line\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-portrait]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-landscape]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-portrait]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-landscape]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps\", \"lib/matplotlib/tests/test_backend_ps.py::test_patheffects\", \"lib/matplotlib/tests/test_backend_ps.py::test_transparency[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_bbox\", \"lib/matplotlib/tests/test_backend_ps.py::test_failing_latex\", \"lib/matplotlib/tests/test_backend_ps.py::test_text_clip[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_d_glyph\", \"lib/matplotlib/tests/test_backend_ps.py::test_fonttype[3]\", \"lib/matplotlib/tests/test_backend_ps.py::test_fonttype[42]\", \"lib/matplotlib/tests/test_backend_ps.py::test_linedash\", \"lib/matplotlib/tests/test_backend_ps.py::test_no_duplicate_definition\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
        "generated_tests": [
            "import unittest\nfrom matplotlib.figure import Figure\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_figure_save_with_empty_line_label(self):\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text='\\nLower label', xy=(0, 0))\n        try:\n            figure.savefig('figure.eps')\n            self.assertTrue(True)\n        except TypeError as e:\n            self.fail(f\"Test failed due to TypeError: {e}\")",
            "import unittest\nfrom matplotlib.figure import Figure\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_figure_save_with_empty_line_label(self):\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text='\\nLower label', xy=(0, 0))\n        try:\n            figure.savefig('figure.eps')\n            self.assertTrue(True)\n        except TypeError as e:\n            self.fail(f\"Test failed due to TypeError: {e}\")",
            "import unittest\nfrom matplotlib.figure import Figure\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_figure_save_with_empty_line_label(self):\n        try:\n            figure = Figure()\n            ax = figure.add_subplot(111)\n            ax.annotate(text='\\nLower label', xy=(0, 0))\n            figure.savefig('figure.eps')\n        except TypeError as e:\n            self.fail(f\"Test failed with TypeError: {e}\")",
            "import unittest\nfrom matplotlib.figure import Figure\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_figure_save_with_empty_line_label(self):\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text='\\nLower label', xy=(0, 0))\n        try:\n            figure.savefig('figure.eps')\n            self.assertTrue(True)\n        except TypeError as e:\n            if str(e) == \"cannot unpack non-iterable NoneType object\":\n                self.fail(\"Bug not fixed: TypeError: cannot unpack non-iterable NoneType object\")\n            else:\n                raise e",
            "import unittest\nfrom matplotlib.figure import Figure\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_figure_save_with_empty_line_label(self):\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text='\\nLower label', xy=(0, 0))\n        try:\n            figure.savefig('figure.eps')\n            self.assertTrue(True)\n        except TypeError as e:\n            self.fail(f\"Test failed due to TypeError: {e}\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_backend_ps.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-25498",
        "base_commit": "78bf53caacbb5ce0dc7aa73f07a74c99f1ed919b",
        "patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -301,11 +301,6 @@ def __init__(self, ax, mappable=None, *, cmap=None,\n         if mappable is None:\n             mappable = cm.ScalarMappable(norm=norm, cmap=cmap)\n \n-        # Ensure the given mappable's norm has appropriate vmin and vmax\n-        # set even if mappable.draw has not yet been called.\n-        if mappable.get_array() is not None:\n-            mappable.autoscale_None()\n-\n         self.mappable = mappable\n         cmap = mappable.cmap\n         norm = mappable.norm\n@@ -1101,7 +1096,10 @@ def _process_values(self):\n             b = np.hstack((b, b[-1] + 1))\n \n         # transform from 0-1 to vmin-vmax:\n+        if self.mappable.get_array() is not None:\n+            self.mappable.autoscale_None()\n         if not self.norm.scaled():\n+            # If we still aren't scaled after autoscaling, use 0, 1 as default\n             self.norm.vmin = 0\n             self.norm.vmax = 1\n         self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -657,6 +657,12 @@ def test_colorbar_scale_reset():\n \n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n+    # log scale with no vmin/vmax set should scale to the data if there\n+    # is a mappable already associated with the colorbar, not (0, 1)\n+    pcm.norm = LogNorm()\n+    assert pcm.norm.vmin == z.min()\n+    assert pcm.norm.vmax == z.max()\n+\n \n def test_colorbar_get_ticks_2():\n     plt.rcParams['_internal.classic_mode'] = False\n",
        "problem_statement": "Update colorbar after changing mappable.norm\nHow can I update a colorbar, after I changed the norm instance of the colorbar?\n\n`colorbar.update_normal(mappable)` has now effect and `colorbar.update_bruteforce(mappable)` throws a `ZeroDivsionError`-Exception.\n\nConsider this example:\n\n``` python\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\nimg = 10**np.random.normal(1, 1, size=(50, 50))\n\nfig, ax = plt.subplots(1, 1)\nplot = ax.imshow(img, cmap='gray')\ncb = fig.colorbar(plot, ax=ax)\nplot.norm = LogNorm()\ncb.update_normal(plot)  # no effect\ncb.update_bruteforce(plot)  # throws ZeroDivisionError\nplt.show()\n```\n\nOutput for `cb.update_bruteforce(plot)`:\n\n```\nTraceback (most recent call last):\n  File \"test_norm.py\", line 12, in <module>\n    cb.update_bruteforce(plot)\n  File \"/home/maxnoe/.local/anaconda3/lib/python3.4/site-packages/matplotlib/colorbar.py\", line 967, in update_bruteforce\n    self.draw_all()\n  File \"/home/maxnoe/.local/anaconda3/lib/python3.4/site-packages/matplotlib/colorbar.py\", line 342, in draw_all\n    self._process_values()\n  File \"/home/maxnoe/.local/anaconda3/lib/python3.4/site-packages/matplotlib/colorbar.py\", line 664, in _process_values\n    b = self.norm.inverse(self._uniform_y(self.cmap.N + 1))\n  File \"/home/maxnoe/.local/anaconda3/lib/python3.4/site-packages/matplotlib/colors.py\", line 1011, in inverse\n    return vmin * ma.power((vmax / vmin), val)\nZeroDivisionError: division by zero\n```\n\n",
        "hints_text": "You have run into a big bug in imshow, not colorbar.  As a workaround, after setting `plot.norm`, call `plot.autoscale()`.  Then the `update_bruteforce` will work.\nWhen the norm is changed, it should pick up the vmax, vmin values from the autoscaling; but this is not happening.  Actually, it's worse than that; it fails even if the norm is set as a kwarg in the call to imshow. I haven't looked beyond that to see why.  I've confirmed the problem with master.\n\nIn ipython using `%matplotlib` setting the norm the first time works, changing it back later to\n`Normalize()` or something other blows up:\n\n```\n--> 199         self.pixels.autoscale()\n    200         self.update(force=True)\n    201 \n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/cm.py in autoscale(self)\n    323             raise TypeError('You must first set_array for mappable')\n    324         self.norm.autoscale(self._A)\n--> 325         self.changed()\n    326 \n    327     def autoscale_None(self):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/cm.py in changed(self)\n    357         callbackSM listeners to the 'changed' signal\n    358         \"\"\"\n--> 359         self.callbacksSM.process('changed', self)\n    360 \n    361         for key in self.update_dict:\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/cbook.py in process(self, s, *args, **kwargs)\n    560             for cid, proxy in list(six.iteritems(self.callbacks[s])):\n    561                 try:\n--> 562                     proxy(*args, **kwargs)\n    563                 except ReferenceError:\n    564                     self._remove_proxy(proxy)\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/cbook.py in __call__(self, *args, **kwargs)\n    427             mtd = self.func\n    428         # invoke the callable and return the result\n--> 429         return mtd(*args, **kwargs)\n    430 \n    431     def __eq__(self, other):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in on_mappable_changed(self, mappable)\n    915         self.set_cmap(mappable.get_cmap())\n    916         self.set_clim(mappable.get_clim())\n--> 917         self.update_normal(mappable)\n    918 \n    919     def add_lines(self, CS, erase=True):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in update_normal(self, mappable)\n    946         or contour plot to which this colorbar belongs is changed.\n    947         '''\n--> 948         self.draw_all()\n    949         if isinstance(self.mappable, contour.ContourSet):\n    950             CS = self.mappable\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in draw_all(self)\n    346         X, Y = self._mesh()\n    347         C = self._values[:, np.newaxis]\n--> 348         self._config_axes(X, Y)\n    349         if self.filled:\n    350             self._add_solids(X, Y, C)\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in _config_axes(self, X, Y)\n    442         ax.add_artist(self.patch)\n    443 \n--> 444         self.update_ticks()\n    445 \n    446     def _set_label(self):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in update_ticks(self)\n    371         \"\"\"\n    372         ax = self.ax\n--> 373         ticks, ticklabels, offset_string = self._ticker()\n    374         if self.orientation == 'vertical':\n    375             ax.yaxis.set_ticks(ticks)\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in _ticker(self)\n    592         formatter.set_data_interval(*intv)\n    593 \n--> 594         b = np.array(locator())\n    595         if isinstance(locator, ticker.LogLocator):\n    596             eps = 1e-10\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/ticker.py in __call__(self)\n   1533         'Return the locations of the ticks'\n   1534         vmin, vmax = self.axis.get_view_interval()\n-> 1535         return self.tick_values(vmin, vmax)\n   1536 \n   1537     def tick_values(self, vmin, vmax):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/ticker.py in tick_values(self, vmin, vmax)\n   1551             if vmin <= 0.0 or not np.isfinite(vmin):\n   1552                 raise ValueError(\n-> 1553                     \"Data has no positive values, and therefore can not be \"\n   1554                     \"log-scaled.\")\n   1555 \n\nValueError: Data has no positive values, and therefore can not be log-scaled.\n```\n\nAny news on this? Why does setting the norm back to a linear norm blow up if there are negative values?\n\n``` python\nIn [2]: %matplotlib\nUsing matplotlib backend: Qt4Agg\n\nIn [3]: # %load minimal_norm.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import Normalize, LogNorm\n\n\nx, y = np.meshgrid(np.linspace(0, 1, 10), np.linspace(0, 1, 10))\nz = np.random.normal(0, 5, size=x.shape)\n\nfig = plt.figure()\nimg = plt.pcolor(x, y, z, cmap='viridis')\ncbar = plt.colorbar(img)\n   ...: \n\nIn [4]: img.norm = LogNorm()\n\nIn [5]: img.autoscale()\n\nIn [7]: cbar.update_bruteforce(img)\n\nIn [8]: img.norm = Normalize()\n\nIn [9]: img.autoscale()\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-9-e26279d12b00> in <module>()\n----> 1 img.autoscale()\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/cm.py in autoscale(self)\n    323             raise TypeError('You must first set_array for mappable')\n    324         self.norm.autoscale(self._A)\n--> 325         self.changed()\n    326 \n    327     def autoscale_None(self):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/cm.py in changed(self)\n    357         callbackSM listeners to the 'changed' signal\n    358         \"\"\"\n--> 359         self.callbacksSM.process('changed', self)\n    360 \n    361         for key in self.update_dict:\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/cbook.py in process(self, s, *args, **kwargs)\n    561             for cid, proxy in list(six.iteritems(self.callbacks[s])):\n    562                 try:\n--> 563                     proxy(*args, **kwargs)\n    564                 except ReferenceError:\n    565                     self._remove_proxy(proxy)\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/cbook.py in __call__(self, *args, **kwargs)\n    428             mtd = self.func\n    429         # invoke the callable and return the result\n--> 430         return mtd(*args, **kwargs)\n    431 \n    432     def __eq__(self, other):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in on_mappable_changed(self, mappable)\n    915         self.set_cmap(mappable.get_cmap())\n    916         self.set_clim(mappable.get_clim())\n--> 917         self.update_normal(mappable)\n    918 \n    919     def add_lines(self, CS, erase=True):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in update_normal(self, mappable)\n    946         or contour plot to which this colorbar belongs is changed.\n    947         '''\n--> 948         self.draw_all()\n    949         if isinstance(self.mappable, contour.ContourSet):\n    950             CS = self.mappable\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in draw_all(self)\n    346         X, Y = self._mesh()\n    347         C = self._values[:, np.newaxis]\n--> 348         self._config_axes(X, Y)\n    349         if self.filled:\n    350             self._add_solids(X, Y, C)\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in _config_axes(self, X, Y)\n    442         ax.add_artist(self.patch)\n    443 \n--> 444         self.update_ticks()\n    445 \n    446     def _set_label(self):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in update_ticks(self)\n    371         \"\"\"\n    372         ax = self.ax\n--> 373         ticks, ticklabels, offset_string = self._ticker()\n    374         if self.orientation == 'vertical':\n    375             ax.yaxis.set_ticks(ticks)\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/colorbar.py in _ticker(self)\n    592         formatter.set_data_interval(*intv)\n    593 \n--> 594         b = np.array(locator())\n    595         if isinstance(locator, ticker.LogLocator):\n    596             eps = 1e-10\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/ticker.py in __call__(self)\n   1536         'Return the locations of the ticks'\n   1537         vmin, vmax = self.axis.get_view_interval()\n-> 1538         return self.tick_values(vmin, vmax)\n   1539 \n   1540     def tick_values(self, vmin, vmax):\n\n/home/maxnoe/.local/anaconda3/envs/ctapipe/lib/python3.5/site-packages/matplotlib/ticker.py in tick_values(self, vmin, vmax)\n   1554             if vmin <= 0.0 or not np.isfinite(vmin):\n   1555                 raise ValueError(\n-> 1556                     \"Data has no positive values, and therefore can not be \"\n   1557                     \"log-scaled.\")\n   1558 \n\nValueError: Data has no positive values, and therefore can not be log-scaled\n```\n\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!",
        "created_at": "2023-03-18T17:01:11Z",
        "version": "3.7",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_colorbar_scale_reset\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_shape[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_length[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-True]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-False]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_false\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_east[standard]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_east[constrained]\", \"lib/matplotlib/tests/test_colorbar.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_gridspec_make_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_scatter[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[no\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[with\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure_cl\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbarbase\", \"lib/matplotlib/tests/test_colorbar.py::test_parentless_mappable\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_closed_patch[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_minorticks_on_off\", \"lib/matplotlib/tests/test_colorbar.py::test_cbar_minorticks_for_rc_xyminortickvisible\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autoticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autotickslog\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[both]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[min]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[max]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_powernorm_extension\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_axes_kw\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_log_minortick_labels\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_renorm\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[%4.2e]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[{x:.2e}]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks_2\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_inverted_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_no_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_2d_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_label\", \"lib/matplotlib/tests/test_colorbar.py::test_keeping_xlabel[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim0]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim1]\", \"lib/matplotlib/tests/test_colorbar.py::test_anchored_cbar_position_using_specgrid\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_change_lim_scale[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_axes_handles_same_functions[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_inset_colorbar_layout\", \"lib/matplotlib/tests/test_colorbar.py::test_twoslope_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_cb_whose_mappable_has_no_figure[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_aspects\", \"lib/matplotlib/tests/test_colorbar.py::test_proportional_colorbars[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_drawedges[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_contourf_extend_patches[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_negative_boundarynorm\", \"lib/matplotlib/tests/test_colorbar.py::test_centerednorm\", \"lib/matplotlib/tests/test_colorbar.py::test_boundaries[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_no_warning_rcparams_grid_true\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_set_formatter_locator\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_alpha[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_offset_text_loc\", \"lib/matplotlib/tests/test_colorbar.py::test_title_text_loc\", \"lib/matplotlib/tests/test_colorbar.py::test_passing_location[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs0-TypeError-location\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs1-TypeError-location\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs2-ValueError-'top'\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs3-ValueError-invalid\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_axes_parmeters\"]",
        "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
        "generated_tests": [
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\nclass TestColorbarUpdate(unittest.TestCase):\n    def test_colorbar_update_after_changing_norm(self):\n        img = 10**np.random.normal(1, 1, size=(50, 50))\n\n        fig, ax = plt.subplots(1, 1)\n        plot = ax.imshow(img, cmap='gray')\n        cb = fig.colorbar(plot, ax=ax)\n        plot.norm = LogNorm()\n\n        try:\n            cb.update_normal(plot)  # no effect\n            cb.update_bruteforce(plot)  # throws ZeroDivisionError\n        except ZeroDivisionError:\n            self.fail(\"update_bruteforce raised ZeroDivisionError unexpectedly!\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\nclass TestColorbarUpdate(unittest.TestCase):\n    def test_colorbar_update_after_changing_norm(self):\n        img = 10**np.random.normal(1, 1, size=(50, 50))\n\n        fig, ax = plt.subplots(1, 1)\n        plot = ax.imshow(img, cmap='gray')\n        cb = fig.colorbar(plot, ax=ax)\n        plot.norm = LogNorm()\n\n        try:\n            cb.update_normal(plot)  # no effect\n            cb.update_bruteforce(plot)  # throws ZeroDivisionError\n        except ZeroDivisionError:\n            self.fail(\"update_bruteforce() raised ZeroDivisionError unexpectedly!\")",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\nclass TestColorbarUpdate(unittest.TestCase):\n    def test_colorbar_update_after_changing_norm(self):\n        img = 10**np.random.normal(1, 1, size=(50, 50))\n\n        fig, ax = plt.subplots(1, 1)\n        plot = ax.imshow(img, cmap='gray')\n        cb = fig.colorbar(plot, ax=ax)\n        plot.norm = LogNorm()\n\n        try:\n            cb.update_normal(plot)  # no effect\n            cb.update_bruteforce(plot)  # throws ZeroDivisionError\n        except ZeroDivisionError:\n            self.fail(\"ZeroDivisionError was raised.\")\n        finally:\n            plt.close(fig)\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\nclass TestColorbarUpdate(unittest.TestCase):\n    def test_colorbar_update_after_changing_norm(self):\n        img = 10**np.random.normal(1, 1, size=(50, 50))\n\n        fig, ax = plt.subplots(1, 1)\n        plot = ax.imshow(img, cmap='gray')\n        cb = fig.colorbar(plot, ax=ax)\n        plot.norm = LogNorm()\n\n        try:\n            cb.update_normal(plot)  # no effect\n            cb.update_bruteforce(plot)  # throws ZeroDivisionError\n        except ZeroDivisionError:\n            self.fail(\"update_bruteforce raised ZeroDivisionError unexpectedly!\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\nclass TestColorbarUpdate(unittest.TestCase):\n    def test_colorbar_update_after_changing_norm(self):\n        img = 10**np.random.normal(1, 1, size=(50, 50))\n\n        fig, ax = plt.subplots(1, 1)\n        plot = ax.imshow(img, cmap='gray')\n        cb = fig.colorbar(plot, ax=ax)\n        plot.norm = LogNorm()\n\n        try:\n            cb.update_normal(plot)  # no effect\n            cb.update_bruteforce(plot)  # throws ZeroDivisionError\n        except ZeroDivisionError:\n            self.fail(\"ZeroDivisionError was raised.\")\n        except Exception as e:\n            self.fail(f\"An unexpected exception {type(e)} was raised.\")\n        finally:\n            plt.close(fig)\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_colorbar.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-23299",
        "base_commit": "3eadeacc06c9f2ddcdac6ae39819faa9fbee9e39",
        "patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -1059,6 +1059,8 @@ def rc_context(rc=None, fname=None):\n     \"\"\"\n     Return a context manager for temporarily changing rcParams.\n \n+    The :rc:`backend` will not be reset by the context manager.\n+\n     Parameters\n     ----------\n     rc : dict\n@@ -1087,7 +1089,8 @@ def rc_context(rc=None, fname=None):\n              plt.plot(x, y)  # uses 'print.rc'\n \n     \"\"\"\n-    orig = rcParams.copy()\n+    orig = dict(rcParams.copy())\n+    del orig['backend']\n     try:\n         if fname:\n             rc_file(fname)\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -496,6 +496,13 @@ def test_keymaps():\n         assert isinstance(mpl.rcParams[k], list)\n \n \n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+\n def test_rcparams_reset_after_fail():\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n",
        "problem_statement": "[Bug]: get_backend() clears figures from Gcf.figs if they were created under rc_context\n### Bug summary\r\n\r\ncalling `matplotlib.get_backend()` removes all figures from `Gcf` if the *first* figure in `Gcf.figs` was created in an `rc_context`.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import get_backend, rc_context\r\n\r\n# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK\r\n# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK\r\nwith rc_context():\r\n    fig2 = plt.figure()\r\nbefore = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\r\nget_backend()\r\nafter = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\r\n\r\nassert before == after, '\\n' + before + '\\n' + after\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-1-fa4d099aa289> in <cell line: 11>()\r\n      9 after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\r\n     10 \r\n---> 11 assert before == after, '\\n' + before + '\\n' + after\r\n     12 \r\n\r\nAssertionError: \r\n94453354309744 OrderedDict([(1, <matplotlib.backends.backend_qt.FigureManagerQT object at 0x7fb33e26c220>)])\r\n94453354309744 OrderedDict()\r\n```\r\n\r\n### Expected outcome\r\n\r\nThe figure should not be missing from `Gcf`.  Consequences of this are, e.g, `plt.close(fig2)` doesn't work because `Gcf.destroy_fig()` can't find it.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nXubuntu\r\n\r\n### Matplotlib Version\r\n\r\n3.5.2\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\nPython 3.10.4\r\n\r\n### Jupyter version\r\n\r\nn/a\r\n\r\n### Installation\r\n\r\nconda\n",
        "hints_text": "My knee-jerk guess is that  :  \r\n\r\n - the `rcParams['backend']` in the auto-sentinel\r\n - that is stashed by rc_context\r\n - if you do the first thing to force the backend to be resolved in the context manager it get changes\r\n - the context manager sets it back to the sentinel an the way out\r\n - `get_backend()` re-resolves the backend which because it changes the backend it closes all of the figures\r\n\r\n\r\nThis is probably been a long standing latent bug, but was brought to the front when we made the backend resolution lazier.",
        "created_at": "2022-06-18T01:34:39Z",
        "version": "3.5",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_rcparams.py::test_no_backend_reset_rccontext\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_rcparams.py::test_rcparams\", \"lib/matplotlib/tests/test_rcparams.py::test_RcParams_class\", \"lib/matplotlib/tests/test_rcparams.py::test_Bug_2543\", \"lib/matplotlib/tests/test_rcparams.py::test_legend_colors[same\", \"lib/matplotlib/tests/test_rcparams.py::test_legend_colors[inherited\", \"lib/matplotlib/tests/test_rcparams.py::test_legend_colors[different\", \"lib/matplotlib/tests/test_rcparams.py::test_mfc_rcparams\", \"lib/matplotlib/tests/test_rcparams.py::test_mec_rcparams\", \"lib/matplotlib/tests/test_rcparams.py::test_axes_titlecolor_rcparams\", \"lib/matplotlib/tests/test_rcparams.py::test_Issue_1713\", \"lib/matplotlib/tests/test_rcparams.py::test_animation_frame_formats\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-t-True]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-y-True]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-yes-True]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-on-True]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-true-True]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-1-True0]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-1-True1]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-True-True]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-f-False]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-n-False]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-no-False]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-off-False]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-false-False]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-0-False0]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-0-False1]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-False-False]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist--target16]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-a,b-target17]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-aardvark-target18]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-aardvark,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-arg21-target21]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-arg22-target22]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-arg23-target23]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-arg24-target24]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-1,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-arg26-target26]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-arg27-target27]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-arg28-target28]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-arg29-target29]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-1.5,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-arg31-target31]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-arg32-target32]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-arg33-target33]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-arg34-target34]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-cycler(\\\"color\\\",\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-arg36-target36]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-(cycler(\\\"color\\\",\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-cycler(c='rgb',\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-cycler('c',\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-arg40-target40]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-arg41-target41]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hatch---|---|]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hatch-\\\\\\\\oO-\\\\\\\\oO]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hatch-/+*/.x-/+*/.x]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hatch--]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-r,g,b-target46]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-arg47-target47]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-r,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-arg49-target49]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-arg50-target50]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-arg51-target51]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-None-none]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-none-none]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-AABBCC-#AABBCC]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-AABBCC00-#AABBCC00]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-tab:blue-tab:blue]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-C12-C12]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-(0,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-arg59-target59]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-arg61-target61]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-linecolor-linecolor]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-markerfacecolor-markerfacecolor]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-mfc-markerfacecolor]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-markeredgecolor-markeredgecolor]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-mec-markeredgecolor]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-auto-auto]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-fd-fd]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-10-10]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-1,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-arg71-target71]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-arg72-target72]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-None-None]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-1-1]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-0.1-0.1]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg76-target76]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg77-target77]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg78-target78]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg79-target79]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg80-target80]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle----]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-solid-solid]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle------]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-dashed-dashed]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle--.--.]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-dashdot-dashdot]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-:-:]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-dotted-dotted]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle--]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-None-none]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-none-none]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-DoTtEd-dotted]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-1,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-arg95-target95]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-arg96-target96]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-arg97-target97]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-arg98-target98]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_bool-aardvark-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_bool-2-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_bool--1-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_bool-arg3-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_strlist-arg4-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_strlist-1-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_strlist-arg6-MatplotlibDeprecationWarning]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_strlist-arg7-MatplotlibDeprecationWarning]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_intlist-aardvark-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_intlist-arg9-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_intlist-arg10-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-aardvark-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-arg12-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-arg13-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-arg14-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-None-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-4-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler(\\\"bleh,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-Cycler(\\\"linewidth\\\",\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler('c',\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-1\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-os.system(\\\"echo\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-import\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-def\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler(\\\"waka\\\",\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler(c=[1,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler(lw=['a',\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-arg31-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-arg32-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_hatch---_-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_hatch-8-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_hatch-X-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_colorlist-fish-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_color-tab:veryblue-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_color-(0,\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_color_or_linecolor-line-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_color_or_linecolor-marker-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_hist_bins-aardvark-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg45-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg46-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg47-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg48-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg49-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg50-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg51-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg52-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg53-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-abc-TypeError0]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg55-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg56-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg57-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg58-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-abc-TypeError1]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-a-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg61-TypeError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-aardvark-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-dotted-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-\\\\xff\\\\xfed\\\\x00o\\\\x00t\\\\x00t\\\\x00e\\\\x00d\\\\x00-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg65-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-1.23-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg67-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg68-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg69-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg70-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[bold-bold]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[BOLD-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[100-100_0]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[100-100_1]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[weight4-100]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[20.6-20]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[20.6-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[weight7-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[expanded-expanded]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[EXPANDED-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[100-100_0]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[100-100_1]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[stretch4-100]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[20.6-20]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[20.6-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[stretch7-ValueError]\", \"lib/matplotlib/tests/test_rcparams.py::test_keymaps\", \"lib/matplotlib/tests/test_rcparams.py::test_rcparams_reset_after_fail\", \"lib/matplotlib/tests/test_rcparams.py::test_backend_fallback_headless\", \"lib/matplotlib/tests/test_rcparams.py::test_deprecation\"]",
        "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
        "generated_tests": [
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib import get_backend, rc_context\n\nclass TestMatplotlibBackend(unittest.TestCase):\n    def test_get_backend_with_rc_context(self):\n        with rc_context():\n            fig2 = plt.figure()\n        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n        get_backend()\n        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n        self.assertEqual(before, after, '\\n' + before + '\\n' + after)\n\nif __name__ == '__main__':\n    unittest.main()",
            "import matplotlib.pyplot as plt\nfrom matplotlib import get_backend, rc_context\nimport unittest\n\nclass TestMatplotlibBackend(unittest.TestCase):\n    def test_get_backend_with_rc_context(self):\n        with rc_context():\n            fig2 = plt.figure()\n        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n        get_backend()\n        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n        self.assertEqual(before, after, '\\n' + before + '\\n' + after)\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib import get_backend, rc_context\n\nclass TestMatplotlibBackend(unittest.TestCase):\n    def test_get_backend_with_rc_context(self):\n        with rc_context():\n            fig2 = plt.figure()\n        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n        get_backend()\n        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n\n        self.assertEqual(before, after, '\\n' + before + '\\n' + after)\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib import get_backend, rc_context\n\nclass TestMatplotlibBackend(unittest.TestCase):\n    def test_get_backend_with_rc_context(self):\n        with rc_context():\n            fig2 = plt.figure()\n        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n        get_backend()\n        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n        self.assertEqual(before, after, '\\n' + before + '\\n' + after)",
            "import matplotlib.pyplot as plt\nfrom matplotlib import get_backend, rc_context\nimport unittest\n\nclass TestMatplotlibBackend(unittest.TestCase):\n    def test_get_backend_with_rc_context(self):\n        with rc_context():\n            fig2 = plt.figure()\n        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n        get_backend()\n        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n        self.assertEqual(before, after, '\\n' + before + '\\n' + after)\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_backend_bases.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-23563",
        "base_commit": "149a0398b391cfc4eddb5e659f50b3c66f32ea65",
        "patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -171,6 +171,7 @@ def __init__(self, xs, ys, zs, *args, **kwargs):\n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n         ys = self.get_ydata()\n+        zs = cbook._to_unmasked_float_array(zs).ravel()\n         zs = np.broadcast_to(zs, len(xs))\n         self._verts3d = juggle_axes(xs, ys, zs, zdir)\n         self.stale = True\n",
        "test_patch": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1786,6 +1786,13 @@ def test_text_3d(fig_test, fig_ref):\n     assert t3d.get_position_3d() == (0.5, 0.5, 1)\n \n \n+def test_draw_single_lines_from_Nx1():\n+    # Smoke test for GH#23459\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.plot([[0], [1]], [[0], [1]], [[0], [1]])\n+\n+\n @check_figures_equal(extensions=[\"png\"])\n def test_pathpatch_3d(fig_test, fig_ref):\n     ax = fig_ref.add_subplot(projection=\"3d\")\n",
        "problem_statement": "[Bug]: 'Line3D' object has no attribute '_verts3d'\n### Bug summary\n\nI use matplotlib 3D to visualize some lines in 3D. When I first run the following code, the code can run right. But, if I give `x_s_0[n]` a numpy array, it will report the error 'input operand has more dimensions than allowed by the axis remapping'. The point is when next I give  `x_s_0[n]` and other variables an int number, the AttributeError: 'Line3D' object has no attribute '_verts3d' will appear and can not be fixed whatever I change the variables or delete them. The error can be only fixed when I restart the kernel of ipython console. I don't know why it happens, so I come here for help.\n\n### Code for reproduction\n\n```python\nx_s_0 = np.array(['my int number list'])\r\nx_e_0 = np.array(['my int number list'])\r\ny_s_0 = np.array(['my int number list'])\r\ny_e_0 = np.array(['my int number list'])\r\nz_s_0 = np.array(['my int number list'])\r\nz_e_0 = np.array(['my int number list'])\r\n\r\nfig = plt.figure()\r\n        ax = fig.gca(projection='3d')\r\n        ax.view_init(elev=90, azim=0)\r\n        ax.set_zlim3d(-10, 10)\r\n        clr_list = 'r-'\r\n\r\n        for n in range(np.size(z_s_0, axis=0)):\r\n            ax.plot([int(x_s_0[n]), int(x_e_0[n])],\r\n                    [int(y_s_0[n]), int(y_e_0[n])],\r\n                    [int(z_s_0[n]), int(z_e_0[n])], clr_list)\r\n\r\n        plt.xlabel('x')\r\n        plt.ylabel('y')\r\n        # ax.zlabel('z')\r\n        plt.title('90-0')\r\n        plt.show()\n```\n\n\n### Actual outcome\n\nTraceback (most recent call last):\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 3444, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-80-e04907066a16>\", line 20, in <module>\r\n    plt.show()\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 368, in show\r\n    return _backend_mod.show(*args, **kwargs)\r\n  File \"/home/hanyaning/.pycharm_helpers/pycharm_matplotlib_backend/backend_interagg.py\", line 29, in __call__\r\n    manager.show(**kwargs)\r\n  File \"/home/hanyaning/.pycharm_helpers/pycharm_matplotlib_backend/backend_interagg.py\", line 112, in show\r\n    self.canvas.show()\r\n  File \"/home/hanyaning/.pycharm_helpers/pycharm_matplotlib_backend/backend_interagg.py\", line 68, in show\r\n    FigureCanvasAgg.draw(self)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/figure.py\", line 2803, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py\", line 469, in draw\r\n    super().draw(renderer)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/axes/_base.py\", line 3082, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/hanyaning/anaconda3/envs/SBeA/lib/python3.8/site-packages/mpl_toolkits/mplot3d/art3d.py\", line 215, in draw\r\n    xs3d, ys3d, zs3d = self._verts3d\r\nAttributeError: 'Line3D' object has no attribute '_verts3d'\n\n### Expected outcome\n\nSome 3D lines\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nLocal: windows + pycharm, Remote: Ubuntu 20.04\n\n### Matplotlib Version\n\n3.5.0\n\n### Matplotlib Backend\n\nmodule://backend_interagg\n\n### Python version\n\n3.8.12\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n",
        "hints_text": "> x_s_0 = np.array(['my int number list'])\r\n\r\nPlease put some actual numbers in here. This example is not self-contained and cannot be run.\nThank you for your reply, here is the supplement:\n> > x_s_0 = np.array(['my int number list'])\r\n> \r\n> Please put some actual numbers in here. This example is not self-contained and cannot be run.\r\n\r\nThank you for your reply, here is the supplement:\r\n\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n#%% first run\r\nx_s_0 = np.array([93.7112568174671,108.494389857073,97.0666245255382,102.867552131133,101.908561142323,113.386818004841,103.607157682835,113.031077351221,90.5513737918711,99.5387780978244,87.9453402402526,102.478272045554,113.528741284099,109.963775835630,112.682593667100,102.186892980972,104.372143148149,109.904132067927,106.525635862339,110.190258227016,101.528394011013,101.272996794653,95.3105585553521,111.974155293592,97.2781797178892,111.493640918910,93.7583825395479,111.392852395913,107.486196693816,101.704674539529,107.614723702629,107.788312324468,104.905676344832,111.907910023426,107.600092540927,111.284492656058,105.343586373759,103.649750122835,91.0645304376027,115.038706492665,109.041084339790,107.495960673068,108.953913268617,103.364783270580,111.614563199763,111.964554542942,103.019469717046,111.298361732140,103.517531942681,100.007325197993,110.488906551371,113.488814376347,106.911117936350,112.119633819184,112.770694205454,100.515245229647,105.332689130825,113.365180428494,103.543105926575,103.382141782070,94.8531269471578,101.629000968912,107.148271346067,109.179612713936,113.979764917096,99.7810271482609,101.479289423795,110.870505417826,101.591046121142,92.0526355037734,108.389884162009,106.161876474674,112.143054192025,107.422487249273,101.995218239635,112.388419436076,110.872651253076,96.6946951253680,105.787678092911,111.595704476779,111.696691842985,112.787866750303,107.060604655217,107.842528705987,110.059751521752,102.118720180496,101.782288336447,102.873984185333,102.573433616326,87.6486594653360,98.2922295118188,108.190850458588,108.567494745079,102.911942215405,108.115944168772,100.346696274121,102.931687693508,103.579988834872,111.267380082874,106.728145099294,87.7582526489329,113.100076044908,100.671039001576,104.929856632868,114.621818004191,101.020016191046,109.434837383719,101.161898765961,107.592874883104,110.863053554707,111.650705975433,104.943133645576,113.098813202130,101.182130833400,101.784095173094,100.841168053600,107.171594119735,101.858941069534,102.185187776686,109.763958868748,111.267251188514,108.572302254592,102.330009317177,106.525777755464,101.648082618005,103.663538562512,80.5434365767384,107.029267367438,94.3551986444530,103.556338457393,109.894887900578,100.925436956541,108.639405588461,112.509422272465,109.960662172018,98.3005596261035,103.922930399970,92.2027094761718,108.439548438483,113.961517287255,111.091573882928,93.2943262698422,106.860935770613,100.165771065841,109.368631732714,110.031517833934,109.609384098735,110.097319640304,107.564407822454,101.281228555634,99.9204630788031,104.096934096485,107.989950487359,108.471181266604,110.539487279133,81.9835047599881,93.9896387768373,107.522454037838,109.079686307255,78.9960537110125,110.430689750552,101.136265453909,101.653352428203,101.334636845372,99.5891535330051,100.617784999946,104.827447665669,102.801966129642,102.055082323267,100.928702936585,104.484893540773,103.419178883774,101.582282593512,104.549963318703,105.921310374268,107.794208543242,113.230271640248,102.281741167177,105.231021995188,104.195494863853,113.070689815735,100.945935128105,96.3853458810228,109.701811831431,107.064347265837,101.809962040928,103.713433031401,112.810907864512,113.664592242193,107.635829219357,94.8612312572098,106.744985916694,100.387325925074,113.290735529078,114.199955121625,110.927422336136,106.035447960569,101.901106121191,101.277991974756,105.545178243330,114.631704134642,100.135242123379,112.469477140148,81.9528893053689,105.311140653857,108.119717014866,103.476378077476,111.140145692524,106.537652343538,108.801885653328,106.784900614924,102.184181725782,103.057599827474,104.240187884359,104.285377812584,100.102423724247,113.076455000910,106.853554653974,111.516975862421,104.293443021765,110.861797048312,106.132388626520,111.201965293784,104.553697990114,98.1092107690018,101.435274920617,113.882689469349,103.111655672338,102.080260769819,80.3884718672717,105.632572096492,106.720196875754,100.323810011093,111.289777927090,103.914768684272,100.546835551974,115.003158309586,110.778821084732,110.150132835435,110.778631159945,113.746713858050,107.255464319148,94.7705906989029,107.858602606713,102.319697043354,99.9519148573593,106.441471763837,105.873483043953,106.844445037039,113.230271640248,104.322822742354,109.803174088445,104.351014072058,102.956047084315,112.366486984739,95.7700865021076,107.426204445880,106.013436937658,98.3519680437837,101.346512814828,95.0319623555368,107.220565287657,108.296467272604,104.681892449599,113.813051918563,101.555075034087,113.072189158125,101.457813391412,113.793405420001,112.224762618297,98.0065725157598,108.735023416797,111.845052384526,109.681050131359,111.594419446658,105.656877240326,96.4345121239455,106.367494887096,100.603309187262,102.989501847040,110.101029391241,103.469610426468,99.7244644102246,108.502675756158,82.4613322231051,110.534798218605,86.5315477490321,108.253940357010,91.6609195372827,94.3535212194671,113.867191977689,103.679232328016,111.753832988811,109.274134983029,108.730809480685,101.761744729270,111.388016888196,112.516855030769,109.704376773726,115.145669614789,113.703415825736,106.307487648419,91.7268540115999,111.814654818274,96.9803499211703,108.216843210045,105.545899803366,108.877261414759,104.478625193474,104.119794771328,114.483548356419,109.039119010628,99.1890852932071,101.007773661211,110.735679790227,100.366624595147,102.926973101818,81.9223926397135,112.186208665970,105.006027415674,99.8314191868012,104.775272539949,114.924585513652,93.8975396967608,84.9254068708853,99.7405188457181,107.559979485011,105.889965593917,103.969296701005,100.062601477679,106.577001955816,104.600960980378,90.0031665168606,103.927239483683,97.0880174027733,98.2886531927487,104.431377317374,80.9255445294871,107.035477628172,107.910375742415,102.210101846980,106.537652343538,110.185753178913,112.252109563303,111.123501860055,111.775073446610,94.2629395376640,100.421500477437,84.4516958913569,102.226633849693,87.9684754563448,99.9634453973717,108.048647551552,109.430822953345,107.984308187164,108.668130332465,110.159460154136,104.870667273130,101.866875175348,114.199955121625,102.273542660754,104.166682899827,107.886389524442,102.432911501303,109.941601830009,110.613146643730,105.678505685059,112.836044573045,103.567979871375,105.250490223553,108.170237850634,103.590931218449,106.923147644244,106.965463406709,105.962510994295,100.588636926297,104.889479348711,113.167091870994,109.417431342022,111.199865154868,108.138101057649,103.408513330973,110.884144936383,105.577981212450,111.514218239096,105.296618998690,101.596637311270,114.395889560755,108.943798081225,94.3586014647227,111.307543881371,85.5258047661495,106.987183565509,109.998788104034,106.646573091450,78.3485169770689,111.508887373029,104.257305229574,111.595704476779,102.455746038857,100.011077158345,103.939615437792,107.372373933370,107.328264931886,100.304289665909,102.294727410539,112.676330955177,107.971983774778,105.721391473313,111.886567419361,79.4347605246743,113.865845733083,107.986305772924,106.054278664584,111.499558267650,96.4459622563839,108.241349665354,104.183403777393,112.912271088325,87.7582526489329,105.723973263752,113.863037276699,112.166858461573,104.299540189683,108.033088201723,97.6654393593677,105.724116142638,110.651718857709,112.927498361777,104.667429238875,101.010010916108,107.165515482762,102.053009422995,108.794510961220,104.616774516000,103.601420002713,106.387237208604,112.160998761796,109.640741719075,106.843156808321,98.0508259847073,105.855037841969,105.241764661101,109.102641423299,108.637122948404,100.320745506753,112.659077325991,105.732708777644,113.424501608769,107.517478972578,111.378329046336,110.994162161850,107.583918372327,98.8902185241936,113.086086646470,103.930979466431,112.188975256197,101.465251607966,108.718622711782,103.244004374293,104.441004071758,100.570040672206,101.431114979306,104.171900288854,101.234579658263,111.558169453596,99.5263582741235,103.605591606757,87.8748084913069,111.408509507347,113.017080482018,105.568232424155,82.0809536425391,104.597066483479,101.760003079602,101.683558580664,92.4987214079358,111.136362458019,110.857048082597,114.630494811780,111.203934569710,105.455100066584,99.4791257047580,101.759206812465,109.619205940937,109.032858268740,102.969240333046,101.347529148345,107.574833885062,112.754920387291,107.226853469508,111.510955460714,107.703485346648,106.670698272599,104.157654416195,106.941842673027,105.943431186335,88.7560447929532,107.463463207220,106.314797594265])\r\nx_e_0 = np.array([-90.0603386733250,-14.9916664348005,-73.0217990050363,-43.5647189708401,-48.4344701951478,9.85205810528046,-39.8090058484782,8.04560892722081,-106.106208146666,-60.4682160978098,-119.339632888561,-45.5414812089317,10.5727437748929,-7.53013212264324,6.27601060231481,-47.0211025745560,-35.9244136575638,-7.83300286302088,-24.9889889207052,-6.38005572400753,-50.3649568991307,-51.6618626277169,-81.9390928149445,2.67856424777433,-71.9475228450093,0.238514766901758,-89.8210345031326,-0.273288825610081,-20.1112660435519,-49.4698052975211,-19.4586065651753,-18.5771244515905,-33.2151348759370,2.34217111242538,-19.5329035277578,-0.823539017718218,-30.9914300399302,-39.5927216609741,-103.500401384172,18.2403392047510,-12.2155547115427,-20.0616846079883,-12.6582089549359,-41.0397818459483,0.852557476484250,2.62981168619747,-42.7932822643199,-0.753111921927015,-40.2641248881101,-58.0889363743152,-4.86352109528652,10.3699951462058,-23.0315129654893,3.41730343966901,6.72338467518648,-55.5097211107111,-31.0467661825443,9.74218260578816,-40.1342603316839,-40.9516354154120,-84.2619281283439,-49.8540752932321,-21.8272491915956,-11.5121083523286,12.8630394237655,-59.2380766869966,-50.6143097361371,-2.92576404772373,-50.0468098116534,-98.4828090273376,-15.5223458076219,-26.8361571882953,3.53623197043514,-20.4347822696467,-47.9944259083371,4.78219539612066,-2.91486750754908,-74.9104545533864,-28.7363346133016,0.756792979825974,1.26960629711252,6.81058676809435,-22.2724201891087,-18.3018139498646,-7.04276809060565,-47.3672836987299,-49.0756828427992,-43.5320570332654,-45.0582512503760,-120.846176311530,-66.7981832963423,-16.5330379123697,-14.6204401959495,-43.3393063551335,-16.9134116601867,-56.3656118251256,-43.2390389206213,-39.9469691163014,-0.910436574823180,-23.9606480748531,-120.289662698551,8.39598393280433,-54.7186011518751,-33.0923474997853,16.1233816411912,-52.9464968093922,-10.2160788143573,-52.2260178362158,-19.5695547564233,-2.96360456965756,1.03609030225736,-33.0249268987124,8.38957122378481,-52.1232795036046,-49.0665077357568,-53.8546867157153,-21.7088162689180,-48.6864406651847,-47.0297615929978,-8.54480163514626,-0.911091099711996,-14.5960276877909,-46.2943585680070,-24.9882683881577,-49.7571787789635,-39.5227040364311,-156.926460969511,-22.4315507725145,-86.7904054446129,-40.0670656094142,-7.87994469645629,-53.4267696674247,-14.2552773094490,5.39664716629163,-7.54594329017679,-66.7558830195829,-38.2055136428026,-97.7207341805968,-15.2701508715031,12.7703780548914,-1.80317953843449,-92.1775098130307,-23.2863377405814,-57.2843490862772,-10.5522707638126,-7.18613860964398,-9.32973150862806,-6.85199738113356,-19.7141103414825,-51.6200617885192,-58.5300217611495,-37.3219237821799,-17.5532069152816,-15.1095195357863,-4.60667242431627,-149.613802268553,-88.6467165399730,-19.9271514402843,-12.0195341226982,-164.784063066677,-5.15914570528766,-52.3561836607202,-49.7304187103495,-51.3488547726326,-60.2124099014961,-54.9890246935601,-33.6123796994818,-43.8977643433044,-47.6904364048257,-53.4101850378466,-35.3518677536598,-40.7635612067176,-50.0913109591104,-35.0214437617381,-28.0577505876546,-18.5471834834985,9.05711648483575,-46.5394639811929,-31.5630313654421,-36.8214327211007,8.24676081479488,-53.3226800594548,-76.4813283978389,-8.86038396552657,-22.2534152319584,-48.9351559162179,-39.2693401844282,6.92758942551295,11.2625942294016,-19.3514328616409,-84.2207744842966,-23.8751304921970,-56.1592946701350,9.36415179600373,13.9811641304591,-2.63674023430347,-27.4781605215199,-48.4723267534535,-51.6364971292885,-29.9677475808595,16.1735833599049,-57.4393748963876,5.19380599335480,-149.769267386948,-31.1561892358585,-16.8942531674626,-40.4731040003309,-1.55653214340541,-24.9279692920416,-13.4302043900541,-23.6724438633979,-47.0348703142230,-42.5996577630416,-36.5944817967765,-36.3650075776587,-57.6060265554933,8.27603639495359,-23.3238190122604,0.357009487980676,-36.3240524876265,-2.96998510256006,-26.9858963269544,-1.24261253161316,-35.0024791198516,-67.7275515149214,-50.8378151530155,12.3700908079463,-42.3251624656094,-47.5625803849521,-157.713370953500,-29.5239620516954,-24.0010091124130,-56.4818281490529,-0.796700439069596,-38.2469587924189,-55.3493056191992,18.0598257170404,-3.39133661154027,-6.58381225254215,-3.39230104861396,11.6796073651148,-21.2829238350600,-84.6810467652012,-18.2201907660659,-46.3467242405284,-58.3703097941779,-25.4163737726005,-28.3006175207900,-23.3700775993989,9.05711648483575,-36.1748624201735,-8.34566695467896,-36.0317069954170,-43.1153420615371,4.67082252296912,-79.6056123052976,-20.4159063647272,-27.5899323807152,-66.4948313435411,-51.2885486618626,-83.3538028601563,-21.4601409343994,-15.9967162833176,-34.3515083252244,12.0164716893596,-50.2294708035381,8.25437446760793,-50.7233649162273,11.9167068724409,3.95114693159597,-68.2487480279416,-13.7697304773736,2.02298035092325,-8.96581176987750,0.750267603594253,-29.4005406584565,-76.2316624734861,-25.7920279656912,-55.0625327946394,-42.9454589514342,-6.83315928527946,-40.5074700967436,-59.5253019748419,-14.9495906825915,-147.187396910555,-4.63048344914577,-126.518863762854,-16.2126677382325,-100.471940655952,-86.7989233999160,12.2913946263705,-39.4430111772979,1.55976873668861,-11.0321247643596,-13.7911288229037,-49.1800031725725,-0.297843508499014,5.43439067407465,-8.84735920197086,18.7834973793298,11.4597401835328,-26.0967444097675,-100.137125740299,1.86862166851904,-73.4599009946786,-16.4010468564466,-29.9640835027698,-13.0474466678254,-35.3836983884551,-37.2058373949242,15.4212490931509,-12.2255346427481,-62.2439543302707,-53.0086643118486,-3.61040787934623,-56.2644159152080,-43.2629795925569,-149.924129295605,3.75537016337059,-32.7055526631766,-58.9821861789103,-33.8773247149374,17.6608334703322,-89.1143951867934,-134.674838739706,-59.4437776353936,-19.7365974158472,-28.2169192183017,-37.9700658087055,-57.8082437152396,-24.7281521667437,-34.7624779025439,-108.890001821274,-38.1836321382516,-72.9131660863509,-66.8163438258708,-35.6236228561157,-154.986118784416,-22.4000151009942,-17.9572870538180,-46.9032480743782,-24.9279692920416,-6.40293233470499,4.09001457527491,-1.64104943761440,1.66762767027751,-87.2588967062428,-55.9857564720182,-137.080340615576,-46.8192986510895,-119.222152382275,-58.3117577723162,-17.2551435303773,-10.2364640707956,-17.5818584861528,-14.1094132096678,-6.53644817697747,-33.3929107588948,-48.6461513173682,13.9811641304591,-46.5810959539186,-36.9677397236971,-18.0790889432024,-45.7718218153355,-7.64273160718606,-4.23263055623480,-29.2907115292495,7.05523349994155,-40.0079505701134,-31.4641718036523,-16.6377086277235,-39.8914037497433,-22.9704261717361,-22.7555469513103,-27.8485340546960,-55.1370384590656,-33.2973831375060,8.73628994708037,-10.3044666030373,-1.25327702604133,-16.8008990943817,-40.8177208280414,-2.85650264384637,-29.8011742752748,0.343006291162553,-31.2299301248261,-50.0184177774350,14.9761181873480,-12.7095738235913,-86.7731259410846,-0.706485016170547,-131.626021368481,-22.6452520985529,-7.35234000685310,-24.3748703039516,-168.072251214114,0.315936181160950,-36.5075600073246,0.756792979825974,-45.6558681530919,-58.0698839392746,-38.1207871080273,-20.6892574256396,-20.9132427044268,-56.5809523597792,-46.4735199053368,6.24420858393350,-17.6444417877756,-29.0729377208468,2.23379348063503,-162.556312161957,12.2845584033062,-17.5717147561146,-27.3825383050416,0.268563032849940,-76.1735187608642,-16.2766032045948,-36.8828311948890,7.44231134576313,-120.289662698551,-29.0598274025080,12.2702970764794,3.65710992667184,-36.2930911008391,-17.3341538274100,-69.9810204114946,-29.0591018642679,-4.03676105543666,7.51963536068861,-34.4249524336208,-52.9973035431825,-21.7396835556652,-47.7009625815624,-13.4676530379978,-34.6821768513832,-39.8381417581222,-25.6917765603521,3.62735440185796,-9.17049767658733,-23.3766192180905,-68.0240291441343,-28.3942821599720,-31.5084801641374,-11.9029681635169,-14.2668685437161,-56.4973896860605,6.15659474518631,-29.0154685086625,10.0434152488911,-19.9524147956458,-0.347038318782282,-2.29783574846880,-19.6150358712924,-63.7615982198273,8.32494584071945,-38.1646405254197,3.76941889407181,-50.6855936914795,-13.8530131716408,-41.6530964494514,-35.5747382477176,-55.2314701400548,-50.8589393132298,-36.9412458495090,-51.8569446453310,0.566190328464799,-60.5312838975895,-39.8169583746102,-119.697792740727,-0.193782095658378,7.97453289863228,-29.8506785712374,-149.118957352754,-34.7822541374255,-49.1888472604777,-49.5770320261708,-96.2175871396584,-1.57574338842906,-2.99410032561643,16.1674424247351,-1.23261255876321,-30.4251640911401,-60.7711306377347,-49.1928907008345,-9.27985624530763,-12.2573266573022,-43.0483468135016,-51.2833877255799,-19.6611668501000,6.64328530907723,-21.4282095798581,0.326437919605411,-19.0078754011959,-24.2523627602837,-37.0135863163458,-22.8754929133773,-27.9454212197021,-115.222879411074,-20.2267065695564,-26.0596245430043])\r\ny_s_0 = x_s_0.copy()\r\ny_e_0 = x_e_0.copy()\r\nz_s_0 = x_s_0.copy()\r\nz_e_0 = x_e_0.copy()\r\n\r\nfig = plt.figure()\r\nax = fig.gca(projection='3d')\r\nax.view_init(elev=90, azim=0)\r\nax.set_zlim3d(-10, 10)\r\nclr_list = 'r-'\r\n\r\nfor n in range(np.size(z_s_0, axis=0)):\r\nax.plot([int(x_s_0[n]), int(x_e_0[n])],\r\n[int(y_s_0[n]), int(y_e_0[n])],\r\n[int(z_s_0[n]), int(z_e_0[n])], clr_list)\r\n\r\nplt.xlabel('x')\r\nplt.ylabel('y')\r\nplt.title('90-0')\r\nplt.show()\r\n\r\n#%% then run\r\nx_s_0 = np.array([93.7112568174671,108.494389857073,97.0666245255382,102.867552131133,101.908561142323,113.386818004841,103.607157682835,113.031077351221,90.5513737918711,99.5387780978244,87.9453402402526,102.478272045554,113.528741284099,109.963775835630,112.682593667100,102.186892980972,104.372143148149,109.904132067927,106.525635862339,110.190258227016,101.528394011013,101.272996794653,95.3105585553521,111.974155293592,97.2781797178892,111.493640918910,93.7583825395479,111.392852395913,107.486196693816,101.704674539529,107.614723702629,107.788312324468,104.905676344832,111.907910023426,107.600092540927,111.284492656058,105.343586373759,103.649750122835,91.0645304376027,115.038706492665,109.041084339790,107.495960673068,108.953913268617,103.364783270580,111.614563199763,111.964554542942,103.019469717046,111.298361732140,103.517531942681,100.007325197993,110.488906551371,113.488814376347,106.911117936350,112.119633819184,112.770694205454,100.515245229647,105.332689130825,113.365180428494,103.543105926575,103.382141782070,94.8531269471578,101.629000968912,107.148271346067,109.179612713936,113.979764917096,99.7810271482609,101.479289423795,110.870505417826,101.591046121142,92.0526355037734,108.389884162009,106.161876474674,112.143054192025,107.422487249273,101.995218239635,112.388419436076,110.872651253076,96.6946951253680,105.787678092911,111.595704476779,111.696691842985,112.787866750303,107.060604655217,107.842528705987,110.059751521752,102.118720180496,101.782288336447,102.873984185333,102.573433616326,87.6486594653360,98.2922295118188,108.190850458588,108.567494745079,102.911942215405,108.115944168772,100.346696274121,102.931687693508,103.579988834872,111.267380082874,106.728145099294,87.7582526489329,113.100076044908,100.671039001576,104.929856632868,114.621818004191,101.020016191046,109.434837383719,101.161898765961,107.592874883104,110.863053554707,111.650705975433,104.943133645576,113.098813202130,101.182130833400,101.784095173094,100.841168053600,107.171594119735,101.858941069534,102.185187776686,109.763958868748,111.267251188514,108.572302254592,102.330009317177,106.525777755464,101.648082618005,103.663538562512,80.5434365767384,107.029267367438,94.3551986444530,103.556338457393,109.894887900578,100.925436956541,108.639405588461,112.509422272465,109.960662172018,98.3005596261035,103.922930399970,92.2027094761718,108.439548438483,113.961517287255,111.091573882928,93.2943262698422,106.860935770613,100.165771065841,109.368631732714,110.031517833934,109.609384098735,110.097319640304,107.564407822454,101.281228555634,99.9204630788031,104.096934096485,107.989950487359,108.471181266604,110.539487279133,81.9835047599881,93.9896387768373,107.522454037838,109.079686307255,78.9960537110125,110.430689750552,101.136265453909,101.653352428203,101.334636845372,99.5891535330051,100.617784999946,104.827447665669,102.801966129642,102.055082323267,100.928702936585,104.484893540773,103.419178883774,101.582282593512,104.549963318703,105.921310374268,107.794208543242,113.230271640248,102.281741167177,105.231021995188,104.195494863853,113.070689815735,100.945935128105,96.3853458810228,109.701811831431,107.064347265837,101.809962040928,103.713433031401,112.810907864512,113.664592242193,107.635829219357,94.8612312572098,106.744985916694,100.387325925074,113.290735529078,114.199955121625,110.927422336136,106.035447960569,101.901106121191,101.277991974756,105.545178243330,114.631704134642,100.135242123379,112.469477140148,81.9528893053689,105.311140653857,108.119717014866,103.476378077476,111.140145692524,106.537652343538,108.801885653328,106.784900614924,102.184181725782,103.057599827474,104.240187884359,104.285377812584,100.102423724247,113.076455000910,106.853554653974,111.516975862421,104.293443021765,110.861797048312,106.132388626520,111.201965293784,104.553697990114,98.1092107690018,101.435274920617,113.882689469349,103.111655672338,102.080260769819,80.3884718672717,105.632572096492,106.720196875754,100.323810011093,111.289777927090,103.914768684272,100.546835551974,115.003158309586,110.778821084732,110.150132835435,110.778631159945,113.746713858050,107.255464319148,94.7705906989029,107.858602606713,102.319697043354,99.9519148573593,106.441471763837,105.873483043953,106.844445037039,113.230271640248,104.322822742354,109.803174088445,104.351014072058,102.956047084315,112.366486984739,95.7700865021076,107.426204445880,106.013436937658,98.3519680437837,101.346512814828,95.0319623555368,107.220565287657,108.296467272604,104.681892449599,113.813051918563,101.555075034087,113.072189158125,101.457813391412,113.793405420001,112.224762618297,98.0065725157598,108.735023416797,111.845052384526,109.681050131359,111.594419446658,105.656877240326,96.4345121239455,106.367494887096,100.603309187262,102.989501847040,110.101029391241,103.469610426468,99.7244644102246,108.502675756158,82.4613322231051,110.534798218605,86.5315477490321,108.253940357010,91.6609195372827,94.3535212194671,113.867191977689,103.679232328016,111.753832988811,109.274134983029,108.730809480685,101.761744729270,111.388016888196,112.516855030769,109.704376773726,115.145669614789,113.703415825736,106.307487648419,91.7268540115999,111.814654818274,96.9803499211703,108.216843210045,105.545899803366,108.877261414759,104.478625193474,104.119794771328,114.483548356419,109.039119010628,99.1890852932071,101.007773661211,110.735679790227,100.366624595147,102.926973101818,81.9223926397135,112.186208665970,105.006027415674,99.8314191868012,104.775272539949,114.924585513652,93.8975396967608,84.9254068708853,99.7405188457181,107.559979485011,105.889965593917,103.969296701005,100.062601477679,106.577001955816,104.600960980378,90.0031665168606,103.927239483683,97.0880174027733,98.2886531927487,104.431377317374,80.9255445294871,107.035477628172,107.910375742415,102.210101846980,106.537652343538,110.185753178913,112.252109563303,111.123501860055,111.775073446610,94.2629395376640,100.421500477437,84.4516958913569,102.226633849693,87.9684754563448,99.9634453973717,108.048647551552,109.430822953345,107.984308187164,108.668130332465,110.159460154136,104.870667273130,101.866875175348,114.199955121625,102.273542660754,104.166682899827,107.886389524442,102.432911501303,109.941601830009,110.613146643730,105.678505685059,112.836044573045,103.567979871375,105.250490223553,108.170237850634,103.590931218449,106.923147644244,106.965463406709,105.962510994295,100.588636926297,104.889479348711,113.167091870994,109.417431342022,111.199865154868,108.138101057649,103.408513330973,110.884144936383,105.577981212450,111.514218239096,105.296618998690,101.596637311270,114.395889560755,108.943798081225,94.3586014647227,111.307543881371,85.5258047661495,106.987183565509,109.998788104034,106.646573091450,78.3485169770689,111.508887373029,104.257305229574,111.595704476779,102.455746038857,100.011077158345,103.939615437792,107.372373933370,107.328264931886,100.304289665909,102.294727410539,112.676330955177,107.971983774778,105.721391473313,111.886567419361,79.4347605246743,113.865845733083,107.986305772924,106.054278664584,111.499558267650,96.4459622563839,108.241349665354,104.183403777393,112.912271088325,87.7582526489329,105.723973263752,113.863037276699,112.166858461573,104.299540189683,108.033088201723,97.6654393593677,105.724116142638,110.651718857709,112.927498361777,104.667429238875,101.010010916108,107.165515482762,102.053009422995,108.794510961220,104.616774516000,103.601420002713,106.387237208604,112.160998761796,109.640741719075,106.843156808321,98.0508259847073,105.855037841969,105.241764661101,109.102641423299,108.637122948404,100.320745506753,112.659077325991,105.732708777644,113.424501608769,107.517478972578,111.378329046336,110.994162161850,107.583918372327,98.8902185241936,113.086086646470,103.930979466431,112.188975256197,101.465251607966,108.718622711782,103.244004374293,104.441004071758,100.570040672206,101.431114979306,104.171900288854,101.234579658263,111.558169453596,99.5263582741235,103.605591606757,87.8748084913069,111.408509507347,113.017080482018,105.568232424155,82.0809536425391,104.597066483479,101.760003079602,101.683558580664,92.4987214079358,111.136362458019,110.857048082597,114.630494811780,111.203934569710,105.455100066584,99.4791257047580,101.759206812465,109.619205940937,109.032858268740,102.969240333046,101.347529148345,107.574833885062,112.754920387291,107.226853469508,111.510955460714,107.703485346648,106.670698272599,104.157654416195,106.941842673027,105.943431186335,88.7560447929532,107.463463207220,106.314797594265])\r\nx_e_0 = np.array([-90.0603386733250,-14.9916664348005,-73.0217990050363,-43.5647189708401,-48.4344701951478,9.85205810528046,-39.8090058484782,8.04560892722081,-106.106208146666,-60.4682160978098,-119.339632888561,-45.5414812089317,10.5727437748929,-7.53013212264324,6.27601060231481,-47.0211025745560,-35.9244136575638,-7.83300286302088,-24.9889889207052,-6.38005572400753,-50.3649568991307,-51.6618626277169,-81.9390928149445,2.67856424777433,-71.9475228450093,0.238514766901758,-89.8210345031326,-0.273288825610081,-20.1112660435519,-49.4698052975211,-19.4586065651753,-18.5771244515905,-33.2151348759370,2.34217111242538,-19.5329035277578,-0.823539017718218,-30.9914300399302,-39.5927216609741,-103.500401384172,18.2403392047510,-12.2155547115427,-20.0616846079883,-12.6582089549359,-41.0397818459483,0.852557476484250,2.62981168619747,-42.7932822643199,-0.753111921927015,-40.2641248881101,-58.0889363743152,-4.86352109528652,10.3699951462058,-23.0315129654893,3.41730343966901,6.72338467518648,-55.5097211107111,-31.0467661825443,9.74218260578816,-40.1342603316839,-40.9516354154120,-84.2619281283439,-49.8540752932321,-21.8272491915956,-11.5121083523286,12.8630394237655,-59.2380766869966,-50.6143097361371,-2.92576404772373,-50.0468098116534,-98.4828090273376,-15.5223458076219,-26.8361571882953,3.53623197043514,-20.4347822696467,-47.9944259083371,4.78219539612066,-2.91486750754908,-74.9104545533864,-28.7363346133016,0.756792979825974,1.26960629711252,6.81058676809435,-22.2724201891087,-18.3018139498646,-7.04276809060565,-47.3672836987299,-49.0756828427992,-43.5320570332654,-45.0582512503760,-120.846176311530,-66.7981832963423,-16.5330379123697,-14.6204401959495,-43.3393063551335,-16.9134116601867,-56.3656118251256,-43.2390389206213,-39.9469691163014,-0.910436574823180,-23.9606480748531,-120.289662698551,8.39598393280433,-54.7186011518751,-33.0923474997853,16.1233816411912,-52.9464968093922,-10.2160788143573,-52.2260178362158,-19.5695547564233,-2.96360456965756,1.03609030225736,-33.0249268987124,8.38957122378481,-52.1232795036046,-49.0665077357568,-53.8546867157153,-21.7088162689180,-48.6864406651847,-47.0297615929978,-8.54480163514626,-0.911091099711996,-14.5960276877909,-46.2943585680070,-24.9882683881577,-49.7571787789635,-39.5227040364311,-156.926460969511,-22.4315507725145,-86.7904054446129,-40.0670656094142,-7.87994469645629,-53.4267696674247,-14.2552773094490,5.39664716629163,-7.54594329017679,-66.7558830195829,-38.2055136428026,-97.7207341805968,-15.2701508715031,12.7703780548914,-1.80317953843449,-92.1775098130307,-23.2863377405814,-57.2843490862772,-10.5522707638126,-7.18613860964398,-9.32973150862806,-6.85199738113356,-19.7141103414825,-51.6200617885192,-58.5300217611495,-37.3219237821799,-17.5532069152816,-15.1095195357863,-4.60667242431627,-149.613802268553,-88.6467165399730,-19.9271514402843,-12.0195341226982,-164.784063066677,-5.15914570528766,-52.3561836607202,-49.7304187103495,-51.3488547726326,-60.2124099014961,-54.9890246935601,-33.6123796994818,-43.8977643433044,-47.6904364048257,-53.4101850378466,-35.3518677536598,-40.7635612067176,-50.0913109591104,-35.0214437617381,-28.0577505876546,-18.5471834834985,9.05711648483575,-46.5394639811929,-31.5630313654421,-36.8214327211007,8.24676081479488,-53.3226800594548,-76.4813283978389,-8.86038396552657,-22.2534152319584,-48.9351559162179,-39.2693401844282,6.92758942551295,11.2625942294016,-19.3514328616409,-84.2207744842966,-23.8751304921970,-56.1592946701350,9.36415179600373,13.9811641304591,-2.63674023430347,-27.4781605215199,-48.4723267534535,-51.6364971292885,-29.9677475808595,16.1735833599049,-57.4393748963876,5.19380599335480,-149.769267386948,-31.1561892358585,-16.8942531674626,-40.4731040003309,-1.55653214340541,-24.9279692920416,-13.4302043900541,-23.6724438633979,-47.0348703142230,-42.5996577630416,-36.5944817967765,-36.3650075776587,-57.6060265554933,8.27603639495359,-23.3238190122604,0.357009487980676,-36.3240524876265,-2.96998510256006,-26.9858963269544,-1.24261253161316,-35.0024791198516,-67.7275515149214,-50.8378151530155,12.3700908079463,-42.3251624656094,-47.5625803849521,-157.713370953500,-29.5239620516954,-24.0010091124130,-56.4818281490529,-0.796700439069596,-38.2469587924189,-55.3493056191992,18.0598257170404,-3.39133661154027,-6.58381225254215,-3.39230104861396,11.6796073651148,-21.2829238350600,-84.6810467652012,-18.2201907660659,-46.3467242405284,-58.3703097941779,-25.4163737726005,-28.3006175207900,-23.3700775993989,9.05711648483575,-36.1748624201735,-8.34566695467896,-36.0317069954170,-43.1153420615371,4.67082252296912,-79.6056123052976,-20.4159063647272,-27.5899323807152,-66.4948313435411,-51.2885486618626,-83.3538028601563,-21.4601409343994,-15.9967162833176,-34.3515083252244,12.0164716893596,-50.2294708035381,8.25437446760793,-50.7233649162273,11.9167068724409,3.95114693159597,-68.2487480279416,-13.7697304773736,2.02298035092325,-8.96581176987750,0.750267603594253,-29.4005406584565,-76.2316624734861,-25.7920279656912,-55.0625327946394,-42.9454589514342,-6.83315928527946,-40.5074700967436,-59.5253019748419,-14.9495906825915,-147.187396910555,-4.63048344914577,-126.518863762854,-16.2126677382325,-100.471940655952,-86.7989233999160,12.2913946263705,-39.4430111772979,1.55976873668861,-11.0321247643596,-13.7911288229037,-49.1800031725725,-0.297843508499014,5.43439067407465,-8.84735920197086,18.7834973793298,11.4597401835328,-26.0967444097675,-100.137125740299,1.86862166851904,-73.4599009946786,-16.4010468564466,-29.9640835027698,-13.0474466678254,-35.3836983884551,-37.2058373949242,15.4212490931509,-12.2255346427481,-62.2439543302707,-53.0086643118486,-3.61040787934623,-56.2644159152080,-43.2629795925569,-149.924129295605,3.75537016337059,-32.7055526631766,-58.9821861789103,-33.8773247149374,17.6608334703322,-89.1143951867934,-134.674838739706,-59.4437776353936,-19.7365974158472,-28.2169192183017,-37.9700658087055,-57.8082437152396,-24.7281521667437,-34.7624779025439,-108.890001821274,-38.1836321382516,-72.9131660863509,-66.8163438258708,-35.6236228561157,-154.986118784416,-22.4000151009942,-17.9572870538180,-46.9032480743782,-24.9279692920416,-6.40293233470499,4.09001457527491,-1.64104943761440,1.66762767027751,-87.2588967062428,-55.9857564720182,-137.080340615576,-46.8192986510895,-119.222152382275,-58.3117577723162,-17.2551435303773,-10.2364640707956,-17.5818584861528,-14.1094132096678,-6.53644817697747,-33.3929107588948,-48.6461513173682,13.9811641304591,-46.5810959539186,-36.9677397236971,-18.0790889432024,-45.7718218153355,-7.64273160718606,-4.23263055623480,-29.2907115292495,7.05523349994155,-40.0079505701134,-31.4641718036523,-16.6377086277235,-39.8914037497433,-22.9704261717361,-22.7555469513103,-27.8485340546960,-55.1370384590656,-33.2973831375060,8.73628994708037,-10.3044666030373,-1.25327702604133,-16.8008990943817,-40.8177208280414,-2.85650264384637,-29.8011742752748,0.343006291162553,-31.2299301248261,-50.0184177774350,14.9761181873480,-12.7095738235913,-86.7731259410846,-0.706485016170547,-131.626021368481,-22.6452520985529,-7.35234000685310,-24.3748703039516,-168.072251214114,0.315936181160950,-36.5075600073246,0.756792979825974,-45.6558681530919,-58.0698839392746,-38.1207871080273,-20.6892574256396,-20.9132427044268,-56.5809523597792,-46.4735199053368,6.24420858393350,-17.6444417877756,-29.0729377208468,2.23379348063503,-162.556312161957,12.2845584033062,-17.5717147561146,-27.3825383050416,0.268563032849940,-76.1735187608642,-16.2766032045948,-36.8828311948890,7.44231134576313,-120.289662698551,-29.0598274025080,12.2702970764794,3.65710992667184,-36.2930911008391,-17.3341538274100,-69.9810204114946,-29.0591018642679,-4.03676105543666,7.51963536068861,-34.4249524336208,-52.9973035431825,-21.7396835556652,-47.7009625815624,-13.4676530379978,-34.6821768513832,-39.8381417581222,-25.6917765603521,3.62735440185796,-9.17049767658733,-23.3766192180905,-68.0240291441343,-28.3942821599720,-31.5084801641374,-11.9029681635169,-14.2668685437161,-56.4973896860605,6.15659474518631,-29.0154685086625,10.0434152488911,-19.9524147956458,-0.347038318782282,-2.29783574846880,-19.6150358712924,-63.7615982198273,8.32494584071945,-38.1646405254197,3.76941889407181,-50.6855936914795,-13.8530131716408,-41.6530964494514,-35.5747382477176,-55.2314701400548,-50.8589393132298,-36.9412458495090,-51.8569446453310,0.566190328464799,-60.5312838975895,-39.8169583746102,-119.697792740727,-0.193782095658378,7.97453289863228,-29.8506785712374,-149.118957352754,-34.7822541374255,-49.1888472604777,-49.5770320261708,-96.2175871396584,-1.57574338842906,-2.99410032561643,16.1674424247351,-1.23261255876321,-30.4251640911401,-60.7711306377347,-49.1928907008345,-9.27985624530763,-12.2573266573022,-43.0483468135016,-51.2833877255799,-19.6611668501000,6.64328530907723,-21.4282095798581,0.326437919605411,-19.0078754011959,-24.2523627602837,-37.0135863163458,-22.8754929133773,-27.9454212197021,-115.222879411074,-20.2267065695564,-26.0596245430043])\r\ny_s_0 = x_s_0.copy()\r\ny_e_0 = x_e_0.copy()\r\nz_s_0 = x_s_0.copy()\r\nz_e_0 = x_e_0.copy()\r\n\r\nx_s_0 = [x_s_0,x_s_0]\r\nx_e_0 = [x_e_0,x_e_0]\r\ny_s_0 = [y_s_0,y_s_0]\r\ny_e_0 = [y_e_0,y_e_0]\r\nz_s_0 = [z_s_0,z_s_0]\r\nz_e_0 = [z_e_0,z_e_0]\r\n\r\nfig = plt.figure()\r\nax = fig.gca(projection='3d')\r\nax.view_init(elev=90, azim=0)\r\nax.set_zlim3d(-10, 10)\r\nclr_list = 'r-'\r\n\r\nfor n in range(np.size(z_s_0, axis=0)):\r\nax.plot([x_s_0[n], x_e_0[n]],\r\n[y_s_0[n], y_e_0[n]],\r\n[z_s_0[n], z_e_0[n]], clr_list)\r\n\r\nplt.xlabel('x')\r\nplt.ylabel('y')\r\nplt.title('90-0')\r\nplt.show()\r\n#%% then run (the same code as first run, but AttributeError: 'Line3D' object has no attribute '_verts3d')\r\nx_s_0 = np.array([93.7112568174671,108.494389857073,97.0666245255382,102.867552131133,101.908561142323,113.386818004841,103.607157682835,113.031077351221,90.5513737918711,99.5387780978244,87.9453402402526,102.478272045554,113.528741284099,109.963775835630,112.682593667100,102.186892980972,104.372143148149,109.904132067927,106.525635862339,110.190258227016,101.528394011013,101.272996794653,95.3105585553521,111.974155293592,97.2781797178892,111.493640918910,93.7583825395479,111.392852395913,107.486196693816,101.704674539529,107.614723702629,107.788312324468,104.905676344832,111.907910023426,107.600092540927,111.284492656058,105.343586373759,103.649750122835,91.0645304376027,115.038706492665,109.041084339790,107.495960673068,108.953913268617,103.364783270580,111.614563199763,111.964554542942,103.019469717046,111.298361732140,103.517531942681,100.007325197993,110.488906551371,113.488814376347,106.911117936350,112.119633819184,112.770694205454,100.515245229647,105.332689130825,113.365180428494,103.543105926575,103.382141782070,94.8531269471578,101.629000968912,107.148271346067,109.179612713936,113.979764917096,99.7810271482609,101.479289423795,110.870505417826,101.591046121142,92.0526355037734,108.389884162009,106.161876474674,112.143054192025,107.422487249273,101.995218239635,112.388419436076,110.872651253076,96.6946951253680,105.787678092911,111.595704476779,111.696691842985,112.787866750303,107.060604655217,107.842528705987,110.059751521752,102.118720180496,101.782288336447,102.873984185333,102.573433616326,87.6486594653360,98.2922295118188,108.190850458588,108.567494745079,102.911942215405,108.115944168772,100.346696274121,102.931687693508,103.579988834872,111.267380082874,106.728145099294,87.7582526489329,113.100076044908,100.671039001576,104.929856632868,114.621818004191,101.020016191046,109.434837383719,101.161898765961,107.592874883104,110.863053554707,111.650705975433,104.943133645576,113.098813202130,101.182130833400,101.784095173094,100.841168053600,107.171594119735,101.858941069534,102.185187776686,109.763958868748,111.267251188514,108.572302254592,102.330009317177,106.525777755464,101.648082618005,103.663538562512,80.5434365767384,107.029267367438,94.3551986444530,103.556338457393,109.894887900578,100.925436956541,108.639405588461,112.509422272465,109.960662172018,98.3005596261035,103.922930399970,92.2027094761718,108.439548438483,113.961517287255,111.091573882928,93.2943262698422,106.860935770613,100.165771065841,109.368631732714,110.031517833934,109.609384098735,110.097319640304,107.564407822454,101.281228555634,99.9204630788031,104.096934096485,107.989950487359,108.471181266604,110.539487279133,81.9835047599881,93.9896387768373,107.522454037838,109.079686307255,78.9960537110125,110.430689750552,101.136265453909,101.653352428203,101.334636845372,99.5891535330051,100.617784999946,104.827447665669,102.801966129642,102.055082323267,100.928702936585,104.484893540773,103.419178883774,101.582282593512,104.549963318703,105.921310374268,107.794208543242,113.230271640248,102.281741167177,105.231021995188,104.195494863853,113.070689815735,100.945935128105,96.3853458810228,109.701811831431,107.064347265837,101.809962040928,103.713433031401,112.810907864512,113.664592242193,107.635829219357,94.8612312572098,106.744985916694,100.387325925074,113.290735529078,114.199955121625,110.927422336136,106.035447960569,101.901106121191,101.277991974756,105.545178243330,114.631704134642,100.135242123379,112.469477140148,81.9528893053689,105.311140653857,108.119717014866,103.476378077476,111.140145692524,106.537652343538,108.801885653328,106.784900614924,102.184181725782,103.057599827474,104.240187884359,104.285377812584,100.102423724247,113.076455000910,106.853554653974,111.516975862421,104.293443021765,110.861797048312,106.132388626520,111.201965293784,104.553697990114,98.1092107690018,101.435274920617,113.882689469349,103.111655672338,102.080260769819,80.3884718672717,105.632572096492,106.720196875754,100.323810011093,111.289777927090,103.914768684272,100.546835551974,115.003158309586,110.778821084732,110.150132835435,110.778631159945,113.746713858050,107.255464319148,94.7705906989029,107.858602606713,102.319697043354,99.9519148573593,106.441471763837,105.873483043953,106.844445037039,113.230271640248,104.322822742354,109.803174088445,104.351014072058,102.956047084315,112.366486984739,95.7700865021076,107.426204445880,106.013436937658,98.3519680437837,101.346512814828,95.0319623555368,107.220565287657,108.296467272604,104.681892449599,113.813051918563,101.555075034087,113.072189158125,101.457813391412,113.793405420001,112.224762618297,98.0065725157598,108.735023416797,111.845052384526,109.681050131359,111.594419446658,105.656877240326,96.4345121239455,106.367494887096,100.603309187262,102.989501847040,110.101029391241,103.469610426468,99.7244644102246,108.502675756158,82.4613322231051,110.534798218605,86.5315477490321,108.253940357010,91.6609195372827,94.3535212194671,113.867191977689,103.679232328016,111.753832988811,109.274134983029,108.730809480685,101.761744729270,111.388016888196,112.516855030769,109.704376773726,115.145669614789,113.703415825736,106.307487648419,91.7268540115999,111.814654818274,96.9803499211703,108.216843210045,105.545899803366,108.877261414759,104.478625193474,104.119794771328,114.483548356419,109.039119010628,99.1890852932071,101.007773661211,110.735679790227,100.366624595147,102.926973101818,81.9223926397135,112.186208665970,105.006027415674,99.8314191868012,104.775272539949,114.924585513652,93.8975396967608,84.9254068708853,99.7405188457181,107.559979485011,105.889965593917,103.969296701005,100.062601477679,106.577001955816,104.600960980378,90.0031665168606,103.927239483683,97.0880174027733,98.2886531927487,104.431377317374,80.9255445294871,107.035477628172,107.910375742415,102.210101846980,106.537652343538,110.185753178913,112.252109563303,111.123501860055,111.775073446610,94.2629395376640,100.421500477437,84.4516958913569,102.226633849693,87.9684754563448,99.9634453973717,108.048647551552,109.430822953345,107.984308187164,108.668130332465,110.159460154136,104.870667273130,101.866875175348,114.199955121625,102.273542660754,104.166682899827,107.886389524442,102.432911501303,109.941601830009,110.613146643730,105.678505685059,112.836044573045,103.567979871375,105.250490223553,108.170237850634,103.590931218449,106.923147644244,106.965463406709,105.962510994295,100.588636926297,104.889479348711,113.167091870994,109.417431342022,111.199865154868,108.138101057649,103.408513330973,110.884144936383,105.577981212450,111.514218239096,105.296618998690,101.596637311270,114.395889560755,108.943798081225,94.3586014647227,111.307543881371,85.5258047661495,106.987183565509,109.998788104034,106.646573091450,78.3485169770689,111.508887373029,104.257305229574,111.595704476779,102.455746038857,100.011077158345,103.939615437792,107.372373933370,107.328264931886,100.304289665909,102.294727410539,112.676330955177,107.971983774778,105.721391473313,111.886567419361,79.4347605246743,113.865845733083,107.986305772924,106.054278664584,111.499558267650,96.4459622563839,108.241349665354,104.183403777393,112.912271088325,87.7582526489329,105.723973263752,113.863037276699,112.166858461573,104.299540189683,108.033088201723,97.6654393593677,105.724116142638,110.651718857709,112.927498361777,104.667429238875,101.010010916108,107.165515482762,102.053009422995,108.794510961220,104.616774516000,103.601420002713,106.387237208604,112.160998761796,109.640741719075,106.843156808321,98.0508259847073,105.855037841969,105.241764661101,109.102641423299,108.637122948404,100.320745506753,112.659077325991,105.732708777644,113.424501608769,107.517478972578,111.378329046336,110.994162161850,107.583918372327,98.8902185241936,113.086086646470,103.930979466431,112.188975256197,101.465251607966,108.718622711782,103.244004374293,104.441004071758,100.570040672206,101.431114979306,104.171900288854,101.234579658263,111.558169453596,99.5263582741235,103.605591606757,87.8748084913069,111.408509507347,113.017080482018,105.568232424155,82.0809536425391,104.597066483479,101.760003079602,101.683558580664,92.4987214079358,111.136362458019,110.857048082597,114.630494811780,111.203934569710,105.455100066584,99.4791257047580,101.759206812465,109.619205940937,109.032858268740,102.969240333046,101.347529148345,107.574833885062,112.754920387291,107.226853469508,111.510955460714,107.703485346648,106.670698272599,104.157654416195,106.941842673027,105.943431186335,88.7560447929532,107.463463207220,106.314797594265])\r\nx_e_0 = np.array([-90.0603386733250,-14.9916664348005,-73.0217990050363,-43.5647189708401,-48.4344701951478,9.85205810528046,-39.8090058484782,8.04560892722081,-106.106208146666,-60.4682160978098,-119.339632888561,-45.5414812089317,10.5727437748929,-7.53013212264324,6.27601060231481,-47.0211025745560,-35.9244136575638,-7.83300286302088,-24.9889889207052,-6.38005572400753,-50.3649568991307,-51.6618626277169,-81.9390928149445,2.67856424777433,-71.9475228450093,0.238514766901758,-89.8210345031326,-0.273288825610081,-20.1112660435519,-49.4698052975211,-19.4586065651753,-18.5771244515905,-33.2151348759370,2.34217111242538,-19.5329035277578,-0.823539017718218,-30.9914300399302,-39.5927216609741,-103.500401384172,18.2403392047510,-12.2155547115427,-20.0616846079883,-12.6582089549359,-41.0397818459483,0.852557476484250,2.62981168619747,-42.7932822643199,-0.753111921927015,-40.2641248881101,-58.0889363743152,-4.86352109528652,10.3699951462058,-23.0315129654893,3.41730343966901,6.72338467518648,-55.5097211107111,-31.0467661825443,9.74218260578816,-40.1342603316839,-40.9516354154120,-84.2619281283439,-49.8540752932321,-21.8272491915956,-11.5121083523286,12.8630394237655,-59.2380766869966,-50.6143097361371,-2.92576404772373,-50.0468098116534,-98.4828090273376,-15.5223458076219,-26.8361571882953,3.53623197043514,-20.4347822696467,-47.9944259083371,4.78219539612066,-2.91486750754908,-74.9104545533864,-28.7363346133016,0.756792979825974,1.26960629711252,6.81058676809435,-22.2724201891087,-18.3018139498646,-7.04276809060565,-47.3672836987299,-49.0756828427992,-43.5320570332654,-45.0582512503760,-120.846176311530,-66.7981832963423,-16.5330379123697,-14.6204401959495,-43.3393063551335,-16.9134116601867,-56.3656118251256,-43.2390389206213,-39.9469691163014,-0.910436574823180,-23.9606480748531,-120.289662698551,8.39598393280433,-54.7186011518751,-33.0923474997853,16.1233816411912,-52.9464968093922,-10.2160788143573,-52.2260178362158,-19.5695547564233,-2.96360456965756,1.03609030225736,-33.0249268987124,8.38957122378481,-52.1232795036046,-49.0665077357568,-53.8546867157153,-21.7088162689180,-48.6864406651847,-47.0297615929978,-8.54480163514626,-0.911091099711996,-14.5960276877909,-46.2943585680070,-24.9882683881577,-49.7571787789635,-39.5227040364311,-156.926460969511,-22.4315507725145,-86.7904054446129,-40.0670656094142,-7.87994469645629,-53.4267696674247,-14.2552773094490,5.39664716629163,-7.54594329017679,-66.7558830195829,-38.2055136428026,-97.7207341805968,-15.2701508715031,12.7703780548914,-1.80317953843449,-92.1775098130307,-23.2863377405814,-57.2843490862772,-10.5522707638126,-7.18613860964398,-9.32973150862806,-6.85199738113356,-19.7141103414825,-51.6200617885192,-58.5300217611495,-37.3219237821799,-17.5532069152816,-15.1095195357863,-4.60667242431627,-149.613802268553,-88.6467165399730,-19.9271514402843,-12.0195341226982,-164.784063066677,-5.15914570528766,-52.3561836607202,-49.7304187103495,-51.3488547726326,-60.2124099014961,-54.9890246935601,-33.6123796994818,-43.8977643433044,-47.6904364048257,-53.4101850378466,-35.3518677536598,-40.7635612067176,-50.0913109591104,-35.0214437617381,-28.0577505876546,-18.5471834834985,9.05711648483575,-46.5394639811929,-31.5630313654421,-36.8214327211007,8.24676081479488,-53.3226800594548,-76.4813283978389,-8.86038396552657,-22.2534152319584,-48.9351559162179,-39.2693401844282,6.92758942551295,11.2625942294016,-19.3514328616409,-84.2207744842966,-23.8751304921970,-56.1592946701350,9.36415179600373,13.9811641304591,-2.63674023430347,-27.4781605215199,-48.4723267534535,-51.6364971292885,-29.9677475808595,16.1735833599049,-57.4393748963876,5.19380599335480,-149.769267386948,-31.1561892358585,-16.8942531674626,-40.4731040003309,-1.55653214340541,-24.9279692920416,-13.4302043900541,-23.6724438633979,-47.0348703142230,-42.5996577630416,-36.5944817967765,-36.3650075776587,-57.6060265554933,8.27603639495359,-23.3238190122604,0.357009487980676,-36.3240524876265,-2.96998510256006,-26.9858963269544,-1.24261253161316,-35.0024791198516,-67.7275515149214,-50.8378151530155,12.3700908079463,-42.3251624656094,-47.5625803849521,-157.713370953500,-29.5239620516954,-24.0010091124130,-56.4818281490529,-0.796700439069596,-38.2469587924189,-55.3493056191992,18.0598257170404,-3.39133661154027,-6.58381225254215,-3.39230104861396,11.6796073651148,-21.2829238350600,-84.6810467652012,-18.2201907660659,-46.3467242405284,-58.3703097941779,-25.4163737726005,-28.3006175207900,-23.3700775993989,9.05711648483575,-36.1748624201735,-8.34566695467896,-36.0317069954170,-43.1153420615371,4.67082252296912,-79.6056123052976,-20.4159063647272,-27.5899323807152,-66.4948313435411,-51.2885486618626,-83.3538028601563,-21.4601409343994,-15.9967162833176,-34.3515083252244,12.0164716893596,-50.2294708035381,8.25437446760793,-50.7233649162273,11.9167068724409,3.95114693159597,-68.2487480279416,-13.7697304773736,2.02298035092325,-8.96581176987750,0.750267603594253,-29.4005406584565,-76.2316624734861,-25.7920279656912,-55.0625327946394,-42.9454589514342,-6.83315928527946,-40.5074700967436,-59.5253019748419,-14.9495906825915,-147.187396910555,-4.63048344914577,-126.518863762854,-16.2126677382325,-100.471940655952,-86.7989233999160,12.2913946263705,-39.4430111772979,1.55976873668861,-11.0321247643596,-13.7911288229037,-49.1800031725725,-0.297843508499014,5.43439067407465,-8.84735920197086,18.7834973793298,11.4597401835328,-26.0967444097675,-100.137125740299,1.86862166851904,-73.4599009946786,-16.4010468564466,-29.9640835027698,-13.0474466678254,-35.3836983884551,-37.2058373949242,15.4212490931509,-12.2255346427481,-62.2439543302707,-53.0086643118486,-3.61040787934623,-56.2644159152080,-43.2629795925569,-149.924129295605,3.75537016337059,-32.7055526631766,-58.9821861789103,-33.8773247149374,17.6608334703322,-89.1143951867934,-134.674838739706,-59.4437776353936,-19.7365974158472,-28.2169192183017,-37.9700658087055,-57.8082437152396,-24.7281521667437,-34.7624779025439,-108.890001821274,-38.1836321382516,-72.9131660863509,-66.8163438258708,-35.6236228561157,-154.986118784416,-22.4000151009942,-17.9572870538180,-46.9032480743782,-24.9279692920416,-6.40293233470499,4.09001457527491,-1.64104943761440,1.66762767027751,-87.2588967062428,-55.9857564720182,-137.080340615576,-46.8192986510895,-119.222152382275,-58.3117577723162,-17.2551435303773,-10.2364640707956,-17.5818584861528,-14.1094132096678,-6.53644817697747,-33.3929107588948,-48.6461513173682,13.9811641304591,-46.5810959539186,-36.9677397236971,-18.0790889432024,-45.7718218153355,-7.64273160718606,-4.23263055623480,-29.2907115292495,7.05523349994155,-40.0079505701134,-31.4641718036523,-16.6377086277235,-39.8914037497433,-22.9704261717361,-22.7555469513103,-27.8485340546960,-55.1370384590656,-33.2973831375060,8.73628994708037,-10.3044666030373,-1.25327702604133,-16.8008990943817,-40.8177208280414,-2.85650264384637,-29.8011742752748,0.343006291162553,-31.2299301248261,-50.0184177774350,14.9761181873480,-12.7095738235913,-86.7731259410846,-0.706485016170547,-131.626021368481,-22.6452520985529,-7.35234000685310,-24.3748703039516,-168.072251214114,0.315936181160950,-36.5075600073246,0.756792979825974,-45.6558681530919,-58.0698839392746,-38.1207871080273,-20.6892574256396,-20.9132427044268,-56.5809523597792,-46.4735199053368,6.24420858393350,-17.6444417877756,-29.0729377208468,2.23379348063503,-162.556312161957,12.2845584033062,-17.5717147561146,-27.3825383050416,0.268563032849940,-76.1735187608642,-16.2766032045948,-36.8828311948890,7.44231134576313,-120.289662698551,-29.0598274025080,12.2702970764794,3.65710992667184,-36.2930911008391,-17.3341538274100,-69.9810204114946,-29.0591018642679,-4.03676105543666,7.51963536068861,-34.4249524336208,-52.9973035431825,-21.7396835556652,-47.7009625815624,-13.4676530379978,-34.6821768513832,-39.8381417581222,-25.6917765603521,3.62735440185796,-9.17049767658733,-23.3766192180905,-68.0240291441343,-28.3942821599720,-31.5084801641374,-11.9029681635169,-14.2668685437161,-56.4973896860605,6.15659474518631,-29.0154685086625,10.0434152488911,-19.9524147956458,-0.347038318782282,-2.29783574846880,-19.6150358712924,-63.7615982198273,8.32494584071945,-38.1646405254197,3.76941889407181,-50.6855936914795,-13.8530131716408,-41.6530964494514,-35.5747382477176,-55.2314701400548,-50.8589393132298,-36.9412458495090,-51.8569446453310,0.566190328464799,-60.5312838975895,-39.8169583746102,-119.697792740727,-0.193782095658378,7.97453289863228,-29.8506785712374,-149.118957352754,-34.7822541374255,-49.1888472604777,-49.5770320261708,-96.2175871396584,-1.57574338842906,-2.99410032561643,16.1674424247351,-1.23261255876321,-30.4251640911401,-60.7711306377347,-49.1928907008345,-9.27985624530763,-12.2573266573022,-43.0483468135016,-51.2833877255799,-19.6611668501000,6.64328530907723,-21.4282095798581,0.326437919605411,-19.0078754011959,-24.2523627602837,-37.0135863163458,-22.8754929133773,-27.9454212197021,-115.222879411074,-20.2267065695564,-26.0596245430043])\r\ny_s_0 = x_s_0.copy()\r\ny_e_0 = x_e_0.copy()\r\nz_s_0 = x_s_0.copy()\r\nz_e_0 = x_e_0.copy()\r\n\r\nfig = plt.figure()\r\nax = fig.gca(projection='3d')\r\nax.view_init(elev=90, azim=0)\r\nax.set_zlim3d(-10, 10)\r\nclr_list = 'r-'\r\n\r\nfor n in range(np.size(z_s_0, axis=0)):\r\nax.plot([int(x_s_0[n]), int(x_e_0[n])],\r\n[int(y_s_0[n]), int(y_e_0[n])],\r\n[int(z_s_0[n]), int(z_e_0[n])], clr_list)\r\n\r\nplt.xlabel('x')\r\nplt.ylabel('y')\r\nplt.title('90-0')\r\nplt.show()\nThis appears to be a minimum example running with current main (`projection` is no longer allowed to be passed to `gca`)\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nx_s_0 = 100*np.random.rand(100, 1)\r\nx_e_0 = 100*np.random.rand(100, 1)\r\ny_s_0 = 100*np.random.rand(100, 1)\r\ny_e_0 = 100*np.random.rand(100, 1)\r\nz_s_0 = 100*np.random.rand(100, 1)\r\nz_e_0 = 100*np.random.rand(100, 1)\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(projection='3d')\r\n\r\nfor n in range(np.size(z_s_0, axis=0)):\r\n    ax.plot([x_s_0[n], x_e_0[n]],\r\n            [y_s_0[n], y_e_0[n]],\r\n            [z_s_0[n], z_e_0[n]])\r\nplt.show()\r\n\r\n# Doesn't happen with\r\nfor n in range(np.size(z_s_0, axis=0)):\r\n    ax.plot([int(x_s_0[n]), int(x_e_0[n])],\r\n            [int(y_s_0[n]), int(y_e_0[n])],\r\n            [int(z_s_0[n]), int(z_e_0[n])])\r\n# or\r\nfor n in range(np.size(z_s_0, axis=0)):\r\n    ax.plot([float(x_s_0[n]), float(x_e_0[n])],\r\n            [float(y_s_0[n]), float(y_e_0[n])],\r\n            [float(z_s_0[n]), float(z_e_0[n])])\r\n```\r\nso it seems like some parts doesn't like ndarray\r\n```\r\nIn [3]: type(x_e_0[5])\r\nOut[3]: numpy.ndarray\r\n```\nThe reason it is not set is here:\r\nhttps://github.com/matplotlib/matplotlib/blob/11a3e1b81747558d0e36c6d967cc61360e9853c6/lib/mpl_toolkits/mplot3d/art3d.py#L174\r\n\r\nwhich causes a first exception\r\n```\r\n  File \"C:\\Users\\Oscar\\miniconda3\\lib\\site-packages\\numpy\\lib\\stride_tricks.py\", line 348, in _broadcast_to\r\n    it = np.nditer(\r\n\r\nValueError: input operand has more dimensions than allowed by the axis remapping\r\n```\r\nas `zs` is a column vector rather than a row vector/list when there is no `int`/`float` casting involved.\n> The reason it is not set is here:\r\n> \r\n> https://github.com/matplotlib/matplotlib/blob/11a3e1b81747558d0e36c6d967cc61360e9853c6/lib/mpl_toolkits/mplot3d/art3d.py#L174\r\n> \r\n> which causes a first exception\r\n> \r\n> ```\r\n>   File \"C:\\Users\\Oscar\\miniconda3\\lib\\site-packages\\numpy\\lib\\stride_tricks.py\", line 348, in _broadcast_to\r\n>     it = np.nditer(\r\n> \r\n> ValueError: input operand has more dimensions than allowed by the axis remapping\r\n> ```\r\n> \r\n> as `zs` is a column vector rather than a row vector/list when there is no `int`/`float` casting involved.\r\n\r\nThank you for your reply. I  know how the first exception happens, but `AttributeError: 'Line3D' object has no attribute '_verts3d'` still makes me confused. Here is the code to reproduce the error directly. Thanks a lot for your help.\r\n\r\n``` python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# raw code\r\nx_s_0 = 100*np.random.rand(100, 1).flatten()\r\nx_e_0 = 100*np.random.rand(100, 1).flatten()\r\ny_s_0 = 100*np.random.rand(100, 1).flatten()\r\ny_e_0 = 100*np.random.rand(100, 1).flatten()\r\nz_s_0 = 100*np.random.rand(100, 1).flatten()\r\nz_e_0 = 100*np.random.rand(100, 1).flatten()\r\n\r\nfig = plt.figure()\r\nax = fig.gca(projection='3d')\r\nax.view_init(elev=90, azim=0)\r\nax.set_zlim3d(-10, 10)\r\nclr_list = 'r-'\r\n\r\nfor n in range(np.size(z_s_0, axis=0)):\r\n    ax.plot([int(x_s_0[n]), int(x_e_0[n])],\r\n            [int(y_s_0[n]), int(y_e_0[n])],\r\n            [int(z_s_0[n]), int(z_e_0[n])], clr_list)\r\n\r\nplt.xlabel('x')\r\nplt.ylabel('y')\r\nplt.title('90-0')\r\nplt.show()\r\n\r\ntry:\r\n    # first error code: 'ValueError: input operand has more dimensions than allowed by the axis remapping'\r\n    # here using 'try except' to let the error happen and skip to next part of the code\r\n    x_s_0 = 100*np.random.rand(100, 1).flatten()\r\n    x_e_0 = 100*np.random.rand(100, 1).flatten()\r\n    y_s_0 = 100*np.random.rand(100, 1).flatten()\r\n    y_e_0 = 100*np.random.rand(100, 1).flatten()\r\n    z_s_0 = 100*np.random.rand(100, 1).flatten()\r\n    z_e_0 = 100*np.random.rand(100, 1).flatten()\r\n\r\n    x_s_0 = [x_s_0,x_s_0]\r\n    x_e_0 = [x_e_0,x_e_0]\r\n    y_s_0 = [y_s_0,y_s_0]\r\n    y_e_0 = [y_e_0,y_e_0]\r\n    z_s_0 = [z_s_0,z_s_0]\r\n    z_e_0 = [z_e_0,z_e_0]\r\n\r\n    fig = plt.figure()\r\n    ax = fig.gca(projection='3d')\r\n    ax.view_init(elev=90, azim=0)\r\n    ax.set_zlim3d(-10, 10)\r\n    clr_list = 'r-'\r\n\r\n    for n in range(np.size(z_s_0, axis=0)):\r\n        ax.plot([x_s_0[n], x_e_0[n]],\r\n                [y_s_0[n], y_e_0[n]],\r\n                [z_s_0[n], z_e_0[n]], clr_list)\r\n\r\n    plt.xlabel('x')\r\n    plt.ylabel('y')\r\n    plt.title('90-0')\r\n    plt.show()\r\nexcept:\r\n\r\n    # second error code: 'AttributeError: 'Line3D' object has no attribute '_verts3d''\r\n    # the code is same as raw code, why would it get error?\r\n\r\n    x_s_0 = 100*np.random.rand(100, 1).flatten()\r\n    x_e_0 = 100*np.random.rand(100, 1).flatten()\r\n    y_s_0 = 100*np.random.rand(100, 1).flatten()\r\n    y_e_0 = 100*np.random.rand(100, 1).flatten()\r\n    z_s_0 = 100*np.random.rand(100, 1).flatten()\r\n    z_e_0 = 100*np.random.rand(100, 1).flatten()\r\n\r\n    fig = plt.figure()\r\n    ax = fig.gca(projection='3d')\r\n    ax.view_init(elev=90, azim=0)\r\n    ax.set_zlim3d(-10, 10)\r\n    clr_list = 'r-'\r\n\r\n    for n in range(np.size(z_s_0, axis=0)):\r\n        ax.plot([int(x_s_0[n]), int(x_e_0[n])],\r\n                [int(y_s_0[n]), int(y_e_0[n])],\r\n                [int(z_s_0[n]), int(z_e_0[n])], clr_list)\r\n\r\n    plt.xlabel('x')\r\n    plt.ylabel('y')\r\n    plt.title('90-0')\r\n    plt.show()\r\n```\nAs the first exception happens, the next row is not executed:\r\nhttps://github.com/matplotlib/matplotlib/blob/11a3e1b81747558d0e36c6d967cc61360e9853c6/lib/mpl_toolkits/mplot3d/art3d.py#L175\r\nSo `_verts3d` is not set to anything.\nThank you very much for your answer!\nI still think this is a bug though.",
        "created_at": "2022-08-05T15:52:55Z",
        "version": "3.5",
        "FAIL_TO_PASS": "[\"lib/mpl_toolkits/tests/test_mplot3d.py::test_draw_single_lines_from_Nx1\"]",
        "PASS_TO_PASS": "[\"lib/mpl_toolkits/tests/test_mplot3d.py::test_invisible_axes[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_aspects[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_repr\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_colors\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_notshaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_lightsource\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d_extend3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_fill[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-both-levels0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-min-levels1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-max-levels2]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tricontour[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d_1d_input\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsubplots[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tight_layout_text[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_color[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_linewidth[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_linewidth_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-True]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-False]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png--50]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png-130]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_view_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_3d_from_2d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked_strides[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerocstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerorstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerostrideraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsamplesraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_empty[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_modification\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_collection_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_verts_validation\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_closed[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly_collection_2d_to_3d_empty\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_array[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_labelpad[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_cla[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plotsurface_1d_raises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_transform\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_rot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_world\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists_nowarning\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_autoscale\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length_checks\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_isometric[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_simple[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_edge_style[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_named_colors[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_rgb_data[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_xyz[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_calling_conventions\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_line3d_set_get_data_3d\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted_cla\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ax3d_tickcolour\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ticklabel_format[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3D_smoke[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_minor_ticks[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d_errorevery[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_stem3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_equal_box_aspect[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_colorbar_pos\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_shared_axes_retick\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_pan\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scalarmap_update[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_subfigure_simple\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_computed_zorder[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_format_coord\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_get_axis_position\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args4-kwargs4-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args5-kwargs5-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args6-kwargs6-Cannot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args7-kwargs7-Cannot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args8-kwargs8-Cannot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args9-kwargs9-Must\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text_3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_pathpatch_3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter_spiral[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[z-proj_expected0-axis_lines_expected0-tickdirs_expected0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[y-proj_expected1-axis_lines_expected1-tickdirs_expected1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[x-proj_expected2-axis_lines_expected2-tickdirs_expected2]\"]",
        "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
        "generated_tests": [
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport unittest\n\nclass TestMatplotlib3D(unittest.TestCase):\n    def test_3d_line_plot(self):\n        x_s_0 = np.array([1, 2, 3])\n        x_e_0 = np.array([4, 5, 6])\n        y_s_0 = np.array([7, 8, 9])\n        y_e_0 = np.array([10, 11, 12])\n        z_s_0 = np.array([13, 14, 15])\n        z_e_0 = np.array([16, 17, 18])\n\n        fig = plt.figure()\n        ax = fig.gca(projection='3d')\n        ax.view_init(elev=90, azim=0)\n        ax.set_zlim3d(-10, 10)\n        clr_list = 'r-'\n\n        for n in range(np.size(z_s_0, axis=0)):\n            ax.plot([int(x_s_0[n]), int(x_e_0[n])],\n                    [int(y_s_0[n]), int(y_e_0[n])],\n                    [int(z_s_0[n]), int(z_e_0[n])], clr_list)\n\n        plt.xlabel('x')\n        plt.ylabel('y')\n        plt.title('90-0')\n        plt.show()\n\nif __name__ == '__main__':\n    unittest.main()",
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport unittest\n\nclass TestMatplotlib3D(unittest.TestCase):\n    def test_3d_line_plot(self):\n        x_s_0 = np.array([1, 2, 3])\n        x_e_0 = np.array([4, 5, 6])\n        y_s_0 = np.array([7, 8, 9])\n        y_e_0 = np.array([10, 11, 12])\n        z_s_0 = np.array([13, 14, 15])\n        z_e_0 = np.array([16, 17, 18])\n\n        fig = plt.figure()\n        ax = fig.gca(projection='3d')\n        ax.view_init(elev=90, azim=0)\n        ax.set_zlim3d(-10, 10)\n        clr_list = 'r-'\n\n        for n in range(np.size(z_s_0, axis=0)):\n            ax.plot([int(x_s_0[n]), int(x_e_0[n])],\n                    [int(y_s_0[n]), int(y_e_0[n])],\n                    [int(z_s_0[n]), int(z_e_0[n])], clr_list)\n\n        plt.xlabel('x')\n        plt.ylabel('y')\n        plt.title('90-0')\n\n        # Assert that no exception is raised\n        try:\n            plt.show()\n        except AttributeError as e:\n            self.fail(f\"Plotting 3D lines raised an AttributeError: {e}\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport unittest\n\nclass TestMatplotlib3D(unittest.TestCase):\n    def test_line3d_attribute(self):\n        x_s_0 = np.array(['my int number list'])\n        x_e_0 = np.array(['my int number list'])\n        y_s_0 = np.array(['my int number list'])\n        y_e_0 = np.array(['my int number list'])\n        z_s_0 = np.array(['my int number list'])\n        z_e_0 = np.array(['my int number list'])\n\n        fig = plt.figure()\n        ax = fig.gca(projection='3d')\n        ax.view_init(elev=90, azim=0)\n        ax.set_zlim3d(-10, 10)\n        clr_list = 'r-'\n\n        for n in range(np.size(z_s_0, axis=0)):\n            ax.plot([int(x_s_0[n]), int(x_e_0[n])],\n                    [int(y_s_0[n]), int(y_e_0[n])],\n                    [int(z_s_0[n]), int(z_e_0[n])], clr_list)\n\n        plt.xlabel('x')\n        plt.ylabel('y')\n        plt.title('90-0')\n        plt.show()\n\n        self.assertIsNotNone(ax.lines[0]._verts3d, \"'Line3D' object has no attribute '_verts3d'\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport unittest\n\nclass TestMatplotlib3D(unittest.TestCase):\n    def test_3d_line_plot(self):\n        x_s_0 = np.array([1, 2, 3])\n        x_e_0 = np.array([4, 5, 6])\n        y_s_0 = np.array([7, 8, 9])\n        y_e_0 = np.array([10, 11, 12])\n        z_s_0 = np.array([13, 14, 15])\n        z_e_0 = np.array([16, 17, 18])\n\n        fig = plt.figure()\n        ax = fig.gca(projection='3d')\n        ax.view_init(elev=90, azim=0)\n        ax.set_zlim3d(-10, 10)\n        clr_list = 'r-'\n\n        for n in range(np.size(z_s_0, axis=0)):\n            ax.plot([int(x_s_0[n]), int(x_e_0[n])],\n                    [int(y_s_0[n]), int(y_e_0[n])],\n                    [int(z_s_0[n]), int(z_e_0[n])], clr_list)\n\n        plt.xlabel('x')\n        plt.ylabel('y')\n        plt.title('90-0')\n        plt.show()\n\n        self.assertTrue(True)  # If the plot is displayed without any errors, the test will pass\n\nif __name__ == '__main__':\n    unittest.main()",
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport unittest\n\nclass TestMatplotlib3D(unittest.TestCase):\n    def test_3d_line_plot(self):\n        x_s_0 = np.array([1, 2, 3])\n        x_e_0 = np.array([4, 5, 6])\n        y_s_0 = np.array([7, 8, 9])\n        y_e_0 = np.array([10, 11, 12])\n        z_s_0 = np.array([13, 14, 15])\n        z_e_0 = np.array([16, 17, 18])\n\n        fig = plt.figure()\n        ax = fig.gca(projection='3d')\n        ax.view_init(elev=90, azim=0)\n        ax.set_zlim3d(-10, 10)\n        clr_list = 'r-'\n\n        for n in range(np.size(z_s_0, axis=0)):\n            ax.plot([int(x_s_0[n]), int(x_e_0[n])],\n                    [int(y_s_0[n]), int(y_e_0[n])],\n                    [int(z_s_0[n]), int(z_e_0[n])], clr_list)\n\n        plt.xlabel('x')\n        plt.ylabel('y')\n        plt.title('90-0')\n\n        # Assert that no error is raised\n        try:\n            plt.show()\n        except AttributeError as e:\n            self.fail(f\"Plotting 3D lines raised an AttributeError unexpectedly: {e}\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/mpl_toolkits/tests/test_mplot3d.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-22711",
        "base_commit": "f670fe78795b18eb1118707721852209cd77ad51",
        "patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -813,7 +813,10 @@ def _update_val_from_pos(self, pos):\n             val = self._max_in_bounds(pos)\n             self.set_max(val)\n         if self._active_handle:\n-            self._active_handle.set_xdata([val])\n+            if self.orientation == \"vertical\":\n+                self._active_handle.set_ydata([val])\n+            else:\n+                self._active_handle.set_xdata([val])\n \n     def _update(self, event):\n         \"\"\"Update the slider position.\"\"\"\n@@ -836,11 +839,16 @@ def _update(self, event):\n             return\n \n         # determine which handle was grabbed\n-        handle = self._handles[\n-            np.argmin(\n+        if self.orientation == \"vertical\":\n+            handle_index = np.argmin(\n+                np.abs([h.get_ydata()[0] - event.ydata for h in self._handles])\n+            )\n+        else:\n+            handle_index = np.argmin(\n                 np.abs([h.get_xdata()[0] - event.xdata for h in self._handles])\n             )\n-        ]\n+        handle = self._handles[handle_index]\n+\n         # these checks ensure smooth behavior if the handles swap which one\n         # has a higher value. i.e. if one is dragged over and past the other.\n         if handle is not self._active_handle:\n@@ -904,14 +912,22 @@ def set_val(self, val):\n             xy[2] = .75, val[1]\n             xy[3] = .75, val[0]\n             xy[4] = .25, val[0]\n+\n+            self._handles[0].set_ydata([val[0]])\n+            self._handles[1].set_ydata([val[1]])\n         else:\n             xy[0] = val[0], .25\n             xy[1] = val[0], .75\n             xy[2] = val[1], .75\n             xy[3] = val[1], .25\n             xy[4] = val[0], .25\n+\n+            self._handles[0].set_xdata([val[0]])\n+            self._handles[1].set_xdata([val[1]])\n+\n         self.poly.xy = xy\n         self.valtext.set_text(self._format(val))\n+\n         if self.drawon:\n             self.ax.figure.canvas.draw_idle()\n         self.val = val\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1105,19 +1105,30 @@ def test_range_slider(orientation):\n     # Check initial value is set correctly\n     assert_allclose(slider.val, (0.1, 0.34))\n \n+    def handle_positions(slider):\n+        if orientation == \"vertical\":\n+            return [h.get_ydata()[0] for h in slider._handles]\n+        else:\n+            return [h.get_xdata()[0] for h in slider._handles]\n+\n     slider.set_val((0.2, 0.6))\n     assert_allclose(slider.val, (0.2, 0.6))\n+    assert_allclose(handle_positions(slider), (0.2, 0.6))\n+\n     box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n     assert_allclose(box.get_points().flatten()[idx], [0.2, .25, 0.6, .75])\n \n     slider.set_val((0.2, 0.1))\n     assert_allclose(slider.val, (0.1, 0.2))\n+    assert_allclose(handle_positions(slider), (0.1, 0.2))\n \n     slider.set_val((-1, 10))\n     assert_allclose(slider.val, (0, 1))\n+    assert_allclose(handle_positions(slider), (0, 1))\n \n     slider.reset()\n-    assert_allclose(slider.val, [0.1, 0.34])\n+    assert_allclose(slider.val, (0.1, 0.34))\n+    assert_allclose(handle_positions(slider), (0.1, 0.34))\n \n \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n",
        "problem_statement": "[Bug]: cannot give init value for RangeSlider widget\n### Bug summary\r\n\r\nI think `xy[4] = .25, val[0]` should be commented in /matplotlib/widgets. py\", line 915, in set_val\r\nas it prevents to initialized value for RangeSlider\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import RangeSlider\r\n\r\n# generate a fake image\r\nnp.random.seed(19680801)\r\nN = 128\r\nimg = np.random.randn(N, N)\r\n\r\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\r\nfig.subplots_adjust(bottom=0.25)\r\n\r\nim = axs[0].imshow(img)\r\naxs[1].hist(img.flatten(), bins='auto')\r\naxs[1].set_title('Histogram of pixel intensities')\r\n\r\n# Create the RangeSlider\r\nslider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])\r\nslider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\r\n\r\n# Create the Vertical lines on the histogram\r\nlower_limit_line = axs[1].axvline(slider.val[0], color='k')\r\nupper_limit_line = axs[1].axvline(slider.val[1], color='k')\r\n\r\n\r\ndef update(val):\r\n    # The val passed to a callback by the RangeSlider will\r\n    # be a tuple of (min, max)\r\n\r\n    # Update the image's colormap\r\n    im.norm.vmin = val[0]\r\n    im.norm.vmax = val[1]\r\n\r\n    # Update the position of the vertical lines\r\n    lower_limit_line.set_xdata([val[0], val[0]])\r\n    upper_limit_line.set_xdata([val[1], val[1]])\r\n\r\n    # Redraw the figure to ensure it updates\r\n    fig.canvas.draw_idle()\r\n\r\n\r\nslider.on_changed(update)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```python\r\n  File \"<ipython-input-52-b704c53e18d4>\", line 19, in <module>\r\n    slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\r\n\r\n  File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 778, in __init__\r\n    self.set_val(valinit)\r\n\r\n  File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 915, in set_val\r\n    xy[4] = val[0], .25\r\n\r\nIndexError: index 4 is out of bounds for axis 0 with size 4\r\n```\r\n\r\n### Expected outcome\r\n\r\nrange slider with user initial values\r\n\r\n### Additional information\r\n\r\nerror can be removed by commenting this line\r\n```python\r\n\r\n    def set_val(self, val):\r\n        \"\"\"\r\n        Set slider value to *val*.\r\n\r\n        Parameters\r\n        ----------\r\n        val : tuple or array-like of float\r\n        \"\"\"\r\n        val = np.sort(np.asanyarray(val))\r\n        if val.shape != (2,):\r\n            raise ValueError(\r\n                f\"val must have shape (2,) but has shape {val.shape}\"\r\n            )\r\n        val[0] = self._min_in_bounds(val[0])\r\n        val[1] = self._max_in_bounds(val[1])\r\n        xy = self.poly.xy\r\n        if self.orientation == \"vertical\":\r\n            xy[0] = .25, val[0]\r\n            xy[1] = .25, val[1]\r\n            xy[2] = .75, val[1]\r\n            xy[3] = .75, val[0]\r\n            # xy[4] = .25, val[0]\r\n        else:\r\n            xy[0] = val[0], .25\r\n            xy[1] = val[0], .75\r\n            xy[2] = val[1], .75\r\n            xy[3] = val[1], .25\r\n            # xy[4] = val[0], .25\r\n        self.poly.xy = xy\r\n        self.valtext.set_text(self._format(val))\r\n        if self.drawon:\r\n            self.ax.figure.canvas.draw_idle()\r\n        self.val = val\r\n        if self.eventson:\r\n            self._observers.process(\"changed\", val)\r\n\r\n```\r\n\r\n### Operating system\r\n\r\nOSX\r\n\r\n### Matplotlib Version\r\n\r\n3.5.1\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.8\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n",
        "hints_text": "Huh, the polygon object must have changed inadvertently. Usually, you have\nto \"close\" the polygon by repeating the first vertex, but we make it\npossible for polygons to auto-close themselves. I wonder how (when?) this\nbroke?\n\nOn Tue, Mar 22, 2022 at 10:29 PM vpicouet ***@***.***> wrote:\n\n> Bug summary\n>\n> I think xy[4] = .25, val[0] should be commented in /matplotlib/widgets.\n> py\", line 915, in set_val\n> as it prevents to initialized value for RangeSlider\n> Code for reproduction\n>\n> import numpy as npimport matplotlib.pyplot as pltfrom matplotlib.widgets import RangeSlider\n> # generate a fake imagenp.random.seed(19680801)N = 128img = np.random.randn(N, N)\n> fig, axs = plt.subplots(1, 2, figsize=(10, 5))fig.subplots_adjust(bottom=0.25)\n> im = axs[0].imshow(img)axs[1].hist(img.flatten(), bins='auto')axs[1].set_title('Histogram of pixel intensities')\n> # Create the RangeSliderslider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n> # Create the Vertical lines on the histogramlower_limit_line = axs[1].axvline(slider.val[0], color='k')upper_limit_line = axs[1].axvline(slider.val[1], color='k')\n>\n> def update(val):\n>     # The val passed to a callback by the RangeSlider will\n>     # be a tuple of (min, max)\n>\n>     # Update the image's colormap\n>     im.norm.vmin = val[0]\n>     im.norm.vmax = val[1]\n>\n>     # Update the position of the vertical lines\n>     lower_limit_line.set_xdata([val[0], val[0]])\n>     upper_limit_line.set_xdata([val[1], val[1]])\n>\n>     # Redraw the figure to ensure it updates\n>     fig.canvas.draw_idle()\n>\n> slider.on_changed(update)plt.show()\n>\n> Actual outcome\n>\n>   File \"<ipython-input-52-b704c53e18d4>\", line 19, in <module>\n>     slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n>\n>   File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 778, in __init__\n>     self.set_val(valinit)\n>\n>   File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 915, in set_val\n>     xy[4] = val[0], .25\n>\n> IndexError: index 4 is out of bounds for axis 0 with size 4\n>\n> Expected outcome\n>\n> range slider with user initial values\n> Additional information\n>\n> error can be\n>\n>\n>     def set_val(self, val):\n>         \"\"\"\n>         Set slider value to *val*.\n>\n>         Parameters\n>         ----------\n>         val : tuple or array-like of float\n>         \"\"\"\n>         val = np.sort(np.asanyarray(val))\n>         if val.shape != (2,):\n>             raise ValueError(\n>                 f\"val must have shape (2,) but has shape {val.shape}\"\n>             )\n>         val[0] = self._min_in_bounds(val[0])\n>         val[1] = self._max_in_bounds(val[1])\n>         xy = self.poly.xy\n>         if self.orientation == \"vertical\":\n>             xy[0] = .25, val[0]\n>             xy[1] = .25, val[1]\n>             xy[2] = .75, val[1]\n>             xy[3] = .75, val[0]\n>             # xy[4] = .25, val[0]\n>         else:\n>             xy[0] = val[0], .25\n>             xy[1] = val[0], .75\n>             xy[2] = val[1], .75\n>             xy[3] = val[1], .25\n>             # xy[4] = val[0], .25\n>         self.poly.xy = xy\n>         self.valtext.set_text(self._format(val))\n>         if self.drawon:\n>             self.ax.figure.canvas.draw_idle()\n>         self.val = val\n>         if self.eventson:\n>             self._observers.process(\"changed\", val)\n>\n>\n> Operating system\n>\n> OSX\n> Matplotlib Version\n>\n> 3.5.1\n> Matplotlib Backend\n>\n> *No response*\n> Python version\n>\n> 3.8\n> Jupyter version\n>\n> *No response*\n> Installation\n>\n> pip\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/matplotlib/matplotlib/issues/22686>, or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACHF6CW2HVLKT5Q56BVZDLVBJ6X7ANCNFSM5RMUEIDQ>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n\nYes, i might have been too fast, cause it allows to skip the error but then it seems that the polygon is not right...\r\nLet me know if you know how this should be solved...\r\n![Capture d\u2019e\u0301cran, le 2022-03-22 a\u0300 23 20 23](https://user-images.githubusercontent.com/37241971/159617326-44c69bfc-bf0a-4f79-ab23-925c7066f2c2.jpg)\r\n\r\n\nSo I think you found an edge case because your valinit has both values equal. This means that the poly object created by `axhspan` is not as large as the rest of the code expects. \r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/11737d0694109f71d2603ba67d764aa2fb302761/lib/matplotlib/widgets.py#L722\r\n\r\nA quick workaround is to have the valinit contain two different numbers (even if only minuscule difference)\nYes you are right!\r\nThanks a lot for digging into this!!\nCompare:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfig, ax = plt.subplots()\r\npoly_same_valinit = ax.axvspan(0, 0, 0, 1)\r\npoly_diff_valinit = ax.axvspan(0, .5, 0, 1)\r\nprint(poly_same_valinit.xy.shape)\r\nprint(poly_diff_valinit.xy.shape)\r\n```\r\n\r\nwhich gives:\r\n\r\n```\r\n(4, 2)\r\n(5, 2)\r\n```\r\n\nTwo solutions spring to mind:\r\n\r\n1. Easier option\r\nThrow an error in init if `valinit[0] == valinit[1]`\r\n\r\n2. Maybe better option?\r\nDon't use axhspan and manually create the poly to ensure it always has the expected number of vertices\nOption 2 might be better yes\n@vpicouet any interest in opening a PR?\nI don't think I am qualified to do so, never opened a PR yet. \r\nRangeSlider might also contain another issue. \r\nWhen I call `RangeSlider.set_val([0.0,0.1])`\r\nIt changes only the blue poly object and the range value on the right side of the slider not the dot:\r\n![Capture d\u2019e\u0301cran, le 2022-03-25 a\u0300 15 53 44](https://user-images.githubusercontent.com/37241971/160191943-aef5fbe2-2f54-42ae-9719-23375767b212.jpg)\r\n \n> I don't think I am qualified to do so, never opened a PR yet.\r\n\r\nThat's always true until you've opened your first one :). But I also understand that it can be intimidating.\r\n\r\n\r\n>  RangeSlider might also contain another issue.\r\n> When I call RangeSlider.set_val([0.0,0.1])\r\n> It changes only the blue poly object and the range value on the right side of the slider not the dot:\r\n\r\n\r\noh hmm - good catch! may be worth opening a separate issue there as these are two distinct bugs and this one may be a bit more comlicated to fix.\nHaha true! I might try when I have more time!\r\nThrowing an error at least as I have never worked with axhspan and polys.\r\nOk, openning another issue.\nCan I try working on this? @ianhi @vpicouet \r\nFrom the discussion, I could identify that a quick fix would be to use a try-except block to throw an error \r\nif valinit[0] == valinit[1]\r\n\r\nPlease let me know your thoughts.\nSure! ",
        "created_at": "2022-03-27T00:34:37Z",
        "version": "3.5",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[RectangleSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[EllipseSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectange_add_remove_set\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_ellipse\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_handles\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_direction\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_tool_line_handle\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector\", \"lib/matplotlib/tests/test_widgets.py::test_CheckButtons\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[none]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolbar2]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolmanager]\", \"lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_bunch_of_radio_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping\", \"lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical\", \"lib/matplotlib/tests/test_widgets.py::test_slider_reset\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_box\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]\"]",
        "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
        "generated_tests": [
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import RangeSlider\nimport unittest\n\nclass TestRangeSlider(unittest.TestCase):\n    def test_init_value(self):\n        np.random.seed(19680801)\n        N = 128\n        img = np.random.randn(N, N)\n\n        fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n        fig.subplots_adjust(bottom=0.25)\n\n        im = axs[0].imshow(img)\n        axs[1].hist(img.flatten(), bins='auto')\n        axs[1].set_title('Histogram of pixel intensities')\n\n        slider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])\n        \n        try:\n            slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n        except IndexError as e:\n            self.fail(\"RangeSlider initialization raised IndexError unexpectedly!\")\n\n        lower_limit_line = axs[1].axvline(slider.val[0], color='k')\n        upper_limit_line = axs[1].axvline(slider.val[1], color='k')\n\n        def update(val):\n            im.norm.vmin = val[0]\n            im.norm.vmax = val[1]\n\n            lower_limit_line.set_xdata([val[0], val[0]])\n            upper_limit_line.set_xdata([val[1], val[1]])\n\n            fig.canvas.draw_idle()\n\n        slider.on_changed(update)\n        plt.show()\n\nif __name__ == '__main__':\n    unittest.main()",
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import RangeSlider\nimport unittest\n\nclass TestRangeSlider(unittest.TestCase):\n    def test_init_value(self):\n        try:\n            # generate a fake image\n            np.random.seed(19680801)\n            N = 128\n            img = np.random.randn(N, N)\n\n            fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n            fig.subplots_adjust(bottom=0.25)\n\n            im = axs[0].imshow(img)\n            axs[1].hist(img.flatten(), bins='auto')\n            axs[1].set_title('Histogram of pixel intensities')\n\n            # Create the RangeSlider\n            slider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])\n            slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n\n            # Create the Vertical lines on the histogram\n            lower_limit_line = axs[1].axvline(slider.val[0], color='k')\n            upper_limit_line = axs[1].axvline(slider.val[1], color='k')\n\n            def update(val):\n                # The val passed to a callback by the RangeSlider will\n                # be a tuple of (min, max)\n\n                # Update the image's colormap\n                im.norm.vmin = val[0]\n                im.norm.vmax = val[1]\n\n                # Update the position of the vertical lines\n                lower_limit_line.set_xdata([val[0], val[0]])\n                upper_limit_line.set_xdata([val[1], val[1]])\n\n                # Redraw the figure to ensure it updates\n                fig.canvas.draw_idle()\n\n            slider.on_changed(update)\n            plt.show()\n        except IndexError as e:\n            self.fail(\"RangeSlider initialization failed with IndexError: {}\".format(e))\n\nif __name__ == '__main__':\n    unittest.main()",
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import RangeSlider\nimport unittest\n\nclass TestRangeSlider(unittest.TestCase):\n    def test_init_value(self):\n        # generate a fake image\n        np.random.seed(19680801)\n        N = 128\n        img = np.random.randn(N, N)\n\n        fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n        fig.subplots_adjust(bottom=0.25)\n\n        im = axs[0].imshow(img)\n        axs[1].hist(img.flatten(), bins='auto')\n        axs[1].set_title('Histogram of pixel intensities')\n\n        # Create the RangeSlider\n        slider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])\n        try:\n            slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n        except IndexError as e:\n            self.fail(\"RangeSlider initialization raised IndexError unexpectedly!\")\n\n        # Create the Vertical lines on the histogram\n        lower_limit_line = axs[1].axvline(slider.val[0], color='k')\n        upper_limit_line = axs[1].axvline(slider.val[1], color='k')\n\n        def update(val):\n            # The val passed to a callback by the RangeSlider will\n            # be a tuple of (min, max)\n\n            # Update the image's colormap\n            im.norm.vmin = val[0]\n            im.norm.vmax = val[1]\n\n            # Update the position of the vertical lines\n            lower_limit_line.set_xdata([val[0], val[0]])\n            upper_limit_line.set_xdata([val[1], val[1]])\n\n            # Redraw the figure to ensure it updates\n            fig.canvas.draw_idle()\n\n        slider.on_changed(update)\n        plt.show()\n\nif __name__ == '__main__':\n    unittest.main()",
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import RangeSlider\nimport unittest\n\nclass TestRangeSlider(unittest.TestCase):\n    def test_init_value(self):\n        np.random.seed(19680801)\n        N = 128\n        img = np.random.randn(N, N)\n\n        fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n        fig.subplots_adjust(bottom=0.25)\n\n        im = axs[0].imshow(img)\n        axs[1].hist(img.flatten(), bins='auto')\n        axs[1].set_title('Histogram of pixel intensities')\n\n        slider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])\n\n        # Test if RangeSlider can be initialized with user values without raising an error\n        try:\n            slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n        except IndexError as e:\n            self.fail(f\"RangeSlider initialization raised IndexError unexpectedly: {e}\")\n\n        lower_limit_line = axs[1].axvline(slider.val[0], color='k')\n        upper_limit_line = axs[1].axvline(slider.val[1], color='k')\n\n        def update(val):\n            im.norm.vmin = val[0]\n            im.norm.vmax = val[1]\n\n            lower_limit_line.set_xdata([val[0], val[0]])\n            upper_limit_line.set_xdata([val[1], val[1]])\n\n            fig.canvas.draw_idle()\n\n        slider.on_changed(update)\n        plt.show()\n\nif __name__ == '__main__':\n    unittest.main()",
            "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import RangeSlider\nimport unittest\n\nclass TestRangeSlider(unittest.TestCase):\n    def test_init_value(self):\n        np.random.seed(19680801)\n        N = 128\n        img = np.random.randn(N, N)\n\n        fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n        fig.subplots_adjust(bottom=0.25)\n\n        im = axs[0].imshow(img)\n        axs[1].hist(img.flatten(), bins='auto')\n        axs[1].set_title('Histogram of pixel intensities')\n\n        slider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])\n\n        # Test if RangeSlider can be initialized with user values without raising an error\n        try:\n            slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n        except IndexError as e:\n            self.fail(\"RangeSlider initialization raised IndexError unexpectedly!\")\n\n        lower_limit_line = axs[1].axvline(slider.val[0], color='k')\n        upper_limit_line = axs[1].axvline(slider.val[1], color='k')\n\n        def update(val):\n            im.norm.vmin = val[0]\n            im.norm.vmax = val[1]\n\n            lower_limit_line.set_xdata([val[0], val[0]])\n            upper_limit_line.set_xdata([val[1], val[1]])\n\n            fig.canvas.draw_idle()\n\n        slider.on_changed(update)\n        plt.show()\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/tinypages/range6.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-25442",
        "base_commit": "73394f2b11321e03a5df199ec0196f27a728b0b0",
        "patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,16 +1500,23 @@ def __init__(self, ref_artist, use_blit=False):\n             ref_artist.set_picker(True)\n         self.got_artist = False\n         self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n+        callbacks = ref_artist.figure._canvas_callbacks\n+        self._disconnectors = [\n+            functools.partial(\n+                callbacks.disconnect, callbacks._connect_picklable(name, func))\n+            for name, func in [\n+                (\"pick_event\", self.on_pick),\n+                (\"button_release_event\", self.on_release),\n+                (\"motion_notify_event\", self.on_motion),\n+            ]\n         ]\n \n     # A property, not an attribute, to maintain picklability.\n     canvas = property(lambda self: self.ref_artist.figure.canvas)\n \n+    cids = property(lambda self: [\n+        disconnect.args[0] for disconnect in self._disconnectors[:2]])\n+\n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n             dx = evt.x - self.mouse_x\n@@ -1536,16 +1543,12 @@ def on_pick(self, evt):\n                 self.ref_artist.draw(\n                     self.ref_artist.figure._get_renderer())\n                 self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n-\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n@@ -1558,14 +1561,8 @@ def _check_still_parented(self):\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        for disconnector in self._disconnectors:\n+            disconnector()\n \n     def save_offset(self):\n         pass\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -450,3 +450,11 @@ def test_paddedbox():\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n     ax.add_artist(ab)\n+\n+\n+def test_remove_draggable():\n+    fig, ax = plt.subplots()\n+    an = ax.annotate(\"foo\", (.5, .5))\n+    an.draggable(True)\n+    an.remove()\n+    MouseEvent(\"button_release_event\", fig.canvas, 1, 1)._process()\n",
        "problem_statement": "[Bug]: Attribute Error combining matplotlib 3.7.1 and mplcursor on data selection\n### Bug summary\r\n\r\nIf you combine mplcursor and matplotlib 3.7.1, you'll get an `AttributeError: 'NoneType' object has no attribute 'canvas'` after clicking a few data points. Henceforth, selecting a new data point will trigger the same traceback. Otherwise, it works fine. \r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport mplcursors as mpl\r\n\r\nx = np.arange(1, 11)    \r\ny1 = x\r\n\r\nplt.scatter(x,y1)\r\n\r\nmpl.cursor()\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\cbook\\__init__.py\", line 304, in process\r\n    func(*args, **kwargs)\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1550, in on_release\r\n    if self._check_still_parented() and self.got_artist:\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1560, in _check_still_parented\r\n    self.disconnect()\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1568, in disconnect\r\n    self.canvas.mpl_disconnect(cid)\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1517, in <lambda>\r\n    canvas = property(lambda self: self.ref_artist.figure.canvas)\r\nAttributeError: 'NoneType' object has no attribute 'canvas'\r\n```\r\n\r\n### Expected outcome\r\n\r\nNo terminal output\r\n\r\n### Additional information\r\n\r\nUsing matplotlib 3.7.0 or lower works fine. Using a conda install or pip install doesn't affect the output. \r\n\r\n### Operating system\r\n\r\nWindows 11 and Windwos 10 \r\n\r\n### Matplotlib Version\r\n\r\n3.7.1\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.9.16\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n",
        "hints_text": "Can you report to https://github.com/anntzer/mplcursors/issues?  I'll close here but feel free to open an issue if a Matplotlib bug is identified.  ",
        "created_at": "2023-03-12T21:58:08Z",
        "version": "3.7",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_offsetbox.py::test_remove_draggable\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_offsetbox.py::test_offsetbox_clipping[png]\", \"lib/matplotlib/tests/test_offsetbox.py::test_offsetbox_clipping[pdf]\", \"lib/matplotlib/tests/test_offsetbox.py::test_offsetbox_clip_children\", \"lib/matplotlib/tests/test_offsetbox.py::test_offsetbox_loc_codes\", \"lib/matplotlib/tests/test_offsetbox.py::test_expand_with_tight_layout\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_fixed[widths0-None-1-expected0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_fixed[widths1-10-1-expected1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_fixed[widths2-5-1-expected2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_expand[widths0-None-None-expected0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_expand[widths1-10-1-expected1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_expand[widths2-5-1-expected2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_equal[widths0-6-None-expected0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_equal[widths1-2-None-expected1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_equal[widths2-None-1-expected2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_equal_total_none_sep_none\", \"lib/matplotlib/tests/test_offsetbox.py::test_picking[axes\", \"lib/matplotlib/tests/test_offsetbox.py::test_picking[data-draw]\", \"lib/matplotlib/tests/test_offsetbox.py::test_picking[data-image]\", \"lib/matplotlib/tests/test_offsetbox.py::test_picking[data-text]\", \"lib/matplotlib/tests/test_offsetbox.py::test_anchoredtext_horizontal_alignment[png]\", \"lib/matplotlib/tests/test_offsetbox.py::test_annotationbbox_extents\", \"lib/matplotlib/tests/test_offsetbox.py::test_zorder\", \"lib/matplotlib/tests/test_offsetbox.py::test_arrowprops_copied\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[baseline]\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[bottom]\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[top]\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[left]\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[right]\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[center]\", \"lib/matplotlib/tests/test_offsetbox.py::test_paddedbox_default_values\", \"lib/matplotlib/tests/test_offsetbox.py::test_annotationbbox_properties\", \"lib/matplotlib/tests/test_offsetbox.py::test_textarea_properties\", \"lib/matplotlib/tests/test_offsetbox.py::test_textarea_set_text[png]\", \"lib/matplotlib/tests/test_offsetbox.py::test_textarea_set_text[pdf]\", \"lib/matplotlib/tests/test_offsetbox.py::test_paddedbox[png]\"]",
        "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
        "generated_tests": [
            "import numpy as np\nimport matplotlib.pyplot as plt\nimport mplcursors as mpl\nimport unittest\n\nclass TestMatplotlibCursor(unittest.TestCase):\n    def test_cursor_on_data_selection(self):\n        x = np.arange(1, 11)    \n        y1 = x\n\n        plt.scatter(x,y1)\n\n        mpl.cursor()\n        plt.show()\n\n        try:\n            plt.scatter(x,y1)\n            mpl.cursor()\n            plt.show()\n        except AttributeError as e:\n            self.fail(\"AttributeError raised unexpectedly: \" + str(e))",
            "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport mplcursors as mpl\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_mplcursor_with_matplotlib(self):\n        try:\n            x = np.arange(1, 11)    \n            y1 = x\n\n            plt.scatter(x,y1)\n\n            mpl.cursor()\n            plt.show()\n        except AttributeError as e:\n            self.fail(\"mplcursor with matplotlib 3.7.1 raised AttributeError unexpectedly!\")",
            "import numpy as np\nimport matplotlib.pyplot as plt\nimport mplcursors as mpl\nimport unittest\n\nclass TestMatplotlibCursor(unittest.TestCase):\n    def test_cursor_on_data_selection(self):\n        try:\n            x = np.arange(1, 11)    \n            y1 = x\n\n            plt.scatter(x,y1)\n\n            mpl.cursor()\n            plt.show()\n        except AttributeError as e:\n            self.fail(\"AttributeError raised unexpectedly: \" + str(e))",
            "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport mplcursors as mpl\n\nclass TestMatplotlibCursor(unittest.TestCase):\n    def test_cursor_on_data_points(self):\n        try:\n            x = np.arange(1, 11)    \n            y1 = x\n\n            plt.scatter(x,y1)\n\n            mpl.cursor()\n            plt.show()\n        except AttributeError as e:\n            self.fail(f\"Test failed due to AttributeError: {e}\")",
            "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport mplcursors as mpl\n\nclass TestMatplotlibCursor(unittest.TestCase):\n    def test_cursor_on_data_selection(self):\n        try:\n            x = np.arange(1, 11)    \n            y1 = x\n\n            plt.scatter(x,y1)\n\n            mpl.cursor()\n            plt.show()\n        except AttributeError as e:\n            self.fail(\"AttributeError raised unexpectedly: \" + str(e))"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_backend_tools.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-26011",
        "base_commit": "00afcc0c6d4d2e4390338127f05b8f4fdb4e7087",
        "patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1241,11 +1241,13 @@ def _set_lim(self, v0, v1, *, emit=True, auto):\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+                if other is self.axes:\n+                    continue\n+                other._axis_map[name]._set_lim(v0, v1, emit=False, auto=auto)\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n \n         self.stale = True\n         return v0, v1\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8794,3 +8794,12 @@ def test_set_secondary_axis_color():\n     assert mcolors.same_color(sax.xaxis.get_tick_params()[\"color\"], \"red\")\n     assert mcolors.same_color(sax.xaxis.get_tick_params()[\"labelcolor\"], \"red\")\n     assert mcolors.same_color(sax.xaxis.label.get_color(), \"red\")\n+\n+\n+def test_xylim_changed_shared():\n+    fig, axs = plt.subplots(2, sharex=True, sharey=True)\n+    events = []\n+    axs[1].callbacks.connect(\"xlim_changed\", events.append)\n+    axs[1].callbacks.connect(\"ylim_changed\", events.append)\n+    axs[0].set(xlim=[1, 3], ylim=[2, 4])\n+    assert events == [axs[1], axs[1]]\n",
        "problem_statement": "xlim_changed not emitted on shared axis\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nWhen an axis is shared with another its registered \"xlim_changed\" callbacks does not get called when the change is induced by a shared axis (via sharex=). \r\n\r\nIn _base.py the set_xlim for sibling axis are called with emit=False:\r\n\r\n```\r\nmatplotlib/lib/matplotlib/axes/_base.py:\r\n\r\n/.../\r\ndef set_xlim(...)\r\n/.../\r\n        if emit:\r\n            self.callbacks.process('xlim_changed', self)\r\n            # Call all of the other x-axes that are shared with this one\r\n            for other in self._shared_x_axes.get_siblings(self):\r\n                if other is not self:\r\n                    other.set_xlim(self.viewLim.intervalx,\r\n                                   emit=False, auto=auto)\r\n```\r\n\r\nI'm very new to matplotlib, so perhaps there is a good reason for this? emit=False seems to disable both continued \"inheritance\" of axis (why?) and triggering of change callbacks (looking at the code above).\r\n\r\nIt seems like one would at least want to trigger the xlim_changed callbacks as they would be intended to react to any change in axis limits.\r\n\r\nEdit: Setting emit=True seems to introduce a recursion issue (not sure why but as inheritance seems to be passed along anyway it doesn't really matter). Moving the callback call to outside of the \"if emit:\"-statement seems to solve the issue as far as I can see when trying it out. Any reason to keep it inside the if-statement? \r\n\n",
        "hints_text": "I'm also seeing this behavior on matplotlib 3.4.1.  Working from the [resampling data example](https://matplotlib.org/stable/gallery/event_handling/resample.html), I've been developing an adaptive waveform plotter in [this PR](https://github.com/librosa/librosa/issues/1207) (code included there).  The specific quirks that I'm seeing are as follows:\r\n\r\n- Create two axes with shared x axis (eg, `fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)`), and set an axis callback on `ax0` for `xlim_changed`.  If the xlim changes on `ax1`, which does not directly have the callback set, the axes still update appropriately but the callback is never triggered.\r\n- Possibly related: if the callback is set on `ax0` first, and some time later we draw on `ax1`, the callback never triggers even if we directly set the xlims on `ax0`.\r\n\r\nNote: if I create the shared axes, draw on `ax1` first and set the callback on `ax0` last, everything works as expected.  So I don't think there's any fundamental incompatibility here.  It does seem like some data structure is being either ignored or clobbered though.\nA short self-contained example would be very helpful here!  Thanks  \n\"short\" is relative here :)  There is a full setup in the linked PR, but here's something hopefully a little more streamlined:\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n# From https://matplotlib.org/stable/gallery/event_handling/resample.html\r\n# A class that will downsample the data and recompute when zoomed.\r\nclass DataDisplayDownsampler:\r\n    def __init__(self, xdata, ydata):\r\n        self.origYData = ydata\r\n        self.origXData = xdata\r\n        self.max_points = 50\r\n        self.delta = xdata[-1] - xdata[0]\r\n\r\n    def downsample(self, xstart, xend):\r\n        # get the points in the view range\r\n        mask = (self.origXData > xstart) & (self.origXData < xend)\r\n        # dilate the mask by one to catch the points just outside\r\n        # of the view range to not truncate the line\r\n        mask = np.convolve([1, 1, 1], mask, mode='same').astype(bool)\r\n        # sort out how many points to drop\r\n        ratio = max(np.sum(mask) // self.max_points, 1)\r\n\r\n        # mask data\r\n        xdata = self.origXData[mask]\r\n        ydata = self.origYData[mask]\r\n\r\n        # downsample data\r\n        xdata = xdata[::ratio]\r\n        ydata = ydata[::ratio]\r\n\r\n        print(\"using {} of {} visible points\".format(len(ydata), np.sum(mask)))\r\n\r\n        return xdata, ydata\r\n\r\n    def update(self, ax):\r\n        # Update the line\r\n        lims = ax.viewLim\r\n        if abs(lims.width - self.delta) > 1e-8:\r\n            self.delta = lims.width\r\n            xstart, xend = lims.intervalx\r\n            self.line.set_data(*self.downsample(xstart, xend))\r\n            ax.figure.canvas.draw_idle()\r\n\r\n\r\n# Create a signal\r\nxdata = np.linspace(16, 365, (365-16)*4)\r\nydata = np.sin(2*np.pi*xdata/153) + np.cos(2*np.pi*xdata/127)\r\n\r\n\r\n# --- This does not work: ax1 drawn after ax0 kills callbacks\r\nd = DataDisplayDownsampler(xdata, ydata)\r\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\r\n\r\n# Hook up the line\r\nd.line, = ax0.plot(xdata, ydata, 'o-')\r\nax0.set_autoscale_on(False)  # Otherwise, infinite loop\r\n\r\n# Connect for changing the view limits\r\nax0.callbacks.connect('xlim_changed', d.update)\r\nax0.set_xlim(16, 365)\r\n\r\nax1.plot(xdata, -ydata)\r\nplt.show()\r\n\r\n\r\n# --- This does work: ax0 drawn after ax1\r\n# --- Note: only works if axis limits are controlled via ax0, not ax1\r\n# Create a signal\r\nxdata = np.linspace(16, 365, (365-16)*4)\r\nydata = np.sin(2*np.pi*xdata/153) + np.cos(2*np.pi*xdata/127)\r\n\r\nd = DataDisplayDownsampler(xdata, ydata)\r\n\r\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\r\n\r\nax1.plot(xdata, -ydata)\r\n\r\n# Hook up the line\r\nd.line, = ax0.plot(xdata, ydata, 'o-')\r\nax0.set_autoscale_on(False)  # Otherwise, infinite loop\r\n\r\n# Connect for changing the view limits\r\nax0.callbacks.connect('xlim_changed', d.update)\r\nax0.set_xlim(16, 365)\r\n\r\n\r\nplt.show()\r\n\r\n```\r\n\r\nIn neither case does panning/zooming/setting limits on `ax1` do the right thing.\nThats not bad ;-)\nThe problem is that we do \r\n```\r\nother.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)\r\n```\r\nwhich doesn't do the `ax0.callbacks.process('xlim_changed', self)` \r\n\r\nIf we don't do this, it continues to emit to the shared axes and we get an infinite recursion.  \r\n\r\nSomething like \r\n```diff\r\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\r\nindex 9898c7c75..0c1941efb 100644\r\n--- a/lib/matplotlib/axes/_base.py\r\n+++ b/lib/matplotlib/axes/_base.py\r\n@@ -3742,10 +3742,11 @@ class _AxesBase(martist.Artist):\r\n             # Call all of the other x-axes that are shared with this one\r\n             for other in self._shared_x_axes.get_siblings(self):\r\n                 if other is not self:\r\n-                    other.set_xlim(self.viewLim.intervalx,\r\n-                                   emit=False, auto=auto)\r\n-                    if other.figure != self.figure:\r\n-                        other.figure.canvas.draw_idle()\r\n+                    if not np.allclose(other.viewLim.intervalx, self.viewLim.intervalx):\r\n+                        other.set_xlim(self.viewLim.intervalx,\r\n+                                    emit=True, auto=auto)\r\n+                        if other.figure != self.figure:\r\n+                            other.figure.canvas.draw_idle()\r\n```\r\n\r\nFixes the problem (plus we'd need the same for yaxis).  However, I'm not really expert enough on how sharing is supposed to work versus the callbacks to know if this is right or the best.  @anntzer or @efiring last touched this part of the code I think.   \nI think I would prefer something like\r\n```patch\r\ndiff --git i/lib/matplotlib/axes/_base.py w/lib/matplotlib/axes/_base.py\r\nindex 9898c7c75..1116d120f 100644\r\n--- i/lib/matplotlib/axes/_base.py\r\n+++ w/lib/matplotlib/axes/_base.py\r\n@@ -541,6 +541,11 @@ class _process_plot_var_args:\r\n             return [l[0] for l in result]\r\n \r\n \r\n+import dataclasses\r\n+_NoRecursionMarker = dataclasses.make_dataclass(\r\n+    \"_NoRecursionMarker\", [\"event_src\"])\r\n+\r\n+\r\n @cbook._define_aliases({\"facecolor\": [\"fc\"]})\r\n class _AxesBase(martist.Artist):\r\n     name = \"rectilinear\"\r\n@@ -3737,13 +3742,18 @@ class _AxesBase(martist.Artist):\r\n         if auto is not None:\r\n             self._autoscaleXon = bool(auto)\r\n \r\n-        if emit:\r\n+        if emit and emit != _NoRecursionMarker(self):\r\n             self.callbacks.process('xlim_changed', self)\r\n             # Call all of the other x-axes that are shared with this one\r\n             for other in self._shared_x_axes.get_siblings(self):\r\n                 if other is not self:\r\n+                    # Undocumented internal feature: emit can be set to\r\n+                    # _NoRecursionMarker(self) which is treated as True, but\r\n+                    # avoids infinite recursion.\r\n+                    if not isinstance(emit, _NoRecursionMarker):\r\n+                        emit = _NoRecursionMarker(self)\r\n                     other.set_xlim(self.viewLim.intervalx,\r\n-                                   emit=False, auto=auto)\r\n+                                   emit=emit, auto=auto)\r\n                     if other.figure != self.figure:\r\n                         other.figure.canvas.draw_idle()\r\n         self.stale = True\r\n```\r\nto more explicitly block infinite recursion, but other than that the basic idea seems fine to me.\nI'm not sure if this is related, but I'm seeing a similar issue if I try to run the same example code multiple times on one ax.  As far as I can tell from reading https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/cbook/__init__.py , it should support multiple callbacks on the same signal (or am I misunderstanding?), but the above example when run twice only issues the second callback.\r\n\r\nIf you think this is unrelated, I can open a separate issue for it.\nI'm not exactly sure what you mean, but note that CallbackRegistry currently drops duplicate callbacks (connecting a same callback a second time to the same signal results in it being dropped and the original cid is returned).  I actually think that's a pretty unhelpful behavior and would be happy to see it deprecated (that can just go through a normal deprecation cycle), but that would be a separate issue.\nAh, I see.  Thanks @anntzer for the clarification.\nI am :+1: on @anntzer 's solution here.\r\n\r\nMarking this as a good first issue because we have a patch for it.  Will still need to write a test, a simplified version of the initial bug report would probably work (we do not need convolve in the tests / real signals etc).\r\n\r\n------\r\n\r\nalso good to see fellow NYers around!\nHaving the same problem with perhaps a somewhat simpler example. If the registered callbacks were triggered by changes in axes limits from plots with shared x/y-axes, the gray dashed line in the left plot would extend across the whole canvas:\r\n\r\n![tmp](https://user-images.githubusercontent.com/30958850/130777946-5fd58887-d4e3-4287-a6e7-1be4a093fa98.png)\r\n\r\n```py\r\nfrom typing import Any\r\n\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.axes import Axes\r\n\r\n\r\ndef add_identity(ax: Axes = None, **line_kwargs: Any) -> None:\r\n    \"\"\"Add a parity line (y = x) to the provided axis.\"\"\"\r\n    if ax is None:\r\n        ax = plt.gca()\r\n\r\n    # zorder=0 ensures other plotted data displays on top of line\r\n    default_kwargs = dict(alpha=0.5, zorder=0, linestyle=\"dashed\", color=\"black\")\r\n    (identity,) = ax.plot([], [], **default_kwargs, **line_kwargs)\r\n\r\n    def callback(axes: Axes) -> None:\r\n        x_min, x_max = axes.get_xlim()\r\n        y_min, y_max = axes.get_ylim()\r\n        low = max(x_min, y_min)\r\n        high = min(x_max, y_max)\r\n        identity.set_data([low, high], [low, high])\r\n\r\n    callback(ax)\r\n    # Register callbacks to update identity line when moving plots in interactive\r\n    # mode to ensure line always extend to plot edges.\r\n    ax.callbacks.connect(\"xlim_changed\", callback)\r\n    ax.callbacks.connect(\"ylim_changed\", callback)\r\n\r\n\r\nfig, (ax1, ax2) = plt.subplots(1, 2, sharex=True, sharey=True)\r\n\r\nax1.plot([0, 1], [1, 0])\r\nadd_identity(ax1)\r\n\r\nax2.plot([0, 2], [2, 0])\r\nadd_identity(ax2)\r\n\r\nplt.savefig('tmp.png')\r\n```\nWhile not the point of this issue, that identity line can be achieved with [`axline`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.axline.html).\n@QuLogic Damn, that's what I get for not reading the docs closely enough: unnecessary work reinventing a (worse) wheel. Thanks for the pointer!\nNo worries, it's [new-ish](https://matplotlib.org/stable/users/prev_whats_new/whats_new_3.3.0.html#new-axes-axline-method).",
        "created_at": "2023-05-30T13:45:49Z",
        "version": "3.7",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_xylim_changed_shared\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_repr\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_shift\", \"lib/matplotlib/tests/test_axes.py::test_acorr[png]\", \"lib/matplotlib/tests/test_axes.py::test_acorr_integers[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_matshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twin_units[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_units[y]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla\", \"lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_nargs_stem\", \"lib/matplotlib/tests/test_axes.py::test_nargs_legend\", \"lib/matplotlib/tests/test_axes.py::test_nargs_pcolorfast\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_arrow_in_view\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_annotate_signature\", \"lib/matplotlib/tests/test_axes.py::test_fill_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_single_date[png]\", \"lib/matplotlib/tests/test_axes.py::test_shaped_data[png]\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_mincnt_behavior_upon_C_parameter[png]\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-3-1]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-4-0.5]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_with_read_only\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_samesizepcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[png]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_axes.py::test_markevery[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_nan_bar_values\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_bar_datetime_start\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_regression\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels_length\", \"lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_float16\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]\", \"lib/matplotlib/tests/test_axes.py::test_stairs[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_update[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_empty\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2\", \"lib/matplotlib/tests/test_axes.py::test_stairs_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_singular_plural_arguments\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error\", \"lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_log_scales\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_no_data\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_invalid\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_errorbar_polar_caps[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid\", \"lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png]\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_markerfmt\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_alpha\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_args\", \"lib/matplotlib/tests/test_axes.py::test_vlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_default\", \"lib/matplotlib/tests/test_axes.py::test_hlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_hlines_default\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_hlines_blended_transform[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_fs_none\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd[png]\", \"lib/matplotlib/tests/test_axes.py::test_spectrum[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases\", \"lib/matplotlib/tests/test_axes.py::test_twin_remove[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]\", \"lib/matplotlib/tests/test_axes.py::test_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_shared_aspect_error\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-The\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_method_errors\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_default[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_shadow[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values\", \"lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie\", \"lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_kwargs_raise_error_without_labels\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]\", \"lib/matplotlib/tests/test_axes.py::test_xticks_bad_args\", \"lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc\", \"lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_set_xy_bound\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_bad_plot_args\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_shared_bool\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks_log\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates\", \"lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing\", \"lib/matplotlib/tests/test_axes.py::test_pandas_index_shape\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist\", \"lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center\", \"lib/matplotlib/tests/test_axes.py::test_axis_get_tick_params\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titletwiny\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[left\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[center\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[both\", \"lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_offset_text_visible\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args0-kwargs0-lineoffsets\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args1-kwargs1-linelengths\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args2-kwargs2-linewidths\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args3-kwargs3-linestyles\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args4-kwargs4-alpha\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args5-kwargs5-positions\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args6-kwargs6-lineoffsets\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args7-kwargs7-linelengths\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args8-kwargs8-linewidths\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args9-kwargs9-linestyles\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args10-kwargs10-alpha\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args11-kwargs11-colors\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_inset\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_inset_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_inset_projection\", \"lib/matplotlib/tests/test_axes.py::test_inset_subclass\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_limits_after_scroll_zoom\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan\", \"lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_secondary_minorloc\", \"lib/matplotlib/tests/test_axes.py::test_secondary_formatter\", \"lib/matplotlib/tests/test_axes.py::test_secondary_repr\", \"lib/matplotlib/tests/test_axes.py::test_axis_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_normal_axes\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\", \"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\", \"lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position\", \"lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init\", \"lib/matplotlib/tests/test_axes.py::test_set_aspect_negative\", \"lib/matplotlib/tests/test_axes.py::test_redraw_in_frame\", \"lib/matplotlib/tests/test_axes.py::test_invisible_axes_events\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]\", \"lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_xaxis_offsetText_color\", \"lib/matplotlib/tests/test_axes.py::test_yaxis_offsetText_color\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]\", \"lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions\", \"lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_retick\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_center\", \"lib/matplotlib/tests/test_axes.py::test_centered_bar_label_label_beyond_limits\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_labels\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted\", \"lib/matplotlib/tests/test_axes.py::test_nan_barlabels\", \"lib/matplotlib/tests/test_axes.py::test_patch_bounds\", \"lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_artist_sublists\", \"lib/matplotlib/tests/test_axes.py::test_empty_line_plots\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format\", \"lib/matplotlib/tests/test_axes.py::test_automatic_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_errors\", \"lib/matplotlib/tests/test_axes.py::test_clim\", \"lib/matplotlib/tests/test_axes.py::test_bezier_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_small_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_get_xticklabel\", \"lib/matplotlib/tests/test_axes.py::test_bar_leading_nan\", \"lib/matplotlib/tests/test_axes.py::test_bar_all_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_extent_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_cla_clears_children_axes_and_fig\", \"lib/matplotlib/tests/test_axes.py::test_scatter_color_repr_error\", \"lib/matplotlib/tests/test_axes.py::test_zorder_and_explicit_rasterization\", \"lib/matplotlib/tests/test_axes.py::test_preset_clip_paths[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_axes_label_formatting\", \"lib/matplotlib/tests/test_axes.py::test_ecdf[png]\", \"lib/matplotlib/tests/test_axes.py::test_ecdf_invalid\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_axes_limits\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_labelfont\", \"lib/matplotlib/tests/test_axes.py::test_set_secondary_axis_color\"]",
        "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
        "generated_tests": [
            "import matplotlib.pyplot as plt\nimport unittest\n\nclass TestSharedAxis(unittest.TestCase):\n    def test_xlim_changed_emission(self):\n        fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\n        xlim_changed_called = False\n\n        def on_xlim_changed(event_ax):\n            nonlocal xlim_changed_called\n            xlim_changed_called = True\n\n        ax2.callbacks.connect('xlim_changed', on_xlim_changed)\n        ax1.set_xlim([0, 1])\n\n        self.assertTrue(xlim_changed_called, \"xlim_changed event not emitted on shared axis\")",
            "import matplotlib.pyplot as plt\nimport unittest\n\nclass TestXlimChanged(unittest.TestCase):\n    def test_xlim_changed_emission(self):\n        fig, ax1 = plt.subplots()\n        ax2 = ax1.twinx()\n        ax1.set_xlim(0, 10)\n        ax2.set_xlim(0, 20)\n\n        def on_xlim_changed(event_ax):\n            self.assertEqual(event_ax.get_xlim(), ax1.get_xlim())\n\n        ax2.callbacks.connect('xlim_changed', on_xlim_changed)\n        ax1.set_xlim(0, 30)\n\nif __name__ == '__main__':\n    unittest.main()",
            "import matplotlib.pyplot as plt\nimport unittest\n\nclass TestXlimChanged(unittest.TestCase):\n    def test_xlim_changed_emission(self):\n        fig, ax1 = plt.subplots()\n        ax2 = ax1.twinx()\n        self.changed = False\n\n        def on_xlim_changed(event_ax):\n            self.assertEqual(event_ax, ax1)\n            self.changed = True\n\n        ax2.callbacks.connect('xlim_changed', on_xlim_changed)\n        ax1.set_xlim(0, 1)\n        self.assertTrue(self.changed, \"xlim_changed event not emitted on shared axis\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import matplotlib.pyplot as plt\nimport unittest\n\nclass TestSharedAxis(unittest.TestCase):\n    def test_xlim_changed_emission(self):\n        fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\n        xlim_changed_called = False\n\n        def on_xlim_changed(event_ax):\n            nonlocal xlim_changed_called\n            xlim_changed_called = True\n\n        ax2.callbacks.connect('xlim_changed', on_xlim_changed)\n        ax1.set_xlim([0, 10])\n\n        self.assertTrue(xlim_changed_called, \"xlim_changed not emitted on shared axis\")",
            "import matplotlib.pyplot as plt\nimport unittest\n\nclass TestXlimChanged(unittest.TestCase):\n    def test_xlim_changed_emission_on_shared_axis(self):\n        fig, ax = plt.subplots(2, 1, sharex=True)\n        ax1, ax2 = ax[0], ax[1]\n\n        self.callback_triggered = False\n\n        def callback(event_ax):\n            self.assertEqual(event_ax, ax2)\n            self.callback_triggered = True\n\n        ax2.callbacks.connect('xlim_changed', callback)\n        ax1.set_xlim([0, 1])\n\n        self.assertTrue(self.callback_triggered, \"xlim_changed callback not triggered on shared axis\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_axes.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-22835",
        "base_commit": "c33557d120eefe3148ebfcf2e758ff2357966000",
        "patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -12,6 +12,7 @@\n \n import matplotlib as mpl\n from . import _api, cbook\n+from .colors import BoundaryNorm\n from .cm import ScalarMappable\n from .path import Path\n from .transforms import (Bbox, IdentityTransform, Transform, TransformedBbox,\n@@ -1303,10 +1304,20 @@ def format_cursor_data(self, data):\n                 return \"[]\"\n             normed = self.norm(data)\n             if np.isfinite(normed):\n-                # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n+                if isinstance(self.norm, BoundaryNorm):\n+                    # not an invertible normalization mapping\n+                    cur_idx = np.argmin(np.abs(self.norm.boundaries - data))\n+                    neigh_idx = max(0, cur_idx - 1)\n+                    # use max diff to prevent delta == 0\n+                    delta = np.diff(\n+                        self.norm.boundaries[neigh_idx:cur_idx + 2]\n+                    ).max()\n+\n+                else:\n+                    # Midpoints of neighboring color intervals.\n+                    neighbors = self.norm.inverse(\n+                        (int(normed * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n                 g_sig_digits = cbook._g_sig_digits(data, delta)\n             else:\n                 g_sig_digits = 3  # Consistent with default below.\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_artist.py b/lib/matplotlib/tests/test_artist.py\n--- a/lib/matplotlib/tests/test_artist.py\n+++ b/lib/matplotlib/tests/test_artist.py\n@@ -5,6 +5,8 @@\n \n import pytest\n \n+from matplotlib import cm\n+import matplotlib.colors as mcolors\n import matplotlib.pyplot as plt\n import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n@@ -372,3 +374,164 @@ class MyArtist4(MyArtist3):\n         pass\n \n     assert MyArtist4.set is MyArtist3.set\n+\n+\n+def test_format_cursor_data_BoundaryNorm():\n+    \"\"\"Test if cursor data is correct when using BoundaryNorm.\"\"\"\n+    X = np.empty((3, 3))\n+    X[0, 0] = 0.9\n+    X[0, 1] = 0.99\n+    X[0, 2] = 0.999\n+    X[1, 0] = -1\n+    X[1, 1] = 0\n+    X[1, 2] = 1\n+    X[2, 0] = 0.09\n+    X[2, 1] = 0.009\n+    X[2, 2] = 0.0009\n+\n+    # map range -1..1 to 0..256 in 0.1 steps\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"-1..1 to 0..256 in 0.1\")\n+    norm = mcolors.BoundaryNorm(np.linspace(-1, 1, 20), 256)\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+\n+    labels_list = [\n+        \"[0.9]\",\n+        \"[1.]\",\n+        \"[1.]\",\n+        \"[-1.0]\",\n+        \"[0.0]\",\n+        \"[1.0]\",\n+        \"[0.09]\",\n+        \"[0.009]\",\n+        \"[0.0009]\",\n+    ]\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.1))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    # map range -1..1 to 0..256 in 0.01 steps\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"-1..1 to 0..256 in 0.01\")\n+    cmap = cm.get_cmap('RdBu_r', 200)\n+    norm = mcolors.BoundaryNorm(np.linspace(-1, 1, 200), 200)\n+    img = ax.imshow(X, cmap=cmap, norm=norm)\n+\n+    labels_list = [\n+        \"[0.90]\",\n+        \"[0.99]\",\n+        \"[1.0]\",\n+        \"[-1.00]\",\n+        \"[0.00]\",\n+        \"[1.00]\",\n+        \"[0.09]\",\n+        \"[0.009]\",\n+        \"[0.0009]\",\n+    ]\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.01))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    # map range -1..1 to 0..256 in 0.01 steps\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"-1..1 to 0..256 in 0.001\")\n+    cmap = cm.get_cmap('RdBu_r', 2000)\n+    norm = mcolors.BoundaryNorm(np.linspace(-1, 1, 2000), 2000)\n+    img = ax.imshow(X, cmap=cmap, norm=norm)\n+\n+    labels_list = [\n+        \"[0.900]\",\n+        \"[0.990]\",\n+        \"[0.999]\",\n+        \"[-1.000]\",\n+        \"[0.000]\",\n+        \"[1.000]\",\n+        \"[0.090]\",\n+        \"[0.009]\",\n+        \"[0.0009]\",\n+    ]\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.001))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    # different testing data set with\n+    # out of bounds values for 0..1 range\n+    X = np.empty((7, 1))\n+    X[0] = -1.0\n+    X[1] = 0.0\n+    X[2] = 0.1\n+    X[3] = 0.5\n+    X[4] = 0.9\n+    X[5] = 1.0\n+    X[6] = 2.0\n+\n+    labels_list = [\n+        \"[-1.0]\",\n+        \"[0.0]\",\n+        \"[0.1]\",\n+        \"[0.5]\",\n+        \"[0.9]\",\n+        \"[1.0]\",\n+        \"[2.0]\",\n+    ]\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"noclip, neither\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=False, extend='neither')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"noclip, min\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=False, extend='min')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"noclip, max\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=False, extend='max')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"noclip, both\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=False, extend='both')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    fig.suptitle(\"clip, neither\")\n+    norm = mcolors.BoundaryNorm(\n+        np.linspace(0, 1, 4, endpoint=True), 256, clip=True, extend='neither')\n+    img = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    for v, label in zip(X.flat, labels_list):\n+        # label = \"[{:-#.{}g}]\".format(v, cbook._g_sig_digits(v, 0.33))\n+        assert img.format_cursor_data(v) == label\n+\n+    plt.close()\n",
        "problem_statement": "[Bug]: scalar mappable format_cursor_data crashes on BoundarNorm\n### Bug summary\r\n\r\nIn 3.5.0 if you do:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport matplotlib as mpl\r\n\r\nfig, ax = plt.subplots()\r\nnorm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\r\nX = np.random.randn(10, 10)\r\npc = ax.imshow(X, cmap='RdBu_r', norm=norm)\r\n```\r\n\r\nand mouse over the image, it crashes with\r\n\r\n```\r\nFile \"/Users/jklymak/matplotlib/lib/matplotlib/artist.py\", line 1282, in format_cursor_data\r\n    neighbors = self.norm.inverse(\r\n  File \"/Users/jklymak/matplotlib/lib/matplotlib/colors.py\", line 1829, in inverse\r\n    raise ValueError(\"BoundaryNorm is not invertible\")\r\nValueError: BoundaryNorm is not invertible\r\n```\r\n\r\nand interaction stops.  \r\n\r\nNot sure if we should have a special check here, a try-except, or actually just make BoundaryNorm approximately invertible.  \r\n\r\n\r\n### Matplotlib Version\r\n\r\nmain 3.5.0\r\n\r\n\n[Bug]: scalar mappable format_cursor_data crashes on BoundarNorm\n### Bug summary\r\n\r\nIn 3.5.0 if you do:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport matplotlib as mpl\r\n\r\nfig, ax = plt.subplots()\r\nnorm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\r\nX = np.random.randn(10, 10)\r\npc = ax.imshow(X, cmap='RdBu_r', norm=norm)\r\n```\r\n\r\nand mouse over the image, it crashes with\r\n\r\n```\r\nFile \"/Users/jklymak/matplotlib/lib/matplotlib/artist.py\", line 1282, in format_cursor_data\r\n    neighbors = self.norm.inverse(\r\n  File \"/Users/jklymak/matplotlib/lib/matplotlib/colors.py\", line 1829, in inverse\r\n    raise ValueError(\"BoundaryNorm is not invertible\")\r\nValueError: BoundaryNorm is not invertible\r\n```\r\n\r\nand interaction stops.  \r\n\r\nNot sure if we should have a special check here, a try-except, or actually just make BoundaryNorm approximately invertible.  \r\n\r\n\r\n### Matplotlib Version\r\n\r\nmain 3.5.0\r\n\r\n\n",
        "hints_text": "I think the correct fix is to specifically check for BoundaryNorm there and implement special logic to determine the positions of the neighboring intervals (on the BoundaryNorm) for that case.\nI tried returning the passed in `value` instead of the exception at https://github.com/matplotlib/matplotlib/blob/b2bb7be4ba343fcec6b1dbbffd7106e6af240221/lib/matplotlib/colors.py#L1829\r\n\r\n```python\r\nreturn value\r\n```\r\nand it seems to work. At least the error is gone and the values displayed in the plot (bottom right) when hovering with the mouse seem also right. But the numbers are rounded to only 1 digit in sci notation. So 19, 20 or 21 become 2.e+01.\r\nHope this helps.\r\n\nMaybe a more constructive suggestion for a change in https://github.com/matplotlib/matplotlib/blob/b2bb7be4ba343fcec6b1dbbffd7106e6af240221/lib/matplotlib/artist.py#L1280 that tries to fix the error:\r\n```python\r\nends = self.norm(np.array([self.norm.vmin, self.norm.vmax]))\r\nif np.isfinite(normed) and np.allclose(ends, 0.5, rtol=0.0, atol=0.5):\r\n```\r\nThis way, because `BoundaryNorm` doesn't map to 0...1 range but to the indices of the colors, the call to `BoundaryNorm.inverse()` is skipped and the default value for `g_sig_digits=3` is used.\r\nBut I'm not sure if there can be a case where `BoundaryNorm` actually maps its endpoints to 0...1, in which case all breaks down.\nhey, I just ran into this while plotting data... (interactivity doesn't stop but it plots a lot of issues)  any updates?\n@raphaelquast no, this still needs someone to work on it.\r\n\r\nLabeled as a good first issue as there in no API design here (just returning an empty string is better than the current state).\nI can give a PR, that is based on my [last comment](https://github.com/matplotlib/matplotlib/issues/21915#issuecomment-992454625) a try. But my concerns/questions from then are still valid.\nAs this is all internal code, I think we should just do an `isinstance(norm, BoundaryNorm)` check and then act accordingly.  There is already a bunch of instances of this in the colorbar code as precedence. \nAfter thinking about my suggestion again, I now understand why you prefer an `isinstace` check.\r\n(In my initial suggestion one would have to check if `ends` maps to (0,1) and if `normed` is in [0, 1] for the correct way to implement my idea. But these conditions are taylored to catch `BoundaryNorm` anyway, so why not do it directly.)\r\n\r\nHowever, I suggest using a try block after https://github.com/matplotlib/matplotlib/blob/c33557d120eefe3148ebfcf2e758ff2357966000/lib/matplotlib/artist.py#L1305\r\n```python\r\n# Midpoints of neighboring color intervals.\r\ntry:\r\n    neighbors = self.norm.inverse(\r\n        (int(normed * n) + np.array([0, 1])) / n)\r\nexcept ValueError:\r\n    # non-invertible ScalarMappable\r\n```\r\nbecause `BoundaryNorm` raises a `ValueError` anyway and I assume this to be the case for all non-invertible `ScalarMappables`.\r\n(And the issue is the exception raised from `inverse`).\r\n\r\nThe question is:\r\nWhat to put in the `except`? So what is \"acting accordingly\" in this case?\r\nIf `BoundaryNorm` isn't invertible, how can we reliably get the data values of the midpoints of neighboring colors?\r\n\r\nI think it should be enough to get the boundaries themselves, instead of the midpoints (though both is possible) with something like:\r\n```python\r\ncur_idx = np.argmin(np.abs(self.norm.boundaries - data))\r\ncur_bound = self.norm.boundaries[cur_idx]\r\nneigh_idx = cur_idx + 1 if data > cur_bound else cur_idx - 1\r\nneighbors = self.norm.boundaries[\r\n    np.array([cur_idx, neigh_idx])\r\n]\r\n```\r\nProblems with this code are:\r\n- `boundaries` property is specific to `BoundaryNorm`, isn't it? So we gained nothing by using `try .. except`\r\n- more checks are needed to cover all cases for `clip` and `extend` options of `BoundaryNorm` such that `neigh_idx` is always in bounds\r\n- for very coarse boundaries compared to data (ie: `boundaries = [0,1,2,3,4,5]; data = random(n)*5) the displayed values are always rounded to one significant digit. While in principle, this is expected (I believe), it results in inconsistency. In my example 0.111111 would be given as 0.1 and 0.001 as 0.001 and 1.234 would be just 1.\n> boundaries property is specific to BoundaryNorm, isn't it? So we gained nothing by using try .. except\r\n\r\nThis is one argument in favor of doing the `isinstance` check because then you can assert we _have_ a BoundaryNorm and can trust that you can access its state etc.   One on hand, duck typeing is in general a Good Thing in Python and we should err on the side of being forgiving on input, but sometimes the complexity of it is more trouble than it is worth if you really only have 1 case that you are trying catch!  \r\n\r\n>  I assume this to be the case for all non-invertible ScalarMappables.\r\n\r\nHowever we only (at this point) are talking about a way to recover in the case of BoundaryNorm.  Let everything else continue to fail and we will deal with those issues if/when they get reported.\nI think the correct fix is to specifically check for BoundaryNorm there and implement special logic to determine the positions of the neighboring intervals (on the BoundaryNorm) for that case.\nI tried returning the passed in `value` instead of the exception at https://github.com/matplotlib/matplotlib/blob/b2bb7be4ba343fcec6b1dbbffd7106e6af240221/lib/matplotlib/colors.py#L1829\r\n\r\n```python\r\nreturn value\r\n```\r\nand it seems to work. At least the error is gone and the values displayed in the plot (bottom right) when hovering with the mouse seem also right. But the numbers are rounded to only 1 digit in sci notation. So 19, 20 or 21 become 2.e+01.\r\nHope this helps.\r\n\nMaybe a more constructive suggestion for a change in https://github.com/matplotlib/matplotlib/blob/b2bb7be4ba343fcec6b1dbbffd7106e6af240221/lib/matplotlib/artist.py#L1280 that tries to fix the error:\r\n```python\r\nends = self.norm(np.array([self.norm.vmin, self.norm.vmax]))\r\nif np.isfinite(normed) and np.allclose(ends, 0.5, rtol=0.0, atol=0.5):\r\n```\r\nThis way, because `BoundaryNorm` doesn't map to 0...1 range but to the indices of the colors, the call to `BoundaryNorm.inverse()` is skipped and the default value for `g_sig_digits=3` is used.\r\nBut I'm not sure if there can be a case where `BoundaryNorm` actually maps its endpoints to 0...1, in which case all breaks down.\nhey, I just ran into this while plotting data... (interactivity doesn't stop but it plots a lot of issues)  any updates?\n@raphaelquast no, this still needs someone to work on it.\r\n\r\nLabeled as a good first issue as there in no API design here (just returning an empty string is better than the current state).\nI can give a PR, that is based on my [last comment](https://github.com/matplotlib/matplotlib/issues/21915#issuecomment-992454625) a try. But my concerns/questions from then are still valid.\nAs this is all internal code, I think we should just do an `isinstance(norm, BoundaryNorm)` check and then act accordingly.  There is already a bunch of instances of this in the colorbar code as precedence. \nAfter thinking about my suggestion again, I now understand why you prefer an `isinstace` check.\r\n(In my initial suggestion one would have to check if `ends` maps to (0,1) and if `normed` is in [0, 1] for the correct way to implement my idea. But these conditions are taylored to catch `BoundaryNorm` anyway, so why not do it directly.)\r\n\r\nHowever, I suggest using a try block after https://github.com/matplotlib/matplotlib/blob/c33557d120eefe3148ebfcf2e758ff2357966000/lib/matplotlib/artist.py#L1305\r\n```python\r\n# Midpoints of neighboring color intervals.\r\ntry:\r\n    neighbors = self.norm.inverse(\r\n        (int(normed * n) + np.array([0, 1])) / n)\r\nexcept ValueError:\r\n    # non-invertible ScalarMappable\r\n```\r\nbecause `BoundaryNorm` raises a `ValueError` anyway and I assume this to be the case for all non-invertible `ScalarMappables`.\r\n(And the issue is the exception raised from `inverse`).\r\n\r\nThe question is:\r\nWhat to put in the `except`? So what is \"acting accordingly\" in this case?\r\nIf `BoundaryNorm` isn't invertible, how can we reliably get the data values of the midpoints of neighboring colors?\r\n\r\nI think it should be enough to get the boundaries themselves, instead of the midpoints (though both is possible) with something like:\r\n```python\r\ncur_idx = np.argmin(np.abs(self.norm.boundaries - data))\r\ncur_bound = self.norm.boundaries[cur_idx]\r\nneigh_idx = cur_idx + 1 if data > cur_bound else cur_idx - 1\r\nneighbors = self.norm.boundaries[\r\n    np.array([cur_idx, neigh_idx])\r\n]\r\n```\r\nProblems with this code are:\r\n- `boundaries` property is specific to `BoundaryNorm`, isn't it? So we gained nothing by using `try .. except`\r\n- more checks are needed to cover all cases for `clip` and `extend` options of `BoundaryNorm` such that `neigh_idx` is always in bounds\r\n- for very coarse boundaries compared to data (ie: `boundaries = [0,1,2,3,4,5]; data = random(n)*5) the displayed values are always rounded to one significant digit. While in principle, this is expected (I believe), it results in inconsistency. In my example 0.111111 would be given as 0.1 and 0.001 as 0.001 and 1.234 would be just 1.\n> boundaries property is specific to BoundaryNorm, isn't it? So we gained nothing by using try .. except\r\n\r\nThis is one argument in favor of doing the `isinstance` check because then you can assert we _have_ a BoundaryNorm and can trust that you can access its state etc.   One on hand, duck typeing is in general a Good Thing in Python and we should err on the side of being forgiving on input, but sometimes the complexity of it is more trouble than it is worth if you really only have 1 case that you are trying catch!  \r\n\r\n>  I assume this to be the case for all non-invertible ScalarMappables.\r\n\r\nHowever we only (at this point) are talking about a way to recover in the case of BoundaryNorm.  Let everything else continue to fail and we will deal with those issues if/when they get reported.",
        "created_at": "2022-04-12T23:13:58Z",
        "version": "3.5",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_artist.py::test_format_cursor_data_BoundaryNorm\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_artist.py::test_patch_transform_of_none\", \"lib/matplotlib/tests/test_artist.py::test_collection_transform_of_none\", \"lib/matplotlib/tests/test_artist.py::test_clipping[png]\", \"lib/matplotlib/tests/test_artist.py::test_clipping[pdf]\", \"lib/matplotlib/tests/test_artist.py::test_clipping_zoom[png]\", \"lib/matplotlib/tests/test_artist.py::test_cull_markers\", \"lib/matplotlib/tests/test_artist.py::test_hatching[png]\", \"lib/matplotlib/tests/test_artist.py::test_hatching[pdf]\", \"lib/matplotlib/tests/test_artist.py::test_remove\", \"lib/matplotlib/tests/test_artist.py::test_default_edges[png]\", \"lib/matplotlib/tests/test_artist.py::test_properties\", \"lib/matplotlib/tests/test_artist.py::test_setp\", \"lib/matplotlib/tests/test_artist.py::test_None_zorder\", \"lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[-unknown]\", \"lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[ACCEPTS:\", \"lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[..\", \"lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[arg\", \"lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_valid_values[*arg\", \"lib/matplotlib/tests/test_artist.py::test_artist_inspector_get_aliases\", \"lib/matplotlib/tests/test_artist.py::test_set_alpha\", \"lib/matplotlib/tests/test_artist.py::test_set_alpha_for_array\", \"lib/matplotlib/tests/test_artist.py::test_callbacks\", \"lib/matplotlib/tests/test_artist.py::test_set_signature\", \"lib/matplotlib/tests/test_artist.py::test_set_is_overwritten\"]",
        "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
        "generated_tests": [
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\nclass TestBoundaryNorm(unittest.TestCase):\n    def test_boundary_norm_invertibility(self):\n        fig, ax = plt.subplots()\n        norm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\n        X = np.random.randn(10, 10)\n        pc = ax.imshow(X, cmap='RdBu_r', norm=norm)\n        try:\n            pc.format_cursor_data(pc.get_cursor_data())\n        except ValueError as e:\n            self.fail(\"format_cursor_data() raised ValueError unexpectedly!\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\nclass TestBoundaryNorm(unittest.TestCase):\n    def test_boundary_norm_invertibility(self):\n        fig, ax = plt.subplots()\n        norm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\n        X = np.random.randn(10, 10)\n        pc = ax.imshow(X, cmap='RdBu_r', norm=norm)\n        try:\n            pc.format_cursor_data(pc.norm(pc.get_array()[0,0]))\n            interaction_continues = True\n        except ValueError:\n            interaction_continues = False\n        self.assertTrue(interaction_continues, \"BoundaryNorm is not invertible, interaction stopped.\")\n        \nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\nclass TestBoundaryNorm(unittest.TestCase):\n    def test_boundary_norm_invertibility(self):\n        fig, ax = plt.subplots()\n        norm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\n        X = np.random.randn(10, 10)\n        pc = ax.imshow(X, cmap='RdBu_r', norm=norm)\n        try:\n            pc.format_cursor_data(pc.norm(pc.get_array()[0, 0]))\n            interaction_continues = True\n        except ValueError:\n            interaction_continues = False\n        self.assertTrue(interaction_continues, \"BoundaryNorm is not invertible, interaction stopped.\")\n        \nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\nclass TestBoundaryNorm(unittest.TestCase):\n    def test_boundary_norm_invertibility(self):\n        fig, ax = plt.subplots()\n        norm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\n        X = np.random.randn(10, 10)\n        pc = ax.imshow(X, cmap='RdBu_r', norm=norm)\n        try:\n            pc.format_cursor_data(pc.norm(pc.get_array()[0, 0]))\n            interaction_continues = True\n        except ValueError:\n            interaction_continues = False\n        self.assertTrue(interaction_continues, \"BoundaryNorm is not invertible and interaction stops.\")\n        \nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\nclass TestBoundaryNorm(unittest.TestCase):\n    def test_boundary_norm_invertibility(self):\n        fig, ax = plt.subplots()\n        norm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\n        X = np.random.randn(10, 10)\n        pc = ax.imshow(X, cmap='RdBu_r', norm=norm)\n        try:\n            pc.format_cursor_data(pc.norm(pc.get_array()[0, 0]))\n            interaction_continues = True\n        except ValueError:\n            interaction_continues = False\n        self.assertTrue(interaction_continues, \"BoundaryNorm is not invertible, interaction stops.\")\n        \nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_contour.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-23562",
        "base_commit": "29a86636a9c45ab5ac4d80ac76eaee497f460dce",
        "patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -867,9 +867,19 @@ def set_alpha(self, alpha):\n         self.stale = True\n \n     def get_facecolor(self):\n+        # docstring inherited\n+        # self._facecolors2d is not initialized until do_3d_projection\n+        if not hasattr(self, '_facecolors2d'):\n+            self.axes.M = self.axes.get_proj()\n+            self.do_3d_projection()\n         return self._facecolors2d\n \n     def get_edgecolor(self):\n+        # docstring inherited\n+        # self._edgecolors2d is not initialized until do_3d_projection\n+        if not hasattr(self, '_edgecolors2d'):\n+            self.axes.M = self.axes.get_proj()\n+            self.do_3d_projection()\n         return self._edgecolors2d\n \n \n",
        "test_patch": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1812,6 +1812,28 @@ def test_scatter_spiral():\n     fig.canvas.draw()\n \n \n+def test_Poly3DCollection_get_facecolor():\n+    # Smoke test to see that get_facecolor does not raise\n+    # See GH#4067\n+    y, x = np.ogrid[1:10:100j, 1:10:100j]\n+    z2 = np.cos(x) ** 3 - np.sin(y) ** 2\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111, projection='3d')\n+    r = ax.plot_surface(x, y, z2, cmap='hot')\n+    r.get_facecolor()\n+\n+\n+def test_Poly3DCollection_get_edgecolor():\n+    # Smoke test to see that get_edgecolor does not raise\n+    # See GH#4067\n+    y, x = np.ogrid[1:10:100j, 1:10:100j]\n+    z2 = np.cos(x) ** 3 - np.sin(y) ** 2\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111, projection='3d')\n+    r = ax.plot_surface(x, y, z2, cmap='hot')\n+    r.get_edgecolor()\n+\n+\n @pytest.mark.parametrize(\n     \"vertical_axis, proj_expected, axis_lines_expected, tickdirs_expected\",\n     [\n",
        "problem_statement": "'Poly3DCollection' object has no attribute '_facecolors2d'\nThe following minimal example demonstrates the issue:\n\n```\nimport numpy as np\nimport matplotlib.tri as mtri\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ny,x = np.ogrid[1:10:100j, 1:10:100j]\nz2 = np.cos(x)**3 - np.sin(y)**2\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nr = ax.plot_surface(x,y,z2, cmap='hot')\nr.get_facecolors()\n```\n\nIt fails on the last line with the following traceback:\n\n```\nAttributeError                            Traceback (most recent call last)\n<ipython-input-13-de0f41d662cd> in <module>()\n----> 1 r.get_facecolors()\n\n/home/oliver/.virtualenvs/mpl/local/lib/python2.7/site-packages/mpl_toolkits/mplot3d/art3d.pyc in get_facecolors(self)\n    634\n    635     def get_facecolors(self):\n--> 636         return self._facecolors2d\n    637     get_facecolor = get_facecolors\n    638\n\nAttributeError: 'Poly3DCollection' object has no attribute '_facecolors2d'\n```\n\nTested with mpl versions 1.3.1 and 1.4.2.\n\nSent here by Benjamin, from the mpl users mailing list (mail with the same title). Sorry for dumping this without more assistance, I'm not yet at a python level where I can help in debugging, I think (well, it seems daunting).\n\n",
        "hints_text": "Ok, I have a \"fix\", in the sense that that attribute will be defined upon initialization. However, for your example, the facecolors returned is completely useless ([[0, 0, 1, 1]] -- all blue, which is default). I suspect that there is a deeper problem with ScalarMappables in general in that they don't set their facecolors until draw time?\n\nThe solution is to probably force the evaluation of the norm + cmap in `get_facecolors`.\n\nThe bigger question I have is if regular PolyCollections that are\nScalarMappables suffer from the same problem?\n\nOn Sat, Feb 7, 2015 at 6:42 PM, Thomas A Caswell notifications@github.com\nwrote:\n\n> The solution is to probably force the evaluation of the norm + cmap in\n> get_facecolors.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/matplotlib/matplotlib/issues/4067#issuecomment-73389124\n> .\n\nPR #4090 addresses this.  Although, it still doesn't return any useful\nvalue... it just does the same thing that regular PolyCollections do.\n\nOn Mon, Feb 9, 2015 at 3:47 PM, Thomas A Caswell notifications@github.com\nwrote:\n\n> Assigned #4067 https://github.com/matplotlib/matplotlib/issues/4067 to\n> @WeatherGod https://github.com/WeatherGod.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/matplotlib/matplotlib/issues/4067#event-232758504.\n\nI believe I'm still running into this issue today. Below is the error message I receive when attempting to convert hb_made (a hexbin PolyCollection) into a Poly3DCollection. Are there any other ways to convert 2D PolyCollections into 3D PolyCollections?\n\n```\nax.add_collection3d(hb_made, zs=shotNumber.get_array(), zdir='y')\n```\n\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpl_toolkits/mplot3d/axes3d.py\", line 2201, in add_collection3d\n    art3d.poly_collection_2d_to_3d(col, zs=zs, zdir=zdir)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpl_toolkits/mplot3d/art3d.py\", line 716, in poly_collection_2d_to_3d\n    col.set_3d_properties()\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpl_toolkits/mplot3d/art3d.py\", line 595, in set_3d_properties\n    self._edgecolors3d = PolyCollection.get_edgecolors(self)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/collections.py\", line 626, in get_edgecolor\n    return self.get_facecolors()\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpl_toolkits/mplot3d/art3d.py\", line 699, in get_facecolors\n    return self._facecolors2d\nAttributeError: 'Poly3DCollection' object has no attribute '_facecolors2d'\n\nI don't know if this is the appropriate place to post this, but here is a temporary fix for anyone who is waiting on the permanent fix.\r\n\r\nI encounter this same error when trying to add a legend to my 3D surface plot.\r\n\r\n```\r\nsurf = axarr[0].plot_surface(XSrc, YAmb, XCorrMeanDepthErrs[CodingScheme], label=CodingScheme, \r\n\t\t\t\t\t\talpha=.5, facecolor=color, edgecolor='black', linewidth=2)\r\naxarr[0].legend()\r\n```\r\n\r\nWhile a permanent fix is find, I found that a simple temporary fix is to explicitly set the `_facecolors2d` and `_edgecolors2d` parameters after creating the surface plot.\r\n\r\n```\r\nsurf = axarr[0].plot_surface(XSrc, YAmb, XCorrMeanDepthErrs[CodingScheme], label=CodingScheme, \r\n\t\t\t\t\t\talpha=.5, facecolor=color, edgecolor='black', linewidth=2)\r\nsurf._facecolors2d=surf._facecolors3d\r\nsurf._edgecolors2d=surf._edgecolors3d\r\naxarr[0].legend()\r\n```\r\n\nI also could not get the legend to show in my 3d plot of planes with the error:\"AttributeError: 'Poly3DCollection' object has no attribute '_edgecolors2d'\". \r\n\r\nAlthough the fix from @felipegb94 worked: \r\nsurf._facecolors2d=surf._facecolors3d\r\nsurf._edgecolors2d=surf._edgecolors3d\r\n\r\n\nI'm remilestoning this to keep it on the radar. \nI run into this today, but now even the workaround (https://github.com/matplotlib/matplotlib/issues/4067#issuecomment-357794003) is not working any more.\nI ran into this today, with version 3.3.1.post1012+g5584ba764, the workaround did the trick.\nI ran in to this as well, and the fix works in version 3.3.1 but not in 3.3.3\n@bootje2000 Apparently some attributes have been renamed or moved around (prima facie). Try this slight modification to @felipegb94's workaround:\r\n```\r\nsurf._facecolors2d = surf._facecolor3d\r\nsurf._edgecolors2d = surf._edgecolor3d\r\n```\r\nNote the lack of \"s\" on the RHS. `_facecolors3d` and `_edgecolors3d` do not seem to exist anymore.\r\n\r\nThis works in `matplotlib 3.3.3` as of January 04, 2021.\nNone of the workarounds work in matplotlib 3.5.1\r\nIt works after modifying for the available attributes `_facecolors `and `_edgecolors`:\r\n`surf._facecolors2d = surf._facecolors`\r\n`surf._edgecolors2d = surf._edgecolors`\r\n\r\nHint: if there are multiple surfaces on the same axes, the workaround must be applied to each surface individually.\n@nina-wwc I just checked the minimal working example in this thread using `matplotlib-3.5.1` and `3.5.2` (latest) and my workaround works as it did before, as does yours. Could you test the example code in a virtual environment perhaps, if you haven't already done so?\nThe problem still is that we update some state during the draw process.  Internally we do the updating and the access in just the right order so that in most cases we do not notice that we also add the attributes on the fly. \r\n\r\nThe best workaround for the current case (assuming 3.5):\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.tri as mtri\r\nimport matplotlib.pyplot as plt\r\nfrom mpl_toolkits.mplot3d import Axes3D\r\n\r\ny,x = np.ogrid[1:10:100j, 1:10:100j]\r\nz2 = np.cos(x)**3 - np.sin(y)**2\r\nfig = plt.figure()\r\nax = fig.add_subplot(111, projection='3d')\r\nr = ax.plot_surface(x,y,z2, cmap='hot')\r\nfig.draw_without_rendering()   # <--- This is the key line\r\nr.get_facecolors()\r\n```\r\n\r\nHowever, I still think the best solution is https://github.com/matplotlib/matplotlib/issues/4067#issuecomment-73389124 which will require looking in `get_facecolors` to detect when these attributes are missing (and if stale?) and then force what ever needs to be done to update them.\r\n\r\nLabeling this as a good first issue because it clearly has affected a lot of people for a long time, there is a very clear reproduction example (that will make a perfect test), and there are no API design choices to be made, but medium difficulty because it will require understanding some slightly tricking inheritance and how our 3D artists draw them selves. ",
        "created_at": "2022-08-05T13:44:06Z",
        "version": "3.5",
        "FAIL_TO_PASS": "[\"lib/mpl_toolkits/tests/test_mplot3d.py::test_Poly3DCollection_get_facecolor\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_Poly3DCollection_get_edgecolor\"]",
        "PASS_TO_PASS": "[\"lib/mpl_toolkits/tests/test_mplot3d.py::test_invisible_axes[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_aspects[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_repr\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_colors\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_notshaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_lightsource\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d_extend3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_fill[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-both-levels0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-min-levels1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-max-levels2]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tricontour[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d_1d_input\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsubplots[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tight_layout_text[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_color[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_linewidth[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_linewidth_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-True]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-False]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png--50]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png-130]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_view_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_3d_from_2d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked_strides[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerocstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerorstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerostrideraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsamplesraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_empty[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_modification\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_collection_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_verts_validation\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_closed[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly_collection_2d_to_3d_empty\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_array[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_labelpad[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_cla[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plotsurface_1d_raises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_transform\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_rot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_world\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists_nowarning\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_autoscale\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length_checks\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_isometric[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_simple[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_edge_style[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_named_colors[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_rgb_data[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_xyz[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_calling_conventions\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_line3d_set_get_data_3d\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted_cla\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ax3d_tickcolour\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ticklabel_format[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3D_smoke[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_minor_ticks[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d_errorevery[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_stem3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_equal_box_aspect[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_colorbar_pos\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_shared_axes_retick\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_pan\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scalarmap_update[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_subfigure_simple\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_computed_zorder[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_format_coord\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_get_axis_position\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args4-kwargs4-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args5-kwargs5-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args6-kwargs6-Cannot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args7-kwargs7-Cannot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args8-kwargs8-Cannot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args9-kwargs9-Must\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text_3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_pathpatch_3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter_spiral[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[z-proj_expected0-axis_lines_expected0-tickdirs_expected0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[y-proj_expected1-axis_lines_expected1-tickdirs_expected1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[x-proj_expected2-axis_lines_expected2-tickdirs_expected2]\"]",
        "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
        "generated_tests": [
            "import unittest\nimport numpy as np\nimport matplotlib.tri as mtri\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nclass TestPoly3DCollection(unittest.TestCase):\n    def test_get_facecolors(self):\n        y,x = np.ogrid[1:10:100j, 1:10:100j]\n        z2 = np.cos(x)**3 - np.sin(y)**2\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection='3d')\n        r = ax.plot_surface(x,y,z2, cmap='hot')\n        try:\n            r.get_facecolors()\n        except AttributeError as e:\n            self.fail(\"Poly3DCollection.get_facecolors() raised AttributeError unexpectedly!\")",
            "import unittest\nimport numpy as np\nimport matplotlib.tri as mtri\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nclass TestPoly3DCollection(unittest.TestCase):\n    def test_get_facecolors(self):\n        y,x = np.ogrid[1:10:100j, 1:10:100j]\n        z2 = np.cos(x)**3 - np.sin(y)**2\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection='3d')\n        r = ax.plot_surface(x,y,z2, cmap='hot')\n        try:\n            r.get_facecolors()\n        except AttributeError as e:\n            self.fail(\"Poly3DCollection.get_facecolors() raised AttributeError unexpectedly!\")",
            "import unittest\nimport numpy as np\nimport matplotlib.tri as mtri\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nclass TestPoly3DCollection(unittest.TestCase):\n    def test_get_facecolors(self):\n        y,x = np.ogrid[1:10:100j, 1:10:100j]\n        z2 = np.cos(x)**3 - np.sin(y)**2\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection='3d')\n        r = ax.plot_surface(x,y,z2, cmap='hot')\n        try:\n            r.get_facecolors()\n        except AttributeError as e:\n            self.fail(\"Test failed with AttributeError: {}\".format(e))",
            "import unittest\nimport numpy as np\nimport matplotlib.tri as mtri\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nclass TestPoly3DCollection(unittest.TestCase):\n    def test_get_facecolors(self):\n        y,x = np.ogrid[1:10:100j, 1:10:100j]\n        z2 = np.cos(x)**3 - np.sin(y)**2\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection='3d')\n        r = ax.plot_surface(x,y,z2, cmap='hot')\n        try:\n            r.get_facecolors()\n        except AttributeError as e:\n            self.fail(\"Test failed with AttributeError: {}\".format(e))",
            "import unittest\nimport numpy as np\nimport matplotlib.tri as mtri\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nclass TestPoly3DCollection(unittest.TestCase):\n    def test_get_facecolors(self):\n        y,x = np.ogrid[1:10:100j, 1:10:100j]\n        z2 = np.cos(x)**3 - np.sin(y)**2\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection='3d')\n        r = ax.plot_surface(x,y,z2, cmap='hot')\n        try:\n            r.get_facecolors()\n        except AttributeError as e:\n            self.fail(\"Test failed with AttributeError: {}\".format(e))"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_collections.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-25433",
        "base_commit": "7eafdd8af3c523c1c77b027d378fb337dd489f18",
        "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -931,6 +931,7 @@ def _break_share_link(ax, grouper):\n         self._axobservers.process(\"_axes_change_event\", self)\n         self.stale = True\n         self._localaxes.remove(ax)\n+        self.canvas.release_mouse(ax)\n \n         # Break link between any shared axes\n         for name in ax._axis_names:\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_bases.py b/lib/matplotlib/tests/test_backend_bases.py\n--- a/lib/matplotlib/tests/test_backend_bases.py\n+++ b/lib/matplotlib/tests/test_backend_bases.py\n@@ -95,6 +95,16 @@ def test_non_gui_warning(monkeypatch):\n                 in str(rec[0].message))\n \n \n+def test_grab_clear():\n+    fig, ax = plt.subplots()\n+\n+    fig.canvas.grab_mouse(ax)\n+    assert fig.canvas.mouse_grabber == ax\n+\n+    fig.clear()\n+    assert fig.canvas.mouse_grabber is None\n+\n+\n @pytest.mark.parametrize(\n     \"x, y\", [(42, 24), (None, 42), (None, None), (200, 100.01), (205.75, 2.0)])\n def test_location_event_position(x, y):\n",
        "problem_statement": "[Bug]: using clf and pyplot.draw in range slider on_changed callback blocks input to widgets\n### Bug summary\n\nWhen using clear figure, adding new widgets and then redrawing the current figure in the on_changed callback of a range slider the inputs to all the widgets in the figure are blocked. When doing the same in the button callback on_clicked, everything works fine.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as pyplot\r\nimport matplotlib.widgets as widgets\r\n\r\ndef onchanged(values):\r\n    print(\"on changed\")\r\n    print(values)\r\n    pyplot.clf()\r\n    addElements()\r\n    pyplot.draw()\r\n\r\ndef onclick(e):\r\n    print(\"on click\")\r\n    pyplot.clf()\r\n    addElements()\r\n    pyplot.draw()\r\n\r\ndef addElements():\r\n    ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\r\n    global slider\r\n    slider = widgets.RangeSlider(ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\r\n    slider.on_changed(onchanged)\r\n    ax = pyplot.axes([0.1, 0.30, 0.8, 0.1])\r\n    global button\r\n    button = widgets.Button(ax, \"Test\")\r\n    button.on_clicked(onclick)\r\n\r\naddElements()\r\n\r\npyplot.show()\n```\n\n\n### Actual outcome\n\nThe widgets can't receive any input from a mouse click, when redrawing in the on_changed callback of a range Slider. \r\nWhen using a button, there is no problem.\n\n### Expected outcome\n\nThe range slider callback on_changed behaves the same as the button callback on_clicked.\n\n### Additional information\n\nThe problem also occurred on Manjaro with:\r\n- Python version: 3.10.9\r\n- Matplotlib version: 3.6.2\r\n- Matplotlib backend: QtAgg\r\n- Installation of matplotlib via Linux package manager\r\n\n\n### Operating system\n\nWindows 10\n\n### Matplotlib Version\n\n3.6.2\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\n3.11.0\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n",
        "hints_text": "A can confirm this behavior, but removing and recreating the objects that host the callbacks in the callbacks is definitely on the edge of the intended usage.  \r\n\r\nWhy are you doing this?  In your application can you get away with not destroying your slider?\nI think there could be a way to not destroy the slider. But I don't have the time to test that currently.\r\nMy workaround for the problem was using a button to redraw everything. With that everything is working fine.\r\n\r\nThat was the weird part for me as they are both callbacks, but in one everything works fine and in the other one all inputs are blocked. If what I'm trying doing is not the intended usage, that's fine for me. \r\nThanks for the answer.\nThe idiomatic way to destructively work on widgets that triggered an event in a UI toolkit is to do the destructive work in an idle callback:\r\n```python\r\ndef redraw():\r\n    pyplot.clf()\r\n    addElements()\r\n    pyplot.draw()\r\n    return False\r\n\r\ndef onchanged(values):\r\n    print(\"on changed\")\r\n    print(values)\r\n    pyplot.gcf().canvas.new_timer(redraw)\r\n```\nThanks for the answer. I tried that with the code in the original post.\r\nThe line:\r\n\r\n```python\r\npyplot.gcf().canvas.new_timer(redraw)\r\n```\r\ndoesn't work for me. After having a look at the documentation, I think the line should be:\r\n\r\n```python\r\npyplot.gcf().canvas.new_timer(callbacks=[(redraw, tuple(), dict())])\r\n```\r\n\r\nBut that still didn't work. The redraw callback doesn't seem to trigger.\nSorry, I mean to update that after testing and before posting, but forgot to. That line should be:\r\n```\r\n    pyplot.gcf().canvas.new_timer(callbacks=[redraw])\r\n```\nSorry for double posting; now I see that it didn't actually get called!\r\n\r\nThat's because I forgot to call `start` as well, and the timer was garbage collected at the end of the function. It should be called as you've said, but stored globally and started:\r\n```\r\nimport matplotlib.pyplot as pyplot\r\nimport matplotlib.widgets as widgets\r\n\r\n\r\ndef redraw():\r\n    print(\"redraw\")\r\n    pyplot.clf()\r\n    addElements()\r\n    pyplot.draw()\r\n    return False\r\n\r\n\r\ndef onchanged(values):\r\n    print(\"on changed\")\r\n    print(values)\r\n    global timer\r\n    timer = pyplot.gcf().canvas.new_timer(callbacks=[(redraw, (), {})])\r\n    timer.start()\r\n\r\n\r\ndef onclick(e):\r\n    print(\"on click\")\r\n    global timer\r\n    timer = pyplot.gcf().canvas.new_timer(callbacks=[(redraw, (), {})])\r\n    timer.start()\r\n\r\n\r\ndef addElements():\r\n    ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\r\n    global slider\r\n    slider = widgets.RangeSlider(ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\r\n    slider.on_changed(onchanged)\r\n    ax = pyplot.axes([0.1, 0.30, 0.8, 0.1])\r\n    global button\r\n    button = widgets.Button(ax, \"Test\")\r\n    button.on_clicked(onclick)\r\n\r\n\r\naddElements()\r\n\r\npyplot.show()\r\n```\nThanks for the answer, the code works without errors, but I'm still able to break it when using the range slider. Then it results in the same problem as my original post. It seems like that happens when triggering the onchanged callback at the same time the timer callback gets called.\nAre you sure it's not working, or is it just that it got replaced by a new one that is using the same initial value again? For me, it moves, but once the callback runs, it's reset because the slider is created with `valinit=(1, 10)`.\nThe code redraws everything fine, but when the onchanged callback of the range slider gets called at the same time as the redraw callback of the timer, I'm not able to give any new inputs to the widgets. You can maybe reproduce that with changing the value of the slider the whole time, while waiting for the redraw.\nI think what is happening is that because you are destroying the slider every time the you are also destroying the state of what value you changed it to.  When you create it you re-create it at the default value which produces the effect that you can not seem to change it.  Put another way, the state of what the current value of the slider is is in the `Slider` object.   Replacing the slider object with a new one (correctly) forgets the old value.\r\n\r\n-----\r\n\r\nI agree it fails in surprising ways, but I think that this is best case \"undefined behavior\" and worst case incorrect usage of the tools.  In either case there is not much we can do upstream to address this (as if the user _did_ want to get fresh sliders that is not a case we should prevent from happening or warn on).\nThe \"forgetting the value\" is not the problem. My problem is, that the input just blocks for every widget in the figure. When that happens, you can click on any widget, but no callback gets triggered. That problem seems to happen when a callback of an object gets called that is/has been destroyed, but I don't know for sure.\r\n\r\nBut if that is from the incorrect usage of the tools, that's fine for me. I got a decent workaround that works currently, so I just have to keep that in my code for now.",
        "created_at": "2023-03-11T08:36:32Z",
        "version": "3.7",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_bases.py::test_grab_clear\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_bases.py::test_uses_per_path\", \"lib/matplotlib/tests/test_backend_bases.py::test_canvas_ctor\", \"lib/matplotlib/tests/test_backend_bases.py::test_get_default_filename\", \"lib/matplotlib/tests/test_backend_bases.py::test_canvas_change\", \"lib/matplotlib/tests/test_backend_bases.py::test_non_gui_warning\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[42-24]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[None-42]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[None-None]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[200-100.01]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[205.75-2.0]\", \"lib/matplotlib/tests/test_backend_bases.py::test_pick\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_zoom\", \"lib/matplotlib/tests/test_backend_bases.py::test_widgetlock_zoompan\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolbar_zoompan\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[svg]\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[ps]\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[pdf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[pgf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend0-expectedxlim0-expectedylim0]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend1-expectedxlim1-expectedylim1]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend2-expectedxlim2-expectedylim2]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend3-expectedxlim3-expectedylim3]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend4-expectedxlim4-expectedylim4]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend5-expectedxlim5-expectedylim5]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend6-expectedxlim6-expectedylim6]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend7-expectedxlim7-expectedylim7]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend8-expectedxlim8-expectedylim8]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend9-expectedxlim9-expectedylim9]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend10-expectedxlim10-expectedylim10]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend11-expectedxlim11-expectedylim11]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend12-expectedxlim12-expectedylim12]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend13-expectedxlim13-expectedylim13]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[x-mouseend14-expectedxlim14-expectedylim14]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[y-mouseend15-expectedxlim15-expectedylim15]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[control-mouseend16-expectedxlim16-expectedylim16]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[control-mouseend17-expectedxlim17-expectedylim17]\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolmanager_remove\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolmanager_get_tool\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolmanager_update_keymap\"]",
        "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
        "generated_tests": [
            "import unittest\nimport matplotlib.pyplot as pyplot\nimport matplotlib.widgets as widgets\n\nclass TestRangeSlider(unittest.TestCase):\n    def setUp(self):\n        self.ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\n        self.slider = widgets.RangeSlider(self.ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\n\n    def test_onchanged(self):\n        def onchanged(values):\n            print(\"on changed\")\n            print(values)\n            pyplot.clf()\n            self.ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\n            self.slider = widgets.RangeSlider(self.ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\n            self.slider.on_changed(onchanged)\n            pyplot.draw()\n\n        self.slider.on_changed(onchanged)\n        self.slider.set_val((2, 8))\n        self.assertEqual(self.slider.val, (2, 8))\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as pyplot\nimport matplotlib.widgets as widgets\n\nclass TestRangeSlider(unittest.TestCase):\n    def setUp(self):\n        self.ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\n        self.slider = widgets.RangeSlider(self.ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\n        self.ax = pyplot.axes([0.1, 0.30, 0.8, 0.1])\n        self.button = widgets.Button(self.ax, \"Test\")\n\n    def test_onchanged(self):\n        def onchanged(values):\n            print(\"on changed\")\n            print(values)\n            pyplot.clf()\n            self.setUp()\n            pyplot.draw()\n\n        self.slider.on_changed(onchanged)\n        self.button.on_clicked(onchanged)\n        self.assertEqual(self.slider.val, (1, 10))\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as pyplot\nimport matplotlib.widgets as widgets\n\nclass TestRangeSlider(unittest.TestCase):\n    def setUp(self):\n        self.ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\n        self.slider = widgets.RangeSlider(self.ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\n\n    def test_onchanged(self):\n        def onchanged(values):\n            print(\"on changed\")\n            print(values)\n            pyplot.clf()\n            self.ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\n            self.slider = widgets.RangeSlider(self.ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\n            self.slider.on_changed(onchanged)\n            pyplot.draw()\n\n        self.slider.on_changed(onchanged)\n        self.slider.set_val((2, 8))\n        self.assertEqual(self.slider.val, (2, 8))\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as pyplot\nimport matplotlib.widgets as widgets\n\nclass TestRangeSlider(unittest.TestCase):\n    def setUp(self):\n        self.ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\n        self.slider = widgets.RangeSlider(self.ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\n        self.ax = pyplot.axes([0.1, 0.30, 0.8, 0.1])\n        self.button = widgets.Button(self.ax, \"Test\")\n\n    def onchanged(self, values):\n        pyplot.clf()\n        self.setUp()\n        pyplot.draw()\n\n    def onclick(self, e):\n        pyplot.clf()\n        self.setUp()\n        pyplot.draw()\n\n    def test_onchanged(self):\n        self.slider.on_changed(self.onchanged)\n        self.button.on_clicked(self.onclick)\n        self.assertEqual(self.slider.val, (1, 10))\n        self.assertEqual(self.button.label.get_text(), \"Test\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as pyplot\nimport matplotlib.widgets as widgets\n\nclass TestRangeSlider(unittest.TestCase):\n    def setUp(self):\n        self.ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\n        self.slider = widgets.RangeSlider(self.ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\n        self.ax = pyplot.axes([0.1, 0.30, 0.8, 0.1])\n        self.button = widgets.Button(self.ax, \"Test\")\n\n    def test_onchanged(self):\n        def onchanged(values):\n            print(\"on changed\")\n            print(values)\n            pyplot.clf()\n            self.setUp()\n            pyplot.draw()\n\n        self.slider.on_changed(onchanged)\n        self.slider.set_val((2, 8))\n        self.assertEqual(self.slider.val, (2, 8))\n\n    def test_onclick(self):\n        def onclick(e):\n            print(\"on click\")\n            pyplot.clf()\n            self.setUp()\n            pyplot.draw()\n\n        self.button.on_clicked(onclick)\n        self.button.eventson = True\n        self.button._observers = {}\n        self.button._button.clicked.emit()\n        self.assertTrue(self.button.eventson)\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/tinypages/range6.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-25079",
        "base_commit": "66f7956984cbfc3647e867c6e5fde889a89c64ef",
        "patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1362,8 +1362,12 @@ def inverse(self, value):\n \n     def autoscale(self, A):\n         \"\"\"Set *vmin*, *vmax* to min, max of *A*.\"\"\"\n-        self.vmin = self.vmax = None\n-        self.autoscale_None(A)\n+        with self.callbacks.blocked():\n+            # Pause callbacks while we are updating so we only get\n+            # a single update signal at the end\n+            self.vmin = self.vmax = None\n+            self.autoscale_None(A)\n+        self._changed()\n \n     def autoscale_None(self, A):\n         \"\"\"If vmin or vmax are not set, use the min/max of *A* to set them.\"\"\"\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -1493,6 +1493,11 @@ def test_norm_callback():\n     norm.vmax = 5\n     assert increment.call_count == 2\n \n+    # We only want autoscale() calls to send out one update signal\n+    increment.call_count = 0\n+    norm.autoscale([0, 1, 2])\n+    assert increment.call_count == 1\n+\n \n def test_scalarmappable_norm_update():\n     norm = mcolors.Normalize()\n",
        "problem_statement": "[Bug]: Setting norm with existing colorbar fails with 3.6.3\n### Bug summary\r\n\r\nSetting the norm to a `LogNorm` after the colorbar has been created (e.g. in interactive code) fails with an `Invalid vmin` value in matplotlib 3.6.3.\r\n\r\nThe same code worked in previous matplotlib versions.\r\n\r\nNot that vmin and vmax are explicitly set to values valid for `LogNorm` and no negative values (or values == 0) exist in the input data.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.colors import LogNorm\r\nimport numpy as np\r\n\r\n# create some random data to fill a 2d plot\r\nrng = np.random.default_rng(0)\r\nimg = rng.uniform(1, 5, (25, 25))\r\n\r\n# plot it\r\nfig, ax = plt.subplots(layout=\"constrained\")\r\nplot = ax.pcolormesh(img)\r\ncbar = fig.colorbar(plot, ax=ax)\r\n\r\nvmin = 1\r\nvmax = 5\r\n\r\nplt.ion()\r\nfig.show()\r\nplt.pause(0.5)\r\n\r\nplot.norm = LogNorm(vmin, vmax)\r\nplot.autoscale()\r\nplt.pause(0.5)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/backends/backend_qt.py\", line 454, in _draw_idle\r\n    self.draw()\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 405, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/figure.py\", line 3082, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3100, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/collections.py\", line 2148, in draw\r\n    self.update_scalarmappable()\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/collections.py\", line 891, in update_scalarmappable\r\n    self._mapped_colors = self.to_rgba(self._A, self._alpha)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/cm.py\", line 511, in to_rgba\r\n    x = self.norm(x)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/colors.py\", line 1694, in __call__\r\n    raise ValueError(\"Invalid vmin or vmax\")\r\nValueError: Invalid vmin or vmax\r\n```\r\n\r\n### Expected outcome\r\n\r\nWorks, colorbar and mappable are updated with new norm.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nLinux\r\n\r\n### Matplotlib Version\r\n\r\n3.6.3 (works with 3.6.2)\r\n\r\n### Matplotlib Backend\r\n\r\nMultpiple backends tested, same error in all (Qt5Agg, TkAgg, agg, ...)\r\n\r\n### Python version\r\n\r\n3.9.15\r\n\r\n### Jupyter version\r\n\r\nnot in jupyter\r\n\r\n### Installation\r\n\r\nconda\n",
        "hints_text": "",
        "created_at": "2023-01-25T15:24:44Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colors.py::test_norm_callback\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[5-result0]\", \"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[2-result1]\", \"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[1-result2]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[uint8]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[int]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[float16]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[float]\", \"lib/matplotlib/tests/test_colors.py::test_resampled\", \"lib/matplotlib/tests/test_colors.py::test_register_cmap\", \"lib/matplotlib/tests/test_colors.py::test_colormaps_get_cmap\", \"lib/matplotlib/tests/test_colors.py::test_unregister_builtin_cmap\", \"lib/matplotlib/tests/test_colors.py::test_colormap_copy\", \"lib/matplotlib/tests/test_colors.py::test_colormap_equals\", \"lib/matplotlib/tests/test_colors.py::test_colormap_endian\", \"lib/matplotlib/tests/test_colors.py::test_colormap_invalid\", \"lib/matplotlib/tests/test_colors.py::test_colormap_return_types\", \"lib/matplotlib/tests/test_colors.py::test_BoundaryNorm\", \"lib/matplotlib/tests/test_colors.py::test_CenteredNorm\", \"lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[-1-2]\", \"lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[3-1]\", \"lib/matplotlib/tests/test_colors.py::test_LogNorm\", \"lib/matplotlib/tests/test_colors.py::test_LogNorm_inverse\", \"lib/matplotlib/tests/test_colors.py::test_PowerNorm\", \"lib/matplotlib/tests/test_colors.py::test_PowerNorm_translation_invariance\", \"lib/matplotlib/tests/test_colors.py::test_Normalize\", \"lib/matplotlib/tests/test_colors.py::test_FuncNorm\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmin\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scale\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center_max\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Even\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Odd\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminEqualsVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VmaxEqualsVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminGTVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_TwoSlopeNorm_VminGTVmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VcenterGTVmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_premature_scaling\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm_colorbar\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm_single_zero\", \"lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_init\", \"lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_norm\", \"lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors[png]\", \"lib/matplotlib/tests/test_colors.py::test_boundarynorm_and_colorbarbase[png]\", \"lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors2\", \"lib/matplotlib/tests/test_colors.py::test_rgb_hsv_round_trip\", \"lib/matplotlib/tests/test_colors.py::test_autoscale_masked\", \"lib/matplotlib/tests/test_colors.py::test_light_source_topo_surface[png]\", \"lib/matplotlib/tests/test_colors.py::test_light_source_shading_default\", \"lib/matplotlib/tests/test_colors.py::test_light_source_shading_empty_mask\", \"lib/matplotlib/tests/test_colors.py::test_light_source_masked_shading\", \"lib/matplotlib/tests/test_colors.py::test_light_source_hillshading\", \"lib/matplotlib/tests/test_colors.py::test_light_source_planar_hillshading\", \"lib/matplotlib/tests/test_colors.py::test_color_names\", \"lib/matplotlib/tests/test_colors.py::test_pandas_iterable\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter_r]\", \"lib/matplotlib/tests/test_colors.py::test_has_alpha_channel\", \"lib/matplotlib/tests/test_colors.py::test_cn\", \"lib/matplotlib/tests/test_colors.py::test_conversions\", \"lib/matplotlib/tests/test_colors.py::test_conversions_masked\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_single_str\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_alpha_array\", \"lib/matplotlib/tests/test_colors.py::test_failed_conversions\", \"lib/matplotlib/tests/test_colors.py::test_grey_gray\", \"lib/matplotlib/tests/test_colors.py::test_tableau_order\", \"lib/matplotlib/tests/test_colors.py::test_ndarray_subclass_norm\", \"lib/matplotlib/tests/test_colors.py::test_same_color\", \"lib/matplotlib/tests/test_colors.py::test_hex_shorthand_notation\", \"lib/matplotlib/tests/test_colors.py::test_repr_png\", \"lib/matplotlib/tests/test_colors.py::test_repr_html\", \"lib/matplotlib/tests/test_colors.py::test_get_under_over_bad\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[over]\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[under]\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[bad]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_alpha_array\", \"lib/matplotlib/tests/test_colors.py::test_colormap_bad_data_with_alpha\", \"lib/matplotlib/tests/test_colors.py::test_2d_to_rgba\", \"lib/matplotlib/tests/test_colors.py::test_set_dict_to_rgba\", \"lib/matplotlib/tests/test_colors.py::test_norm_deepcopy\", \"lib/matplotlib/tests/test_colors.py::test_scalarmappable_norm_update\", \"lib/matplotlib/tests/test_colors.py::test_norm_update_figs[png]\", \"lib/matplotlib/tests/test_colors.py::test_norm_update_figs[pdf]\", \"lib/matplotlib/tests/test_colors.py::test_make_norm_from_scale_name\", \"lib/matplotlib/tests/test_colors.py::test_color_sequences\", \"lib/matplotlib/tests/test_colors.py::test_cm_set_cmap_error\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
        "generated_tests": [
            "import pytest\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\nclass TestMatplotlibLogNorm:\n\n    def test_setting_norm_with_existing_colorbar(self):\n        rng = np.random.default_rng(0)\n        img = rng.uniform(1, 5, (25, 25))\n\n        fig, ax = plt.subplots(layout=\"constrained\")\n        plot = ax.pcolormesh(img)\n        cbar = fig.colorbar(plot, ax=ax)\n\n        vmin = 1\n        vmax = 5\n\n        plt.ion()\n        fig.show()\n        plt.pause(0.5)\n\n        try:\n            plot.norm = LogNorm(vmin, vmax)\n            plot.autoscale()\n            plt.pause(0.5)\n        except ValueError as e:\n            pytest.fail(f\"Unexpected ValueError: {e}\")",
            "import pytest\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\nclass TestMatplotlibLogNorm:\n    def test_setting_norm_with_existing_colorbar(self):\n        rng = np.random.default_rng(0)\n        img = rng.uniform(1, 5, (25, 25))\n\n        fig, ax = plt.subplots(layout=\"constrained\")\n        plot = ax.pcolormesh(img)\n        cbar = fig.colorbar(plot, ax=ax)\n\n        vmin = 1\n        vmax = 5\n\n        plt.ion()\n        fig.show()\n        plt.pause(0.5)\n\n        try:\n            plot.norm = LogNorm(vmin, vmax)\n            plot.autoscale()\n            plt.pause(0.5)\n        except ValueError as e:\n            pytest.fail(f\"Unexpected ValueError: {e}\")",
            "import pytest\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\ndef test_setting_norm_with_existing_colorbar():\n    # create some random data to fill a 2d plot\n    rng = np.random.default_rng(0)\n    img = rng.uniform(1, 5, (25, 25))\n\n    # plot it\n    fig, ax = plt.subplots(layout=\"constrained\")\n    plot = ax.pcolormesh(img)\n    cbar = fig.colorbar(plot, ax=ax)\n\n    vmin = 1\n    vmax = 5\n\n    plt.ion()\n    fig.show()\n    plt.pause(0.5)\n\n    try:\n        plot.norm = LogNorm(vmin, vmax)\n        plot.autoscale()\n        plt.pause(0.5)\n    except ValueError as e:\n        pytest.fail(f\"Unexpected ValueError: {e}\")",
            "import pytest\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\ndef test_setting_norm_with_existing_colorbar():\n    # create some random data to fill a 2d plot\n    rng = np.random.default_rng(0)\n    img = rng.uniform(1, 5, (25, 25))\n\n    # plot it\n    fig, ax = plt.subplots(layout=\"constrained\")\n    plot = ax.pcolormesh(img)\n    cbar = fig.colorbar(plot, ax=ax)\n\n    vmin = 1\n    vmax = 5\n\n    plt.ion()\n    fig.show()\n    plt.pause(0.5)\n\n    try:\n        plot.norm = LogNorm(vmin, vmax)\n        plot.autoscale()\n        plt.pause(0.5)\n    except ValueError as e:\n        assert str(e) != \"Invalid vmin or vmax\", \"Failed to set norm with existing colorbar\"",
            "import matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_setting_norm_with_existing_colorbar(self):\n        try:\n            # create some random data to fill a 2d plot\n            rng = np.random.default_rng(0)\n            img = rng.uniform(1, 5, (25, 25))\n\n            # plot it\n            fig, ax = plt.subplots(layout=\"constrained\")\n            plot = ax.pcolormesh(img)\n            cbar = fig.colorbar(plot, ax=ax)\n\n            vmin = 1\n            vmax = 5\n\n            plt.ion()\n            fig.show()\n            plt.pause(0.5)\n\n            plot.norm = LogNorm(vmin, vmax)\n            plot.autoscale()\n            plt.pause(0.5)\n        except ValueError as e:\n            self.fail(\"Setting the norm to a LogNorm after the colorbar has been created raised ValueError unexpectedly!\")"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_colorbar.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-24149",
        "base_commit": "af39f1edffcd828f05cfdd04f2e59506bb4a27bc",
        "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2182,11 +2182,19 @@ def _convert_dx(dx, x0, xconv, convert):\n                 x0 = cbook._safe_first_finite(x0)\n             except (TypeError, IndexError, KeyError):\n                 pass\n+            except StopIteration:\n+                # this means we found no finite element, fall back to first\n+                # element unconditionally\n+                x0 = cbook.safe_first_element(x0)\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n             except (TypeError, IndexError, KeyError):\n                 x = xconv\n+            except StopIteration:\n+                # this means we found no finite element, fall back to first\n+                # element unconditionally\n+                x = cbook.safe_first_element(xconv)\n \n             delist = False\n             if not np.iterable(dx):\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8195,3 +8195,16 @@ def test_bar_leading_nan():\n         for b in rest:\n             assert np.isfinite(b.xy).all()\n             assert np.isfinite(b.get_width())\n+\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_bar_all_nan(fig_test, fig_ref):\n+    mpl.style.use(\"mpl20\")\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    ax_test.bar([np.nan], [np.nan])\n+    ax_test.bar([1], [1])\n+\n+    ax_ref.bar([1], [1]).remove()\n+    ax_ref.bar([1], [1])\n",
        "problem_statement": "[Bug]: ax.bar raises for all-nan data on matplotlib 3.6.1 \n### Bug summary\n\n`ax.bar` raises an exception in 3.6.1 when passed only nan data. This irrevocably breaks seaborn's histogram function (which draws and then removes a \"phantom\" bar to trip the color cycle).\n\n### Code for reproduction\n\n```python\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nf, ax = plt.subplots()\r\nax.bar([np.nan], [np.nan])\n```\n\n\n### Actual outcome\n\n```python-traceback\r\n---------------------------------------------------------------------------\r\nStopIteration                             Traceback (most recent call last)\r\nCell In [1], line 4\r\n      2 import matplotlib.pyplot as plt\r\n      3 f, ax = plt.subplots()\r\n----> 4 ax.bar([np.nan], [np.nan])[0].get_x()\r\n\r\nFile ~/miniconda/envs/py310/lib/python3.10/site-packages/matplotlib/__init__.py:1423, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)\r\n   1420 @functools.wraps(func)\r\n   1421 def inner(ax, *args, data=None, **kwargs):\r\n   1422     if data is None:\r\n-> 1423         return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n   1425     bound = new_sig.bind(ax, *args, **kwargs)\r\n   1426     auto_label = (bound.arguments.get(label_namer)\r\n   1427                   or bound.kwargs.get(label_namer))\r\n\r\nFile ~/miniconda/envs/py310/lib/python3.10/site-packages/matplotlib/axes/_axes.py:2373, in Axes.bar(self, x, height, width, bottom, align, **kwargs)\r\n   2371 x0 = x\r\n   2372 x = np.asarray(self.convert_xunits(x))\r\n-> 2373 width = self._convert_dx(width, x0, x, self.convert_xunits)\r\n   2374 if xerr is not None:\r\n   2375     xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\r\n\r\nFile ~/miniconda/envs/py310/lib/python3.10/site-packages/matplotlib/axes/_axes.py:2182, in Axes._convert_dx(dx, x0, xconv, convert)\r\n   2170 try:\r\n   2171     # attempt to add the width to x0; this works for\r\n   2172     # datetime+timedelta, for instance\r\n   (...)\r\n   2179     # removes the units from unit packages like `pint` that\r\n   2180     # wrap numpy arrays.\r\n   2181     try:\r\n-> 2182         x0 = cbook._safe_first_finite(x0)\r\n   2183     except (TypeError, IndexError, KeyError):\r\n   2184         pass\r\n\r\nFile ~/miniconda/envs/py310/lib/python3.10/site-packages/matplotlib/cbook/__init__.py:1749, in _safe_first_finite(obj, skip_nonfinite)\r\n   1746     raise RuntimeError(\"matplotlib does not \"\r\n   1747                        \"support generators as input\")\r\n   1748 else:\r\n-> 1749     return next(val for val in obj if safe_isfinite(val))\r\n\r\nStopIteration: \r\n```\n\n### Expected outcome\n\nOn 3.6.0 this returns a `BarCollection` with one Rectangle, having `nan` for `x` and `height`.\n\n### Additional information\n\nI assume it's related to this bullet in the release notes:\r\n\r\n- Fix barplot being empty when first element is NaN\r\n\r\nBut I don't know the context for it to investigate further (could these link to PRs?)\r\n\r\nFurther debugging:\r\n\r\n```python\r\nax.bar([np.nan], [0])  # Raises\r\nax.bar([0], [np.nan])  # Works\r\n```\r\n\r\nSo it's about the x position specifically.\n\n### Operating system\n\nMacos\n\n### Matplotlib Version\n\n3.6.1\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n",
        "hints_text": "This is the PR in question: https://github.com/matplotlib/matplotlib/pull/23751 (although I have not checked is that is causing it).\nThanks @oscargus that indeed looks like the culprit: it asks for the \"next\" finite value and does not handle the `StopIteration` exception that you get if there isn't one.\n> which draws and then removes a \"phantom\" bar to trip the color cycle\r\n\r\nWe should definitely fix this regression, but is there a better way for seaborn to be managing the colors that does not require adding and removing artists?  I assume you use `np.nan` to avoid triggering any of the autoscaling?\n> We should definitely fix this regression, but is there a better way for seaborn to be managing the colors that does not require adding and removing artists?\r\n\r\nDefinitely open to that but none that I am aware of! I don't think there's a public API for advancing the property cycle? AFAIK one would need to do something like `ax._get_patches_for_fill.get_next_color()`.\r\n\r\n> I assume you use np.nan to avoid triggering any of the autoscaling?\r\n\r\nYep, exactly. Actually in most cases I just pass empty data, but `ax.bar([], [])` doesn't return an artist (just an empty `BarContainer` so it doesn't work with that pattern. See here for more details: https://github.com/mwaskom/seaborn/blob/5386adc5a482ef3d0aef958ebf37d39ce0b06b88/seaborn/utils.py#L138\nJust as a meta comment I guess this should not have been milestones so aggressively?  The pr fixed a bug, but an old one so maybe could have waited for 3.7?\nIf I understand correctly, it did work in 3.6.0 for the all-nan case, but not for a leading nan (and other non-nan values). So although a bug was fixed in 3.6.1, this was introduced there as well.\r\n\r\n(If my understanding is wrong then it could for sure have waited.)\n```diff\r\n\u2714 15:28:08 $ git diff\r\ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\r\nindex fdac0f3560..de4a99f71d 100644\r\n--- a/lib/matplotlib/axes/_axes.py\r\n+++ b/lib/matplotlib/axes/_axes.py\r\n@@ -2182,11 +2182,19 @@ class Axes(_AxesBase):\r\n                 x0 = cbook._safe_first_finite(x0)\r\n             except (TypeError, IndexError, KeyError):\r\n                 pass\r\n+            except StopIteration:\r\n+                # this means we found no finite element, fall back to first\r\n+                # element unconditionally\r\n+                x0 = cbook.safe_first_element(x0)\r\n\r\n             try:\r\n                 x = cbook._safe_first_finite(xconv)\r\n             except (TypeError, IndexError, KeyError):\r\n                 x = xconv\r\n+            except StopIteration:\r\n+                # this means we found no finite element, fall back to first\r\n+                # element unconditionally\r\n+                x = cbook.safe_first_element(xconv)\r\n\r\n             delist = False\r\n             if not np.iterable(dx):\r\n\r\n```\r\n\r\nI think this is the fix, need to commit it and add a test.\r\n\r\n-----\r\n\r\n\r\nMy memory of this was that this was a 3.6 regression from 3.5 but looking at the linked issue that was clearly wrong.",
        "created_at": "2022-10-12T22:00:54Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_bar_all_nan[png]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_repr\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_shift\", \"lib/matplotlib/tests/test_axes.py::test_acorr[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_matshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla\", \"lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_arrow_in_view\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_annotate_signature\", \"lib/matplotlib/tests/test_axes.py::test_fill_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_single_date[png]\", \"lib/matplotlib/tests/test_axes.py::test_shaped_data[png]\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[png]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_axes.py::test_markevery[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_nan_bar_values\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_regression\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels_length\", \"lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_float16\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]\", \"lib/matplotlib/tests/test_axes.py::test_stairs[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_update[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_empty\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2\", \"lib/matplotlib/tests/test_axes.py::test_stairs_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error\", \"lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_log_scales\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_no_data\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_invalid\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_errorbar_polar_caps[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid\", \"lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_markerfmt\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_args\", \"lib/matplotlib/tests/test_axes.py::test_vlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_default\", \"lib/matplotlib/tests/test_axes.py::test_hlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_hlines_default\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_fs_none\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd[png]\", \"lib/matplotlib/tests/test_axes.py::test_spectrum[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases\", \"lib/matplotlib/tests/test_axes.py::test_twin_remove[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]\", \"lib/matplotlib/tests/test_axes.py::test_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_shared_aspect_error\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_method_errors\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_default[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values\", \"lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie\", \"lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc\", \"lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_set_xy_bound\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_bad_plot_args\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_shared_bool\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks_log\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates\", \"lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing\", \"lib/matplotlib/tests/test_axes.py::test_pandas_index_shape\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist\", \"lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center\", \"lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titletwiny\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[left\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[center\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[both\", \"lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_offset_text_visible\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_inset\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_inset_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_inset_projection\", \"lib/matplotlib/tests/test_axes.py::test_inset_subclass\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan\", \"lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_secondary_minorloc\", \"lib/matplotlib/tests/test_axes.py::test_secondary_formatter\", \"lib/matplotlib/tests/test_axes.py::test_secondary_repr\", \"lib/matplotlib/tests/test_axes.py::test_normal_axes\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\", \"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\", \"lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position\", \"lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init\", \"lib/matplotlib/tests/test_axes.py::test_redraw_in_frame\", \"lib/matplotlib/tests/test_axes.py::test_invisible_axes_events\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]\", \"lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]\", \"lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions\", \"lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_retick\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_center\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_labels\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted\", \"lib/matplotlib/tests/test_axes.py::test_nan_barlabels\", \"lib/matplotlib/tests/test_axes.py::test_patch_bounds\", \"lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_artist_sublists\", \"lib/matplotlib/tests/test_axes.py::test_empty_line_plots\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format\", \"lib/matplotlib/tests/test_axes.py::test_automatic_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_errors\", \"lib/matplotlib/tests/test_axes.py::test_clim\", \"lib/matplotlib/tests/test_axes.py::test_bezier_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_get_xticklabel\", \"lib/matplotlib/tests/test_axes.py::test_bar_leading_nan\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
        "generated_tests": [
            "import numpy as np\nimport matplotlib.pyplot as plt\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_nan_data_in_bar(self):\n        try:\n            f, ax = plt.subplots()\n            ax.bar([np.nan], [np.nan])\n        except StopIteration:\n            self.fail(\"ax.bar raised StopIteration when passed only nan data.\")",
            "import numpy as np\nimport matplotlib.pyplot as plt\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_nan_data_in_bar(self):\n        try:\n            f, ax = plt.subplots()\n            ax.bar([np.nan], [np.nan])\n        except StopIteration:\n            self.fail(\"ax.bar raised StopIteration unexpectedly!\")",
            "import numpy as np\nimport matplotlib.pyplot as plt\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_nan_data_in_bar(self):\n        try:\n            f, ax = plt.subplots()\n            ax.bar([np.nan], [np.nan])\n        except StopIteration:\n            self.fail(\"ax.bar raised StopIteration when passed only nan data.\")",
            "import numpy as np\nimport matplotlib.pyplot as plt\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_nan_data_in_bar(self):\n        try:\n            f, ax = plt.subplots()\n            ax.bar([np.nan], [np.nan])\n        except StopIteration:\n            self.fail(\"ax.bar raised StopIteration when passed only nan data.\")",
            "import numpy as np\nimport matplotlib.pyplot as plt\nimport unittest\n\nclass TestMatplotlib(unittest.TestCase):\n    def test_nan_data_in_bar(self):\n        try:\n            f, ax = plt.subplots()\n            ax.bar([np.nan], [np.nan])\n        except StopIteration:\n            self.fail(\"ax.bar raised StopIteration when passed only nan data.\")"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_contour.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-25332",
        "base_commit": "66ba515e671638971bd11a34cff12c107a437e0b",
        "patch": "diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -788,6 +788,19 @@ class Grouper:\n     def __init__(self, init=()):\n         self._mapping = {weakref.ref(x): [weakref.ref(x)] for x in init}\n \n+    def __getstate__(self):\n+        return {\n+            **vars(self),\n+            # Convert weak refs to strong ones.\n+            \"_mapping\": {k(): [v() for v in vs] for k, vs in self._mapping.items()},\n+        }\n+\n+    def __setstate__(self, state):\n+        vars(self).update(state)\n+        # Convert strong refs to weak ones.\n+        self._mapping = {weakref.ref(k): [*map(weakref.ref, vs)]\n+                         for k, vs in self._mapping.items()}\n+\n     def __contains__(self, item):\n         return weakref.ref(item) in self._mapping\n \n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -58,6 +58,7 @@ def _generate_complete_test_figure(fig_ref):\n     # Ensure lists also pickle correctly.\n     plt.subplot(3, 3, 1)\n     plt.plot(list(range(10)))\n+    plt.ylabel(\"hello\")\n \n     plt.subplot(3, 3, 2)\n     plt.contourf(data, hatches=['//', 'ooo'])\n@@ -68,6 +69,7 @@ def _generate_complete_test_figure(fig_ref):\n \n     plt.subplot(3, 3, 4)\n     plt.imshow(data)\n+    plt.ylabel(\"hello\\nworld!\")\n \n     plt.subplot(3, 3, 5)\n     plt.pcolor(data)\n@@ -89,6 +91,8 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+    fig_ref.align_ylabels()  # Test handling of _align_label_groups Groupers.\n+\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
        "problem_statement": "[Bug]: Unable to pickle figure with aligned labels\n### Bug summary\r\n\r\n Unable to pickle figure after calling `align_labels()`\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\n\r\nfig = plt.figure()\r\nax1 = fig.add_subplot(211)\r\nax2 = fig.add_subplot(212)\r\ntime=[0,1,2,3,4]\r\nspeed=[40000,4300,4500,4700,4800]\r\nacc=[10,11,12,13,14]\r\nax1.plot(time,speed)\r\nax1.set_ylabel('speed')\r\nax2.plot(time,acc)\r\nax2.set_ylabel('acc')\r\n\r\nfig.align_labels() ##pickling works after removing this line \r\n\r\npickle.dumps(fig)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n```\r\nalign.py\", line 16\r\npickle.dumps(fig)\r\nTypeError: cannot pickle 'weakref.ReferenceType' object\r\n```\r\n### Expected outcome\r\n\r\nPickling successful\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.7.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone\n",
        "hints_text": "As you've noted, pickling is pretty fragile.  Do you _need_ to pickle?  ",
        "created_at": "2023-02-26T11:18:40Z",
        "version": "3.7",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_pickle.py::test_complete[png]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_pickle.py::test_simple\", \"lib/matplotlib/tests/test_pickle.py::test_gcf\", \"lib/matplotlib/tests/test_pickle.py::test_no_pyplot\", \"lib/matplotlib/tests/test_pickle.py::test_renderer\", \"lib/matplotlib/tests/test_pickle.py::test_image\", \"lib/matplotlib/tests/test_pickle.py::test_polar\", \"lib/matplotlib/tests/test_pickle.py::test_transform\", \"lib/matplotlib/tests/test_pickle.py::test_rrulewrapper\", \"lib/matplotlib/tests/test_pickle.py::test_shared\", \"lib/matplotlib/tests/test_pickle.py::test_inset_and_secondary\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap0]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap1]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap2]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap3]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap4]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap5]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap6]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap7]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap8]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap9]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap10]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap11]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap12]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap13]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap14]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap15]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap16]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap17]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap18]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap19]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap20]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap21]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap22]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap23]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap24]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap25]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap26]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap27]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap28]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap29]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap30]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap31]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap32]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap33]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap34]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap35]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap36]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap37]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap38]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap39]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap40]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap41]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap42]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap43]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap44]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap45]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap46]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap47]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap48]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap49]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap50]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap51]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap52]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap53]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap54]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap55]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap56]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap57]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap58]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap59]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap60]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap61]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap62]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap63]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap64]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap65]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap66]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap67]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap68]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap69]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap70]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap71]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap72]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap73]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap74]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap75]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap76]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap77]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap78]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap79]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap80]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap81]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap82]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap83]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap84]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap85]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap86]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap87]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap88]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap89]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap90]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap91]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap92]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap93]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap94]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap95]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap96]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap97]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap98]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap99]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap100]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap101]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap102]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap103]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap104]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap105]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap106]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap107]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap108]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap109]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap110]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap111]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap112]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap113]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap114]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap115]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap116]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap117]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap118]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap119]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap120]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap121]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap122]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap123]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap124]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap125]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap126]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap127]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap128]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap129]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap130]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap131]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap132]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap133]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap134]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap135]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap136]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap137]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap138]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap139]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap140]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap141]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap142]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap143]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap144]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap145]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap146]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap147]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap148]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap149]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap150]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap151]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap152]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap153]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap154]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap155]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap156]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap157]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap158]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap159]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap160]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap161]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap162]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap163]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap164]\", \"lib/matplotlib/tests/test_pickle.py::test_cmap[cmap165]\", \"lib/matplotlib/tests/test_pickle.py::test_unpickle_canvas\", \"lib/matplotlib/tests/test_pickle.py::test_mpl_toolkits\", \"lib/matplotlib/tests/test_pickle.py::test_standard_norm\", \"lib/matplotlib/tests/test_pickle.py::test_dynamic_norm\", \"lib/matplotlib/tests/test_pickle.py::test_vertexselector\"]",
        "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
        "generated_tests": [
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickling(unittest.TestCase):\n    def test_pickle_figure_with_aligned_labels(self):\n        fig = plt.figure()\n        ax1 = fig.add_subplot(211)\n        ax2 = fig.add_subplot(212)\n        time=[0,1,2,3,4]\n        speed=[40000,4300,4500,4700,4800]\n        acc=[10,11,12,13,14]\n        ax1.plot(time,speed)\n        ax1.set_ylabel('speed')\n        ax2.plot(time,acc)\n        ax2.set_ylabel('acc')\n\n        fig.align_labels() \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertEqual(result, True, \"Unable to pickle figure with aligned labels\")",
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickleFigure(unittest.TestCase):\n    def test_pickle_figure_with_aligned_labels(self):\n        fig = plt.figure()\n        ax1 = fig.add_subplot(211)\n        ax2 = fig.add_subplot(212)\n        time=[0,1,2,3,4]\n        speed=[40000,4300,4500,4700,4800]\n        acc=[10,11,12,13,14]\n        ax1.plot(time,speed)\n        ax1.set_ylabel('speed')\n        ax2.plot(time,acc)\n        ax2.set_ylabel('acc')\n\n        fig.align_labels() \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertTrue(result, \"Unable to pickle figure with aligned labels\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickling(unittest.TestCase):\n    def test_pickle_figure_with_aligned_labels(self):\n        fig = plt.figure()\n        ax1 = fig.add_subplot(211)\n        ax2 = fig.add_subplot(212)\n        time=[0,1,2,3,4]\n        speed=[40000,4300,4500,4700,4800]\n        acc=[10,11,12,13,14]\n        ax1.plot(time,speed)\n        ax1.set_ylabel('speed')\n        ax2.plot(time,acc)\n        ax2.set_ylabel('acc')\n\n        fig.align_labels() \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertEqual(result, True, \"Unable to pickle figure with aligned labels\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickling(unittest.TestCase):\n    def test_pickle_figure_with_aligned_labels(self):\n        fig = plt.figure()\n        ax1 = fig.add_subplot(211)\n        ax2 = fig.add_subplot(212)\n        time=[0,1,2,3,4]\n        speed=[40000,4300,4500,4700,4800]\n        acc=[10,11,12,13,14]\n        ax1.plot(time,speed)\n        ax1.set_ylabel('speed')\n        ax2.plot(time,acc)\n        ax2.set_ylabel('acc')\n\n        fig.align_labels() \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertEqual(result, True, \"Unable to pickle figure with aligned labels\")",
            "import unittest\nimport matplotlib.pyplot as plt\nimport pickle\n\nclass TestPickleFigure(unittest.TestCase):\n    def test_pickle_figure_with_aligned_labels(self):\n        fig = plt.figure()\n        ax1 = fig.add_subplot(211)\n        ax2 = fig.add_subplot(212)\n        time=[0,1,2,3,4]\n        speed=[40000,4300,4500,4700,4800]\n        acc=[10,11,12,13,14]\n        ax1.plot(time,speed)\n        ax1.set_ylabel('speed')\n        ax2.plot(time,acc)\n        ax2.set_ylabel('acc')\n\n        fig.align_labels() \n\n        try:\n            pickle.dumps(fig)\n            result = True\n        except TypeError:\n            result = False\n\n        self.assertEqual(result, True, \"Unable to pickle figure with aligned labels\")"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_pickle.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-24265",
        "base_commit": "e148998d9bed9d1b53a91587ad48f9bb43c7737f",
        "patch": "diff --git a/lib/matplotlib/style/core.py b/lib/matplotlib/style/core.py\n--- a/lib/matplotlib/style/core.py\n+++ b/lib/matplotlib/style/core.py\n@@ -43,6 +43,32 @@ class __getattr__:\n     'toolbar', 'timezone', 'figure.max_open_warning',\n     'figure.raise_window', 'savefig.directory', 'tk.window_focus',\n     'docstring.hardcopy', 'date.epoch'}\n+_DEPRECATED_SEABORN_STYLES = {\n+    s: s.replace(\"seaborn\", \"seaborn-v0_8\")\n+    for s in [\n+        \"seaborn\",\n+        \"seaborn-bright\",\n+        \"seaborn-colorblind\",\n+        \"seaborn-dark\",\n+        \"seaborn-darkgrid\",\n+        \"seaborn-dark-palette\",\n+        \"seaborn-deep\",\n+        \"seaborn-muted\",\n+        \"seaborn-notebook\",\n+        \"seaborn-paper\",\n+        \"seaborn-pastel\",\n+        \"seaborn-poster\",\n+        \"seaborn-talk\",\n+        \"seaborn-ticks\",\n+        \"seaborn-white\",\n+        \"seaborn-whitegrid\",\n+    ]\n+}\n+_DEPRECATED_SEABORN_MSG = (\n+    \"The seaborn styles shipped by Matplotlib are deprecated since %(since)s, \"\n+    \"as they no longer correspond to the styles shipped by seaborn. However, \"\n+    \"they will remain available as 'seaborn-v0_8-<style>'. Alternatively, \"\n+    \"directly use the seaborn API instead.\")\n \n \n def _remove_blacklisted_style_params(d, warn=True):\n@@ -113,31 +139,9 @@ def use(style):\n     def fix_style(s):\n         if isinstance(s, str):\n             s = style_alias.get(s, s)\n-            if s in [\n-                \"seaborn\",\n-                \"seaborn-bright\",\n-                \"seaborn-colorblind\",\n-                \"seaborn-dark\",\n-                \"seaborn-darkgrid\",\n-                \"seaborn-dark-palette\",\n-                \"seaborn-deep\",\n-                \"seaborn-muted\",\n-                \"seaborn-notebook\",\n-                \"seaborn-paper\",\n-                \"seaborn-pastel\",\n-                \"seaborn-poster\",\n-                \"seaborn-talk\",\n-                \"seaborn-ticks\",\n-                \"seaborn-white\",\n-                \"seaborn-whitegrid\",\n-            ]:\n-                _api.warn_deprecated(\n-                    \"3.6\", message=\"The seaborn styles shipped by Matplotlib \"\n-                    \"are deprecated since %(since)s, as they no longer \"\n-                    \"correspond to the styles shipped by seaborn. However, \"\n-                    \"they will remain available as 'seaborn-v0_8-<style>'. \"\n-                    \"Alternatively, directly use the seaborn API instead.\")\n-                s = s.replace(\"seaborn\", \"seaborn-v0_8\")\n+            if s in _DEPRECATED_SEABORN_STYLES:\n+                _api.warn_deprecated(\"3.6\", message=_DEPRECATED_SEABORN_MSG)\n+                s = _DEPRECATED_SEABORN_STYLES[s]\n         return s\n \n     for style in map(fix_style, styles):\n@@ -244,17 +248,26 @@ def update_nested_dict(main_dict, new_dict):\n     return main_dict\n \n \n+class _StyleLibrary(dict):\n+    def __getitem__(self, key):\n+        if key in _DEPRECATED_SEABORN_STYLES:\n+            _api.warn_deprecated(\"3.6\", message=_DEPRECATED_SEABORN_MSG)\n+            key = _DEPRECATED_SEABORN_STYLES[key]\n+\n+        return dict.__getitem__(self, key)\n+\n+\n # Load style library\n # ==================\n _base_library = read_style_directory(BASE_LIBRARY_PATH)\n-library = None\n+library = _StyleLibrary()\n available = []\n \n \n def reload_library():\n     \"\"\"Reload the style library.\"\"\"\n-    global library\n-    library = update_user_library(_base_library)\n+    library.clear()\n+    library.update(update_user_library(_base_library))\n     available[:] = sorted(library.keys())\n \n \n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_style.py b/lib/matplotlib/tests/test_style.py\n--- a/lib/matplotlib/tests/test_style.py\n+++ b/lib/matplotlib/tests/test_style.py\n@@ -184,6 +184,8 @@ def test_deprecated_seaborn_styles():\n     with pytest.warns(mpl._api.MatplotlibDeprecationWarning):\n         mpl.style.use(\"seaborn-bright\")\n     assert mpl.rcParams == seaborn_bright\n+    with pytest.warns(mpl._api.MatplotlibDeprecationWarning):\n+        mpl.style.library[\"seaborn-bright\"]\n \n \n def test_up_to_date_blacklist():\n",
        "problem_statement": "[Bug]: Setting matplotlib.pyplot.style.library['seaborn-colorblind'] result in key error on matplotlib v3.6.1\n### Bug summary\n\nI have code that executes:\r\n```\r\nimport matplotlib.pyplot as plt\r\nthe_rc = plt.style.library[\"seaborn-colorblind\"]\r\n```\r\n\r\nUsing version 3.4.3 of matplotlib, this works fine. I recently installed my code on a machine with matplotlib version 3.6.1 and upon importing my code, this generated a key error for line `the_rc = plt.style.library[\"seaborn-colorblind\"]` saying \"seaborn-colorblind\" was a bad key.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nthe_rc = plt.style.library[\"seaborn-colorblind\"]\n```\n\n\n### Actual outcome\n\nTraceback (most recent call last):\r\nKeyError: 'seaborn-colorblind'\n\n### Expected outcome\n\nseaborn-colorblind should be set as the matplotlib library style and I should be able to continue plotting with that style.\n\n### Additional information\n\n- Bug occurs with matplotlib version 3.6.1\r\n- Bug does not occur with matplotlib version 3.4.3\r\n- Tested on MacOSX and Ubuntu (same behavior on both)\n\n### Operating system\n\nOS/X\n\n### Matplotlib Version\n\n3.6.1\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\n3.9.7\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n",
        "hints_text": "",
        "created_at": "2022-10-25T02:03:19Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_style.py::test_deprecated_seaborn_styles\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_style.py::test_invalid_rc_warning_includes_filename\", \"lib/matplotlib/tests/test_style.py::test_available\", \"lib/matplotlib/tests/test_style.py::test_use\", \"lib/matplotlib/tests/test_style.py::test_use_url\", \"lib/matplotlib/tests/test_style.py::test_single_path\", \"lib/matplotlib/tests/test_style.py::test_context\", \"lib/matplotlib/tests/test_style.py::test_context_with_dict\", \"lib/matplotlib/tests/test_style.py::test_context_with_dict_after_namedstyle\", \"lib/matplotlib/tests/test_style.py::test_context_with_dict_before_namedstyle\", \"lib/matplotlib/tests/test_style.py::test_context_with_union_of_dict_and_namedstyle\", \"lib/matplotlib/tests/test_style.py::test_context_with_badparam\", \"lib/matplotlib/tests/test_style.py::test_alias[mpl20]\", \"lib/matplotlib/tests/test_style.py::test_alias[mpl15]\", \"lib/matplotlib/tests/test_style.py::test_xkcd_no_cm\", \"lib/matplotlib/tests/test_style.py::test_xkcd_cm\", \"lib/matplotlib/tests/test_style.py::test_up_to_date_blacklist\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
        "generated_tests": [
            "import matplotlib.pyplot as plt\nimport unittest\n\nclass TestMatplotlibStyle(unittest.TestCase):\n    def test_seaborn_colorblind_style(self):\n        try:\n            the_rc = plt.style.library[\"seaborn-colorblind\"]\n        except KeyError:\n            self.fail(\"KeyError raised for seaborn-colorblind style in matplotlib v3.6.1\")",
            "import unittest\nimport matplotlib.pyplot as plt\n\nclass TestMatplotlibStyle(unittest.TestCase):\n    def test_seaborn_colorblind_style(self):\n        try:\n            the_rc = plt.style.library[\"seaborn-colorblind\"]\n            self.assertTrue(True)\n        except KeyError:\n            self.fail(\"KeyError raised for seaborn-colorblind style\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import matplotlib.pyplot as plt\nimport unittest\n\nclass TestMatplotlibStyle(unittest.TestCase):\n    def test_seaborn_colorblind_style(self):\n        try:\n            the_rc = plt.style.library[\"seaborn-colorblind\"]\n        except KeyError:\n            self.fail(\"KeyError raised for seaborn-colorblind style in matplotlib v3.6.1\")",
            "import matplotlib.pyplot as plt\nimport unittest\n\nclass TestMatplotlibStyle(unittest.TestCase):\n    def test_seaborn_colorblind_style(self):\n        try:\n            the_rc = plt.style.library[\"seaborn-colorblind\"]\n        except KeyError:\n            self.fail(\"KeyError raised for seaborn-colorblind style in matplotlib v3.6.1\")",
            "import matplotlib.pyplot as plt\nimport unittest\n\nclass TestMatplotlibStyle(unittest.TestCase):\n    def test_seaborn_colorblind_style(self):\n        try:\n            the_rc = plt.style.library[\"seaborn-colorblind\"]\n            self.assertTrue(True)\n        except KeyError:\n            self.fail(\"KeyError raised for 'seaborn-colorblind' style\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_style.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-24970",
        "base_commit": "a3011dfd1aaa2487cce8aa7369475533133ef777",
        "patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -715,16 +715,17 @@ def __call__(self, X, alpha=None, bytes=False):\n         if not xa.dtype.isnative:\n             xa = xa.byteswap().newbyteorder()  # Native byteorder is faster.\n         if xa.dtype.kind == \"f\":\n-            with np.errstate(invalid=\"ignore\"):\n-                xa *= self.N\n-                # Negative values are out of range, but astype(int) would\n-                # truncate them towards zero.\n-                xa[xa < 0] = -1\n-                # xa == 1 (== N after multiplication) is not out of range.\n-                xa[xa == self.N] = self.N - 1\n-                # Avoid converting large positive values to negative integers.\n-                np.clip(xa, -1, self.N, out=xa)\n-                xa = xa.astype(int)\n+            xa *= self.N\n+            # Negative values are out of range, but astype(int) would\n+            # truncate them towards zero.\n+            xa[xa < 0] = -1\n+            # xa == 1 (== N after multiplication) is not out of range.\n+            xa[xa == self.N] = self.N - 1\n+            # Avoid converting large positive values to negative integers.\n+            np.clip(xa, -1, self.N, out=xa)\n+        with np.errstate(invalid=\"ignore\"):\n+            # We need this cast for unsigned ints as well as floats\n+            xa = xa.astype(int)\n         # Set the over-range indices before the under-range;\n         # otherwise the under-range values get converted to over-range.\n         xa[xa > self.N - 1] = self._i_over\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -30,6 +30,13 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype(dtype):\n+    # We use subtraction in the indexing, so need to verify that uint8 works\n+    cm = mpl.colormaps[\"viridis\"]\n+    assert_array_equal(cm(dtype(0)), cm(0))\n+\n+\n def test_resampled():\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n",
        "problem_statement": "[Bug]: NumPy 1.24 deprecation warnings\n### Bug summary\r\n\r\nStarting NumPy 1.24 I observe several deprecation warnings.\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nplt.get_cmap()(np.empty((0, ), dtype=np.uint8))\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\n/usr/lib/python3.10/site-packages/matplotlib/colors.py:730: DeprecationWarning: NumPy will stop allowing conversion of out-of-bound Python integers to integer arrays.  The conversion of 257 to uint8 will fail in the future.\r\nFor the old behavior, usually:\r\n    np.array(value).astype(dtype)`\r\nwill give the desired result (the cast overflows).\r\n  xa[xa > self.N - 1] = self._i_over\r\n/usr/lib/python3.10/site-packages/matplotlib/colors.py:731: DeprecationWarning: NumPy will stop allowing conversion of out-of-bound Python integers to integer arrays.  The conversion of 256 to uint8 will fail in the future.\r\nFor the old behavior, usually:\r\n    np.array(value).astype(dtype)`\r\nwill give the desired result (the cast overflows).\r\n  xa[xa < 0] = self._i_under\r\n/usr/lib/python3.10/site-packages/matplotlib/colors.py:732: DeprecationWarning: NumPy will stop allowing conversion of out-of-bound Python integers to integer arrays.  The conversion of 258 to uint8 will fail in the future.\r\nFor the old behavior, usually:\r\n    np.array(value).astype(dtype)`\r\nwill give the desired result (the cast overflows).\r\n  xa[mask_bad] = self._i_bad\r\n```\r\n\r\n### Expected outcome\r\n\r\nNo warnings.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nArchLinux\r\n\r\n### Matplotlib Version\r\n\r\n3.6.2\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\nPython 3.10.9\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nLinux package manager\n",
        "hints_text": "Thanks for the report! Unfortunately I can't reproduce this. What version of numpy are you using when the warning appears?\nSorry, forgot to mention that you need to enable the warnings during normal execution, e.g., `python -W always <file>.py`. In my case, the warnings are issued during `pytest` run which seems to activate these warnings by default.\r\n\r\nAs for the NumPy version, I'm running\r\n```console\r\n$ python -c 'import numpy; print(numpy.__version__)'\r\n1.24.0\r\n```\nThanks, I can now reproduce \ud83d\ude04 \nThe problem is that there are three more values, that are by default out of range in this case, to note specific cases:\r\nhttps://github.com/matplotlib/matplotlib/blob/8d2329ad89120410d7ef04faddba2c51db743b06/lib/matplotlib/colors.py#L673-L675\r\n(N = 256 by default)\r\n\r\nThese are then assigned to out-of-range and masked/bad values here:\r\nhttps://github.com/matplotlib/matplotlib/blob/8d2329ad89120410d7ef04faddba2c51db743b06/lib/matplotlib/colors.py#L730-L732\r\nwhich now raises a deprecation warning.\r\n\r\nI think that one way forward would be to check the type of `xa` for int/uint and in that case take modulo the maximum value for `self._i_over` etc. This is basically what happens now anyway, but we need to do it explicitly rather than relying on numpy doing it. (I cannot really see how this makes sense from a color perspective, but we will at least keep the current behavior.)\nI think this is exposing a real bug that we need to promote the input data to be bigger than uint8.  What we are doing here is buildin a lookup up table, the first N entries are for for values into the actually color map and then the next 3 entries are the special cases for over/under/bad so `xa` needs to be big enough to hold `self.N + 2` as values.\nI don't know if this is a bigger bug or not, but I would like us to have fixed any deprecation warnings from dependencies before 3.7 is out (or if necessary a quick 3.7.1.)",
        "created_at": "2023-01-13T14:23:39Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colors.py::test_index_dtype[uint8]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[5-result0]\", \"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[2-result1]\", \"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[1-result2]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[int]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[float16]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[float]\", \"lib/matplotlib/tests/test_colors.py::test_resampled\", \"lib/matplotlib/tests/test_colors.py::test_register_cmap\", \"lib/matplotlib/tests/test_colors.py::test_colormaps_get_cmap\", \"lib/matplotlib/tests/test_colors.py::test_unregister_builtin_cmap\", \"lib/matplotlib/tests/test_colors.py::test_colormap_copy\", \"lib/matplotlib/tests/test_colors.py::test_colormap_equals\", \"lib/matplotlib/tests/test_colors.py::test_colormap_endian\", \"lib/matplotlib/tests/test_colors.py::test_colormap_invalid\", \"lib/matplotlib/tests/test_colors.py::test_colormap_return_types\", \"lib/matplotlib/tests/test_colors.py::test_BoundaryNorm\", \"lib/matplotlib/tests/test_colors.py::test_CenteredNorm\", \"lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[-1-2]\", \"lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[3-1]\", \"lib/matplotlib/tests/test_colors.py::test_LogNorm\", \"lib/matplotlib/tests/test_colors.py::test_LogNorm_inverse\", \"lib/matplotlib/tests/test_colors.py::test_PowerNorm\", \"lib/matplotlib/tests/test_colors.py::test_PowerNorm_translation_invariance\", \"lib/matplotlib/tests/test_colors.py::test_Normalize\", \"lib/matplotlib/tests/test_colors.py::test_FuncNorm\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmin\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scale\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center_max\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Even\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Odd\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminEqualsVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VmaxEqualsVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminGTVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_TwoSlopeNorm_VminGTVmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VcenterGTVmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_premature_scaling\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm_colorbar\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm_single_zero\", \"lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_init\", \"lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_norm\", \"lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors[png]\", \"lib/matplotlib/tests/test_colors.py::test_boundarynorm_and_colorbarbase[png]\", \"lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors2\", \"lib/matplotlib/tests/test_colors.py::test_rgb_hsv_round_trip\", \"lib/matplotlib/tests/test_colors.py::test_autoscale_masked\", \"lib/matplotlib/tests/test_colors.py::test_light_source_topo_surface[png]\", \"lib/matplotlib/tests/test_colors.py::test_light_source_shading_default\", \"lib/matplotlib/tests/test_colors.py::test_light_source_shading_empty_mask\", \"lib/matplotlib/tests/test_colors.py::test_light_source_masked_shading\", \"lib/matplotlib/tests/test_colors.py::test_light_source_hillshading\", \"lib/matplotlib/tests/test_colors.py::test_light_source_planar_hillshading\", \"lib/matplotlib/tests/test_colors.py::test_color_names\", \"lib/matplotlib/tests/test_colors.py::test_pandas_iterable\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter_r]\", \"lib/matplotlib/tests/test_colors.py::test_has_alpha_channel\", \"lib/matplotlib/tests/test_colors.py::test_cn\", \"lib/matplotlib/tests/test_colors.py::test_conversions\", \"lib/matplotlib/tests/test_colors.py::test_conversions_masked\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_single_str\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_alpha_array\", \"lib/matplotlib/tests/test_colors.py::test_failed_conversions\", \"lib/matplotlib/tests/test_colors.py::test_grey_gray\", \"lib/matplotlib/tests/test_colors.py::test_tableau_order\", \"lib/matplotlib/tests/test_colors.py::test_ndarray_subclass_norm\", \"lib/matplotlib/tests/test_colors.py::test_same_color\", \"lib/matplotlib/tests/test_colors.py::test_hex_shorthand_notation\", \"lib/matplotlib/tests/test_colors.py::test_repr_png\", \"lib/matplotlib/tests/test_colors.py::test_repr_html\", \"lib/matplotlib/tests/test_colors.py::test_get_under_over_bad\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[over]\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[under]\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[bad]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_alpha_array\", \"lib/matplotlib/tests/test_colors.py::test_colormap_bad_data_with_alpha\", \"lib/matplotlib/tests/test_colors.py::test_2d_to_rgba\", \"lib/matplotlib/tests/test_colors.py::test_set_dict_to_rgba\", \"lib/matplotlib/tests/test_colors.py::test_norm_deepcopy\", \"lib/matplotlib/tests/test_colors.py::test_norm_callback\", \"lib/matplotlib/tests/test_colors.py::test_scalarmappable_norm_update\", \"lib/matplotlib/tests/test_colors.py::test_norm_update_figs[png]\", \"lib/matplotlib/tests/test_colors.py::test_norm_update_figs[pdf]\", \"lib/matplotlib/tests/test_colors.py::test_make_norm_from_scale_name\", \"lib/matplotlib/tests/test_colors.py::test_color_sequences\", \"lib/matplotlib/tests/test_colors.py::test_cm_set_cmap_error\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
        "generated_tests": [
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\n\nclass TestDeprecationWarnings(unittest.TestCase):\n    def test_deprecation_warnings(self):\n        with warnings.catch_warnings(record=True) as w:\n            # Cause all warnings to always be triggered.\n            warnings.simplefilter(\"always\")\n            # Trigger a warning.\n            plt.get_cmap()(np.empty((0, ), dtype=np.uint8))\n            # Verify no warnings\n            self.assertEqual(len(w), 0, \"Deprecation warnings were triggered\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\n\nclass TestDeprecationWarnings(unittest.TestCase):\n    def test_numpy_deprecation_warnings(self):\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            plt.get_cmap()(np.empty((0, ), dtype=np.uint8))\n            self.assertEqual(len(w), 0, \"Deprecation warnings were triggered\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\n\nclass TestDeprecationWarnings(unittest.TestCase):\n    def test_numpy_deprecation_warnings(self):\n        with warnings.catch_warnings(record=True) as w:\n            # Cause all warnings to always be triggered.\n            warnings.simplefilter(\"always\")\n            # Trigger a warning.\n            plt.get_cmap()(np.empty((0, ), dtype=np.uint8))\n            # Verify no warnings were triggered\n            self.assertEqual(len(w), 0, \"Deprecation warnings were triggered\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\n\nclass TestDeprecationWarnings(unittest.TestCase):\n    def test_numpy_deprecation_warnings(self):\n        with warnings.catch_warnings(record=True) as w:\n            # Cause all warnings to always be triggered.\n            warnings.simplefilter(\"always\")\n            # Trigger a warning.\n            plt.get_cmap()(np.empty((0, ), dtype=np.uint8))\n            # Verify no warnings were triggered\n            self.assertEqual(len(w), 0, \"Deprecation warnings were triggered\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\n\nclass TestDeprecationWarnings(unittest.TestCase):\n    def test_numpy_deprecation_warnings(self):\n        with warnings.catch_warnings(record=True) as w:\n            # Cause all warnings to always be triggered.\n            warnings.simplefilter(\"always\")\n            # Trigger a warning.\n            plt.get_cmap()(np.empty((0, ), dtype=np.uint8))\n            # Verify no warnings were triggered\n            self.assertEqual(len(w), 0, \"Deprecation warnings were triggered\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_rcparams.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-23314",
        "base_commit": "97fc1154992f64cfb2f86321155a7404efeb2d8a",
        "patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -387,6 +387,8 @@ def apply_aspect(self, position=None):\n \n     @martist.allow_rasterization\n     def draw(self, renderer):\n+        if not self.get_visible():\n+            return\n         self._unstale_viewLim()\n \n         # draw the background patch\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -45,6 +45,12 @@\n #       the tests with multiple threads.\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_axes(fig_test, fig_ref):\n+    ax = fig_test.subplots()\n+    ax.set_visible(False)\n+\n+\n def test_get_labels():\n     fig, ax = plt.subplots()\n     ax.set_xlabel('x label')\n@@ -7319,7 +7325,7 @@ def test_redraw_in_frame():\n     ax.redraw_in_frame()\n \n \n-def test_invisible_axes():\n+def test_invisible_axes_events():\n     # invisible axes should not respond to events...\n     fig, ax = plt.subplots()\n     assert fig.canvas.inaxes((200, 200)) is not None\ndiff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,12 @@\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_axes(fig_test, fig_ref):\n+    ax = fig_test.subplots(subplot_kw=dict(projection='3d'))\n+    ax.set_visible(False)\n+\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
        "problem_statement": "[Bug]: set_visible() not working for 3d projection \n### Bug summary\r\n\r\nin the subplot projection=\"3d\" the set_visible function doesn't work even if the value is set to False\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.gridspec import GridSpec\r\n\r\nfig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\r\nax1.scatter(1,1,1)\r\nax2.scatter(1,1,1, c='r')\r\nax1.set_visible(False)\r\n\r\nplt.show()\r\n# Thanks Tim for your help! \r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nthe subplot remains visible which should not happen if the value is set to False\r\n\r\n### Expected outcome\r\n\r\nthe subplot is not visible if the value is set to False\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.4.2\r\n\r\n### Matplotlib Backend\r\n\r\nQt5Agg\r\n\r\n### Python version\r\n\r\n3.8.10\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\n_No response_\n",
        "hints_text": "Please try to boil down the problem to a minimal example when reporting issues.\r\n\r\nI've now done that for you:\r\n```\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.gridspec import GridSpec\r\n\r\nfig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\r\nax1.scatter(1,1,1)\r\nax2.scatter(1,1,1, c='r')\r\nax1.set_visible(False)\r\n\r\nplt.show()\r\n```\r\n**Output**\r\n![grafik](https://user-images.githubusercontent.com/2836374/174673179-f5b14df5-7689-49eb-995a-4c97e31c3c43.png)\r\n\r\n**Expected**\r\nThe left axes should be invisible.\r\n",
        "created_at": "2022-06-21T02:41:34Z",
        "version": "3.5",
        "FAIL_TO_PASS": "[\"lib/mpl_toolkits/tests/test_mplot3d.py::test_invisible_axes[png]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_shift\", \"lib/matplotlib/tests/test_axes.py::test_acorr[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_matshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_cla_not_redefined\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_arrow_in_view\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_annotate_signature\", \"lib/matplotlib/tests/test_axes.py::test_fill_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_single_date[png]\", \"lib/matplotlib/tests/test_axes.py::test_shaped_data[png]\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[png]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_axes.py::test_markevery[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_nan_bar_values\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_regression\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_float16\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]\", \"lib/matplotlib/tests/test_axes.py::test_stairs[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_update[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_empty\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2\", \"lib/matplotlib/tests/test_axes.py::test_stairs_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error\", \"lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_log_scales\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_no_data\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_invalid\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid\", \"lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_args\", \"lib/matplotlib/tests/test_axes.py::test_vlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_default\", \"lib/matplotlib/tests/test_axes.py::test_hlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_hlines_default\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_fs_none\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd[png]\", \"lib/matplotlib/tests/test_axes.py::test_spectrum[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases\", \"lib/matplotlib/tests/test_axes.py::test_twin_remove[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]\", \"lib/matplotlib/tests/test_axes.py::test_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_shared_aspect_error\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_method_errors\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_default[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values\", \"lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie\", \"lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc\", \"lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Must\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_set_xy_bound\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_bad_plot_args\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_shared_bool\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks_log\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates\", \"lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing\", \"lib/matplotlib/tests/test_axes.py::test_pandas_index_shape\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist\", \"lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center\", \"lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titletwiny\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[left\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[center\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[both\", \"lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_offset_text_visible\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_inset\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_inset_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_inset_projection\", \"lib/matplotlib/tests/test_axes.py::test_inset_subclass\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan\", \"lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_secondary_minorloc\", \"lib/matplotlib/tests/test_axes.py::test_secondary_formatter\", \"lib/matplotlib/tests/test_axes.py::test_secondary_repr\", \"lib/matplotlib/tests/test_axes.py::test_normal_axes\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\", \"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\", \"lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position\", \"lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init\", \"lib/matplotlib/tests/test_axes.py::test_redraw_in_frame\", \"lib/matplotlib/tests/test_axes.py::test_invisible_axes_events\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]\", \"lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]\", \"lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions\", \"lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_retick\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_center\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_labels\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted\", \"lib/matplotlib/tests/test_axes.py::test_nan_barlabels\", \"lib/matplotlib/tests/test_axes.py::test_patch_bounds\", \"lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_artist_sublists\", \"lib/matplotlib/tests/test_axes.py::test_empty_line_plots\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format\", \"lib/matplotlib/tests/test_axes.py::test_automatic_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_errors\", \"lib/matplotlib/tests/test_axes.py::test_clim\", \"lib/matplotlib/tests/test_axes.py::test_bezier_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_get_xticklabel\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_aspect_equal_error\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_colors\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_notshaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_lightsource\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_fill[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-both-levels0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-min-levels1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-max-levels2]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tricontour[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d_1d_input\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsubplots[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tight_layout_text[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_color[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-True]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-False]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png--50]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png-130]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_view_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_3d_from_2d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked_strides[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerocstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerorstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerostrideraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsamplesraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_empty[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_modification\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_collection_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_verts_validation\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_closed[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly_collection_2d_to_3d_empty\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_array[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_labelpad[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_cla[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plotsurface_1d_raises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_transform\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_rot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_world\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists_nowarning\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_autoscale\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length_checks\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_isometric[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_simple[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_edge_style[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_named_colors[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_rgb_data[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_xyz[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_calling_conventions\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_line3d_set_get_data_3d\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted_cla\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ax3d_tickcolour\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ticklabel_format[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3D_smoke[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_minor_ticks[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d_errorevery[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_stem3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_equal_box_aspect[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_colorbar_pos\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_shared_axes_retick\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_pan\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scalarmap_update[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_subfigure_simple\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_computed_zorder[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter_spiral[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[z-proj_expected0-axis_lines_expected0-tickdirs_expected0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[y-proj_expected1-axis_lines_expected1-tickdirs_expected1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[x-proj_expected2-axis_lines_expected2-tickdirs_expected2]\"]",
        "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
        "generated_tests": [
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\nclass TestSetVisible(unittest.TestCase):\n    def test_set_visible(self):\n        fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n        ax1.scatter(1,1,1)\n        ax2.scatter(1,1,1, c='r')\n        ax1.set_visible(False)\n        self.assertFalse(ax1.get_visible(), \"The subplot should not be visible if the value is set to False\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\nclass TestSetVisible(unittest.TestCase):\n    def test_set_visible(self):\n        fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n        ax1.scatter(1,1,1)\n        ax2.scatter(1,1,1, c='r')\n        ax1.set_visible(False)\n        self.assertFalse(ax1.get_visible(), \"The subplot should not be visible\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\nclass TestSetVisible(unittest.TestCase):\n    def test_set_visible(self):\n        fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n        ax1.scatter(1,1,1)\n        ax2.scatter(1,1,1, c='r')\n        ax1.set_visible(False)\n        self.assertFalse(ax1.get_visible(), \"The subplot should not be visible\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\nclass TestSetVisible(unittest.TestCase):\n    def test_set_visible(self):\n        fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n        ax1.scatter(1,1,1)\n        ax2.scatter(1,1,1, c='r')\n        ax1.set_visible(False)\n        self.assertFalse(ax1.get_visible(), \"The subplot should not be visible\")\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\nclass TestSetVisible(unittest.TestCase):\n    def test_set_visible(self):\n        fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n        ax1.scatter(1,1,1)\n        ax2.scatter(1,1,1, c='r')\n        ax1.set_visible(False)\n        self.assertFalse(ax1.get_visible(), \"The subplot should not be visible if the value is set to False\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/mpl_toolkits/tests/test_mplot3d.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-23913",
        "base_commit": "5c4595267ccd3daf78f5fd05693b7ecbcd575c1e",
        "patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -286,6 +286,9 @@ def _update_bbox_to_anchor(self, loc_in_canvas):\n     The custom dictionary mapping instances or types to a legend\n     handler. This *handler_map* updates the default handler map\n     found at `matplotlib.legend.Legend.get_legend_handler_map`.\n+\n+draggable : bool, default: False\n+    Whether the legend can be dragged with the mouse.\n \"\"\")\n \n \n@@ -342,7 +345,8 @@ def __init__(\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n         *,\n-        ncol=1  # synonym for ncols (backward compatibility)\n+        ncol=1,  # synonym for ncols (backward compatibility)\n+        draggable=False  # whether the legend can be dragged with the mouse\n     ):\n         \"\"\"\n         Parameters\n@@ -537,7 +541,9 @@ def val_or_rc(val, rc_name):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n+\n         self._draggable = None\n+        self.set_draggable(state=draggable)\n \n         # set the text color\n \n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -783,6 +783,14 @@ def test_get_set_draggable():\n     assert not legend.get_draggable()\n \n \n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+\n def test_alpha_handles():\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n     legend = plt.legend()\n",
        "problem_statement": "legend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n",
        "hints_text": "This seems like a reasonable request, you're welcome to submit a PR :-)  Note that the same comment applies to annotations.\r\nI would also deprecate `draggable()` in favor of the more classic `set_draggable()`, `get_draggable()` (and thus, in the long-term future, `.draggable` could become a property).",
        "created_at": "2022-09-16T21:51:24Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_legend_draggable[True]\", \"lib/matplotlib/tests/test_legend.py::test_legend_draggable[False]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_legend_ordereddict\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[png]\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore\", \"lib/matplotlib/tests/test_legend.py::test_labels_first[png]\", \"lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[png]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_rc[png]\", \"lib/matplotlib/tests/test_legend.py::test_rc[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[png]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_remove\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs\", \"lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]\", \"lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend\", \"lib/matplotlib/tests/test_legend.py::test_nanscatter\", \"lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]\", \"lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes\", \"lib/matplotlib/tests/test_legend.py::test_handler_numpoints\", \"lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning\", \"lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend\", \"lib/matplotlib/tests/test_legend.py::test_shadow_framealpha\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_empty\", \"lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent\", \"lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_get_set_draggable\", \"lib/matplotlib/tests/test_legend.py::test_alpha_handles\", \"lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc\", \"lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception\", \"lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_text_axes\", \"lib/matplotlib/tests/test_legend.py::test_handlerline2d\", \"lib/matplotlib/tests/test_legend.py::test_subfigure_legend\", \"lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color\", \"lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
        "generated_tests": [
            "import matplotlib.pyplot as plt\nimport pytest\n\nclass TestLegendDraggable:\n    def test_draggable_keyword(self):\n        fig, ax = plt.subplots()\n        ax.plot([1, 2, 3], label='Test')\n        legend = ax.legend(draggable=True)\n\n        assert hasattr(legend, 'draggable'), \"Legend object does not have 'draggable' attribute\"\n        assert legend.draggable, \"Legend object 'draggable' attribute is not set to True\"\n\n        # Simulate dragging event and check if legend position changes\n        initial_pos = legend.get_window_extent()\n        legend.mouseover_set(True)\n        legend._draggable.on_press(event)\n        legend._draggable.on_motion(event)\n        legend._draggable.on_release(event)\n        final_pos = legend.get_window_extent()\n\n        assert initial_pos != final_pos, \"Legend position did not change after dragging event\"",
            "import matplotlib.pyplot as plt\nimport pytest\n\nclass TestLegendDraggable:\n    def test_draggable_keyword(self):\n        fig, ax = plt.subplots()\n        ax.plot([1, 2, 3], label='Test')\n        legend = ax.legend(draggable=True)\n\n        assert hasattr(legend, 'draggable'), \"Legend object does not have 'draggable' attribute\"\n        assert legend.draggable, \"Legend object's 'draggable' attribute is not set to True\"\n\n        # Simulate dragging event and check if legend position changes\n        initial_pos = legend.get_window_extent()\n        legend.draggable.on_mouse_release(legend.draggable, 100, 100)\n        final_pos = legend.get_window_extent()\n\n        assert initial_pos != final_pos, \"Legend position did not change after dragging event\"",
            "import unittest\nfrom matplotlib import pyplot as plt\n\nclass TestLegendDraggable(unittest.TestCase):\n    def test_legend_draggable_keyword(self):\n        fig, ax = plt.subplots()\n        ax.plot([1, 2, 3], label='Test')\n        legend = ax.legend(draggable=True)\n        self.assertTrue(legend._draggable is not None)\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nfrom matplotlib import pyplot as plt\n\nclass TestLegendDraggable(unittest.TestCase):\n    def test_legend_draggable_keyword(self):\n        fig, ax = plt.subplots()\n        ax.plot([1, 2, 3], label='Test')\n        legend = ax.legend(draggable=True)\n        self.assertTrue(legend._draggable is not None)\n\nif __name__ == '__main__':\n    unittest.main()",
            "import unittest\nfrom matplotlib import pyplot as plt\n\nclass TestLegendDraggable(unittest.TestCase):\n    def test_legend_draggable_at_creation(self):\n        fig, ax = plt.subplots()\n        ax.plot([1, 2, 3], label='Test')\n        legend = ax.legend(draggable=True)\n        self.assertTrue(legend._draggable is not None, \"Legend should be draggable at creation\")\n\nif __name__ == '__main__':\n    unittest.main()"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_legend.py"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-26020",
        "base_commit": "f6a781f77f5ddf1204c60ca7c544809407d4a807",
        "patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -1,5 +1,6 @@\n from numbers import Number\n import functools\n+from types import MethodType\n \n import numpy as np\n \n@@ -7,14 +8,20 @@\n from matplotlib.gridspec import SubplotSpec\n \n from .axes_divider import Size, SubplotDivider, Divider\n-from .mpl_axes import Axes\n+from .mpl_axes import Axes, SimpleAxisArtist\n \n \n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    if isinstance(ax.axis, MethodType):\n+        bottom = SimpleAxisArtist(ax.xaxis, 1, ax.spines[\"bottom\"])\n+        left = SimpleAxisArtist(ax.yaxis, 1, ax.spines[\"left\"])\n+    else:\n+        bottom = ax.axis[\"bottom\"]\n+        left = ax.axis[\"left\"]\n+    bottom.toggle(ticklabels=bottom_off, label=bottom_off)\n+    left.toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n",
        "test_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n--- a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n+++ b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n@@ -767,3 +767,7 @@ def test_anchored_locator_base_call():\n     axins.set(xticks=[], yticks=[])\n \n     axins.imshow(Z, extent=extent, origin=\"lower\")\n+\n+\n+def test_grid_with_axes_class_not_overriding_axis():\n+    Grid(plt.figure(), 111, (2, 2), axes_class=mpl.axes.Axes)\n",
        "problem_statement": "Error creating AxisGrid with non-default axis class\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nCreating `AxesGrid` using cartopy `GeoAxes` as `axis_class` raises `TypeError: 'method' object is not subscriptable`. Seems to be due to different behaviour of `axis` attr. for `mpl_toolkits.axes_grid1.mpl_axes.Axes` and other axes instances (like `GeoAxes`) where `axis` is only a callable. The error is raised in method `mpl_toolkits.axes_grid1.axes_grid._tick_only` when trying to access keys from `axis` attr.\r\n\r\n**Code for reproduction**\r\n\r\n<!--A minimum code snippet required to reproduce the bug.\r\nPlease make sure to minimize the number of dependencies required, and provide\r\nany necessary plotted data.\r\nAvoid using threads, as Matplotlib is (explicitly) not thread-safe.-->\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom cartopy.crs import PlateCarree\r\nfrom cartopy.mpl.geoaxes import GeoAxes\r\nfrom mpl_toolkits.axes_grid1 import AxesGrid\r\n\r\nfig = plt.figure()\r\naxes_class = (GeoAxes, dict(map_projection=PlateCarree()))\r\ngr = AxesGrid(fig, 111, nrows_ncols=(1,1),\r\n              axes_class=axes_class)\r\n```\r\n\r\n**Actual outcome**\r\n\r\n<!--The output produced by the above code, which may be a screenshot, console output, etc.-->\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/jonasg/stuff/bugreport_mpl_toolkits_AxesGrid.py\", line 16, in <module>\r\n    axes_class=axes_class)\r\n\r\n  File \"/home/jonasg/miniconda3/envs/pya/lib/python3.7/site-packages/mpl_toolkits/axes_grid1/axes_grid.py\", line 618, in __init__\r\n    self.set_label_mode(label_mode)\r\n\r\n  File \"/home/jonasg/miniconda3/envs/pya/lib/python3.7/site-packages/mpl_toolkits/axes_grid1/axes_grid.py\", line 389, in set_label_mode\r\n    _tick_only(ax, bottom_on=False, left_on=False)\r\n\r\n  File \"/home/jonasg/miniconda3/envs/pya/lib/python3.7/site-packages/mpl_toolkits/axes_grid1/axes_grid.py\", line 27, in _tick_only\r\n    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\r\n\r\nTypeError: 'method' object is not subscriptable\r\n```\r\n\r\n**Expected outcome**\r\n\r\n<!--A description of the expected outcome from the code snippet-->\r\n<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: Ubuntu 18.04.4 LTS\r\n  * Matplotlib version: 3.1.2 (conda-forge)\r\n  * Matplotlib backend: Qt5Agg \r\n  * Python version: 3.7.6\r\n  * Jupyter version (if applicable):\r\n  * Other libraries: \r\n\r\n```\r\n# Name                    Version                   Build  Channel\r\n_libgcc_mutex             0.1                 conda_forge    conda-forge\r\n_openmp_mutex             4.5                       0_gnu    conda-forge\r\nalabaster                 0.7.12                   py37_0  \r\nantlr-python-runtime      4.7.2                 py37_1001    conda-forge\r\nargh                      0.26.2                   py37_0  \r\nastroid                   2.3.3                    py37_0  \r\natomicwrites              1.3.0                    py37_1  \r\nattrs                     19.3.0                     py_0    conda-forge\r\nautopep8                  1.4.4                      py_0  \r\nbabel                     2.8.0                      py_0  \r\nbackcall                  0.1.0                    py37_0  \r\nbasemap                   1.2.1            py37hd759880_1    conda-forge\r\nbleach                    3.1.0                    py37_0  \r\nbokeh                     1.4.0                    py37_0    conda-forge\r\nbzip2                     1.0.8                h516909a_2    conda-forge\r\nca-certificates           2019.11.28           hecc5488_0    conda-forge\r\ncartopy                   0.17.0          py37hd759880_1006    conda-forge\r\ncertifi                   2019.11.28               py37_0    conda-forge\r\ncf-units                  2.1.3            py37hc1659b7_0    conda-forge\r\ncf_units                  2.0.1           py37h3010b51_1002    conda-forge\r\ncffi                      1.13.2           py37h8022711_0    conda-forge\r\ncftime                    1.0.4.2          py37hc1659b7_0    conda-forge\r\nchardet                   3.0.4                 py37_1003    conda-forge\r\nclick                     7.0                        py_0    conda-forge\r\ncloudpickle               1.2.2                      py_1    conda-forge\r\ncryptography              2.8              py37h72c5cf5_1    conda-forge\r\ncurl                      7.65.3               hf8cf82a_0    conda-forge\r\ncycler                    0.10.0                     py_2    conda-forge\r\ncytoolz                   0.10.1           py37h516909a_0    conda-forge\r\ndask                      2.9.2                      py_0    conda-forge\r\ndask-core                 2.9.2                      py_0    conda-forge\r\ndbus                      1.13.6               he372182_0    conda-forge\r\ndecorator                 4.4.1                      py_0  \r\ndefusedxml                0.6.0                      py_0  \r\ndiff-match-patch          20181111                   py_0  \r\ndistributed               2.9.3                      py_0    conda-forge\r\ndocutils                  0.16                     py37_0  \r\nentrypoints               0.3                      py37_0  \r\nexpat                     2.2.5             he1b5a44_1004    conda-forge\r\nflake8                    3.7.9                    py37_0  \r\nfontconfig                2.13.1            h86ecdb6_1001    conda-forge\r\nfreetype                  2.10.0               he983fc9_1    conda-forge\r\nfsspec                    0.6.2                      py_0    conda-forge\r\nfuture                    0.18.2                   py37_0  \r\ngeonum                    1.4.4                      py_0    conda-forge\r\ngeos                      3.7.2                he1b5a44_2    conda-forge\r\ngettext                   0.19.8.1          hc5be6a0_1002    conda-forge\r\nglib                      2.58.3          py37h6f030ca_1002    conda-forge\r\ngmp                       6.1.2                h6c8ec71_1  \r\ngpxpy                     1.4.0                      py_0    conda-forge\r\ngst-plugins-base          1.14.5               h0935bb2_0    conda-forge\r\ngstreamer                 1.14.5               h36ae1b5_0    conda-forge\r\nhdf4                      4.2.13            hf30be14_1003    conda-forge\r\nhdf5                      1.10.5          nompi_h3c11f04_1104    conda-forge\r\nheapdict                  1.0.1                      py_0    conda-forge\r\nicu                       64.2                 he1b5a44_1    conda-forge\r\nidna                      2.8                   py37_1000    conda-forge\r\nimagesize                 1.2.0                      py_0  \r\nimportlib_metadata        1.4.0                    py37_0    conda-forge\r\nintervaltree              3.0.2                      py_0  \r\nipykernel                 5.1.4            py37h39e3cac_0  \r\nipython                   7.11.1           py37h39e3cac_0  \r\nipython_genutils          0.2.0                    py37_0  \r\niris                      2.2.0                 py37_1003    conda-forge\r\nisort                     4.3.21                   py37_0  \r\njedi                      0.14.1                   py37_0  \r\njeepney                   0.4.2                      py_0  \r\njinja2                    2.10.3                     py_0    conda-forge\r\njpeg                      9c                h14c3975_1001    conda-forge\r\njson5                     0.8.5                      py_0  \r\njsonschema                3.2.0                    py37_0  \r\njupyter_client            5.3.4                    py37_0  \r\njupyter_core              4.6.1                    py37_0  \r\njupyterlab                1.2.5              pyhf63ae98_0  \r\njupyterlab_server         1.0.6                      py_0  \r\nkeyring                   21.1.0                   py37_0  \r\nkiwisolver                1.1.0            py37hc9558a2_0    conda-forge\r\nkrb5                      1.16.4               h2fd8d38_0    conda-forge\r\nlatlon23                  1.0.7                      py_0    conda-forge\r\nlazy-object-proxy         1.4.3            py37h7b6447c_0  \r\nld_impl_linux-64          2.33.1               h53a641e_7    conda-forge\r\nlibblas                   3.8.0               14_openblas    conda-forge\r\nlibcblas                  3.8.0               14_openblas    conda-forge\r\nlibclang                  9.0.1           default_hde54327_0    conda-forge\r\nlibcurl                   7.65.3               hda55be3_0    conda-forge\r\nlibedit                   3.1.20170329      hf8c457e_1001    conda-forge\r\nlibffi                    3.2.1             he1b5a44_1006    conda-forge\r\nlibgcc-ng                 9.2.0                h24d8f2e_2    conda-forge\r\nlibgfortran-ng            7.3.0                hdf63c60_4    conda-forge\r\nlibgomp                   9.2.0                h24d8f2e_2    conda-forge\r\nlibiconv                  1.15              h516909a_1005    conda-forge\r\nliblapack                 3.8.0               14_openblas    conda-forge\r\nlibllvm9                  9.0.1                hc9558a2_0    conda-forge\r\nlibnetcdf                 4.7.3           nompi_h94020b1_100    conda-forge\r\nlibopenblas               0.3.7                h5ec1e0e_6    conda-forge\r\nlibpng                    1.6.37               hed695b0_0    conda-forge\r\nlibsodium                 1.0.16               h1bed415_0  \r\nlibspatialindex           1.9.3                he6710b0_0  \r\nlibssh2                   1.8.2                h22169c7_2    conda-forge\r\nlibstdcxx-ng              9.2.0                hdf63c60_2    conda-forge\r\nlibtiff                   4.1.0                hc3755c2_3    conda-forge\r\nlibuuid                   2.32.1            h14c3975_1000    conda-forge\r\nlibxcb                    1.13              h14c3975_1002    conda-forge\r\nlibxkbcommon              0.9.1                hebb1f50_0    conda-forge\r\nlibxml2                   2.9.10               hee79883_0    conda-forge\r\nlocket                    0.2.0                      py_2    conda-forge\r\nlz4-c                     1.8.3             he1b5a44_1001    conda-forge\r\nmarkupsafe                1.1.1            py37h516909a_0    conda-forge\r\nmatplotlib                3.1.2                    py37_1    conda-forge\r\nmatplotlib-base           3.1.2            py37h250f245_1    conda-forge\r\nmccabe                    0.6.1                    py37_1  \r\nmistune                   0.8.4            py37h7b6447c_0  \r\nmore-itertools            8.1.0                      py_0    conda-forge\r\nmsgpack-python            0.6.2            py37hc9558a2_0    conda-forge\r\nnbconvert                 5.6.1                    py37_0  \r\nnbformat                  5.0.4                      py_0  \r\nnbsphinx                  0.5.1                      py_0    conda-forge\r\nncurses                   6.1               hf484d3e_1002    conda-forge\r\nnetcdf4                   1.5.3           nompi_py37hd35fb8e_102    conda-forge\r\nnotebook                  6.0.3                    py37_0  \r\nnspr                      4.24                 he1b5a44_0    conda-forge\r\nnss                       3.47                 he751ad9_0    conda-forge\r\nnumpy                     1.17.5           py37h95a1406_0    conda-forge\r\nnumpydoc                  0.9.2                      py_0  \r\nolefile                   0.46                       py_0    conda-forge\r\nopenssl                   1.1.1d               h516909a_0    conda-forge\r\nowslib                    0.19.0                     py_2    conda-forge\r\npackaging                 20.0                       py_0    conda-forge\r\npandas                    0.25.3           py37hb3f55d8_0    conda-forge\r\npandoc                    2.2.3.2                       0  \r\npandocfilters             1.4.2                    py37_1  \r\nparso                     0.6.0                      py_0  \r\npartd                     1.1.0                      py_0    conda-forge\r\npathtools                 0.1.2                      py_1  \r\npatsy                     0.5.1                      py_0    conda-forge\r\npcre                      8.43                 he1b5a44_0    conda-forge\r\npexpect                   4.8.0                    py37_0  \r\npickleshare               0.7.5                    py37_0  \r\npillow                    7.0.0            py37hefe7db6_0    conda-forge\r\npip                       20.0.1                   py37_0    conda-forge\r\npluggy                    0.13.0                   py37_0    conda-forge\r\nproj4                     5.2.0             he1b5a44_1006    conda-forge\r\nprometheus_client         0.7.1                      py_0  \r\nprompt_toolkit            3.0.3                      py_0  \r\npsutil                    5.6.7            py37h516909a_0    conda-forge\r\npthread-stubs             0.4               h14c3975_1001    conda-forge\r\nptyprocess                0.6.0                    py37_0  \r\npy                        1.8.1                      py_0    conda-forge\r\npyaerocom                 0.9.0.dev5                dev_0    <develop>\r\npycodestyle               2.5.0                    py37_0  \r\npycparser                 2.19                     py37_1    conda-forge\r\npydocstyle                4.0.1                      py_0  \r\npyepsg                    0.4.0                      py_0    conda-forge\r\npyflakes                  2.1.1                    py37_0  \r\npygments                  2.5.2                      py_0  \r\npyinstrument              3.1.2                    pypi_0    pypi\r\npyinstrument-cext         0.2.2                    pypi_0    pypi\r\npykdtree                  1.3.1           py37hc1659b7_1002    conda-forge\r\npyke                      1.1.1                 py37_1001    conda-forge\r\npylint                    2.4.4                    py37_0  \r\npyopenssl                 19.1.0                   py37_0    conda-forge\r\npyparsing                 2.4.6                      py_0    conda-forge\r\npyproj                    1.9.6           py37h516909a_1002    conda-forge\r\npyqt                      5.12.3           py37hcca6a23_1    conda-forge\r\npyqt5-sip                 4.19.18                  pypi_0    pypi\r\npyqtwebengine             5.12.1                   pypi_0    pypi\r\npyrsistent                0.15.7           py37h7b6447c_0  \r\npyshp                     2.1.0                      py_0    conda-forge\r\npysocks                   1.7.1                    py37_0    conda-forge\r\npytest                    5.3.4                    py37_0    conda-forge\r\npython                    3.7.6                h357f687_2    conda-forge\r\npython-dateutil           2.8.1                      py_0    conda-forge\r\npython-jsonrpc-server     0.3.4                      py_0  \r\npython-language-server    0.31.7                   py37_0  \r\npytz                      2019.3                     py_0    conda-forge\r\npyxdg                     0.26                       py_0  \r\npyyaml                    5.3              py37h516909a_0    conda-forge\r\npyzmq                     18.1.0           py37he6710b0_0  \r\nqdarkstyle                2.8                        py_0  \r\nqt                        5.12.5               hd8c4c69_1    conda-forge\r\nqtawesome                 0.6.1                      py_0  \r\nqtconsole                 4.6.0                      py_1  \r\nqtpy                      1.9.0                      py_0  \r\nreadline                  8.0                  hf8c457e_0    conda-forge\r\nrequests                  2.22.0                   py37_1    conda-forge\r\nrope                      0.16.0                     py_0  \r\nrtree                     0.9.3                    py37_0  \r\nscipy                     1.4.1            py37h921218d_0    conda-forge\r\nseaborn                   0.9.0                      py_2    conda-forge\r\nsecretstorage             3.1.2                    py37_0  \r\nsend2trash                1.5.0                    py37_0  \r\nsetuptools                45.1.0                   py37_0    conda-forge\r\nshapely                   1.6.4           py37hec07ddf_1006    conda-forge\r\nsimplejson                3.17.0           py37h516909a_0    conda-forge\r\nsix                       1.14.0                   py37_0    conda-forge\r\nsnowballstemmer           2.0.0                      py_0  \r\nsortedcontainers          2.1.0                      py_0    conda-forge\r\nsphinx                    2.3.1                      py_0  \r\nsphinx-rtd-theme          0.4.3                    pypi_0    pypi\r\nsphinxcontrib-applehelp   1.0.1                      py_0  \r\nsphinxcontrib-devhelp     1.0.1                      py_0  \r\nsphinxcontrib-htmlhelp    1.0.2                      py_0  \r\nsphinxcontrib-jsmath      1.0.1                      py_0  \r\nsphinxcontrib-qthelp      1.0.2                      py_0  \r\nsphinxcontrib-serializinghtml 1.1.3                      py_0  \r\nspyder                    4.0.1                    py37_0  \r\nspyder-kernels            1.8.1                    py37_0  \r\nsqlite                    3.30.1               hcee41ef_0    conda-forge\r\nsrtm.py                   0.3.4                      py_0    conda-forge\r\nstatsmodels               0.11.0           py37h516909a_0    conda-forge\r\ntblib                     1.6.0                      py_0    conda-forge\r\nterminado                 0.8.3                    py37_0  \r\ntestpath                  0.4.4                      py_0  \r\ntk                        8.6.10               hed695b0_0    conda-forge\r\ntoolz                     0.10.0                     py_0    conda-forge\r\ntornado                   6.0.3            py37h516909a_0    conda-forge\r\ntqdm                      4.43.0                   pypi_0    pypi\r\ntraitlets                 4.3.3                    py37_0  \r\nudunits2                  2.2.27.6          h4e0c4b3_1001    conda-forge\r\nujson                     1.35             py37h14c3975_0  \r\nurllib3                   1.25.7                   py37_0    conda-forge\r\nwatchdog                  0.9.0                    py37_1  \r\nwcwidth                   0.1.8                      py_0    conda-forge\r\nwebencodings              0.5.1                    py37_1  \r\nwheel                     0.33.6                   py37_0    conda-forge\r\nwrapt                     1.11.2           py37h7b6447c_0  \r\nwurlitzer                 2.0.0                    py37_0  \r\nxarray                    0.14.1                     py_1    conda-forge\r\nxorg-libxau               1.0.9                h14c3975_0    conda-forge\r\nxorg-libxdmcp             1.1.3                h516909a_0    conda-forge\r\nxz                        5.2.4             h14c3975_1001    conda-forge\r\nyaml                      0.2.2                h516909a_1    conda-forge\r\nyapf                      0.28.0                     py_0  \r\nzeromq                    4.3.1                he6710b0_3  \r\nzict                      1.0.0                      py_0    conda-forge\r\nzipp                      2.0.0                      py_2    conda-forge\r\nzlib                      1.2.11            h516909a_1006    conda-forge\r\nzstd                      1.4.4                h3b9ef0a_1    conda-forge\r\n```\r\n\n",
        "hints_text": "This could probably be made to work by:\r\n\r\n a) renaming the `axis` property on `.mpl_axes.Axes` to something that does not collide with an existing method\r\n b) doing on-the-fly multiple inheritance in AxesGrid if the input axes class does not already inherit from the said Axes extension\nOk. It this begs the question of why one would use axes grid for cartopy axes?\nAn alternative change here would be to put is the type check and raise an informative error that it is not going to work.\nOTOH it may be nice to slowly move axes_grid towards an API more consistent with the rest of mpl.  From a very, very quick look, I guess its `axis` dict could be compared to normal axes' `spines` dict?  (an AxisArtist is vaguely like a Spine, I guess).\n> Ok. It this begs the question of why one would use axes grid for cartopy axes?\r\n\r\nThere's an [example in the Cartopy docs](https://scitools.org.uk/cartopy/docs/latest/gallery/axes_grid_basic.html).\nFor that example I get `TypeError: 'tuple' object is not callable`\nSo, I'm confused, is `axes_grid` the only way to make an array of axes from an arbitrary axes subclass?  I don't see the equivalent of `axes_class=GeoAxes` for `fig.add_subplot` or `fig.subplots` etc. \nSorry for the above, I see now.  That example could be changed to \r\n\r\n```python\r\n    fig, axgr = plt.subplots(3, 2, constrained_layout=True,\r\n                             subplot_kw={'projection':projection})\r\n    axgr = axgr.flat\r\n...\r\n   fig.colorbar(p, ax=axgr, shrink=0.6, extend='both')\r\n```\n@jklymak the reason why I went to use AxesGrid was because it seemed the easiest for me to create multiple GeoAxes instances flexibly (i.e. with or without colorbar axes, and with flexible location of those) and with an easy control of both horizonal and vertical padding of GeoAxis instances and independently, of the colorbar axes, also because the aspect of maps (lat / lon range) tends to mess with the alignment. \r\nI know that this can all be solved via subplots or GridSpec, etc., but I found that AxisGrid was the most simple way to do this (after trying other options and always ending up having overlapping axes ticklabels or too large padding between axes, etc.). AxesGrid seems to be made for my problem and it was very easy for me to set up a subplot grid meeting my needs for e.g. plotting 12 monthly maps of climate model data with proper padding, etc. \r\n![multimap_example](https://user-images.githubusercontent.com/12813228/78986627-f310dc00-7b2b-11ea-8d47-a5c90b68171d.png)\r\n\r\nThe code I used to create initiate this figure is based on the example from the cartopy website that @QuLogic mentions above:\r\n\r\n```python\r\nfig = plt.figure(figsize=(18, 7))\r\naxes_class = (GeoAxes, dict(map_projection=ccrs.PlateCarree()))\r\naxgr = AxesGrid(fig, 111, axes_class=axes_class,\r\n                    nrows_ncols=(3, 4),\r\n                    axes_pad=(0.6, 0.5), # control padding separately for e.g. colorbar labels, axes titles, etc.\r\n                    cbar_location='right',\r\n                    cbar_mode=\"each\",\r\n                    cbar_pad=\"5%\",\r\n                    cbar_size='3%',\r\n                    label_mode='') \r\n\r\n# here follows the plotting code of the displayed climate data using pyaerocom by loading a 2010 monthly example model dataset, looping over the (GeoAxes, cax) instances of the grid and calling pyaerocom.plot.mapping.plot_griddeddata_on_map on the monthly subsets.\r\n```\r\n\r\nHowever, @jklymak I was not aware of the `constrained_layout` option in `subplots` and indeed, looking at [the constrained layout guide](https://matplotlib.org/3.2.1/tutorials/intermediate/constrainedlayout_guide.html), this seems to provide the control needed to not mess with padding / spacing etc. I will try this out for my problem. Nonetheless, since cartopy refers to the AxesGrid option, it may be good if this issue could be fixed in any case.\r\n\r\nAlso, constrained layout itself is declared experimental in the above guide and may be deprecated, so it may be a bit uncertain for users and developers that build upon matplotlib, what option to go for.\r\n\r\n\n@jgliss Yeah, I think I agree that `axes_grid` is useful to pack subplots together that have a certain aspect ratio.  Core matplotlib takes the opposite approach and puts the white space between the axes, `axes_grid` puts the space around the axes.  \r\n\r\nI agree with @anntzer comment above (https://github.com/matplotlib/matplotlib/issues/17069#issuecomment-611635018), but feel that we should move axes_grid into core matplotlib and change the API as we see fit when we do so.  \r\n\r\nI also agree that its time `constrained_layout` drops its experimental tag. \r\n\r\nBack on topic, though, this seems to be a regression and we should fix it.  \nRe-milestoned to 3.2.2 as this seems like it is a regression, not \"always broken\"?\nRight after I re-milestoned I see that this is with 3.1.2 so I'm confused if this ever worked?\nI re-milestoned this to 3.4 as I don't think this has ever worked without setting the kwarg `label_mode=''` (it is broken at least as far back as 2.1.0).\nActually, looks simple enough to just check what kind of object ax.axis is:\r\n```patch\r\ndiff --git i/lib/mpl_toolkits/axes_grid1/axes_grid.py w/lib/mpl_toolkits/axes_grid1/axes_grid.py\r\nindex 2b1b1d3200..8b947a5836 100644\r\n--- i/lib/mpl_toolkits/axes_grid1/axes_grid.py\r\n+++ w/lib/mpl_toolkits/axes_grid1/axes_grid.py\r\n@@ -1,5 +1,6 @@\r\n from numbers import Number\r\n import functools\r\n+from types import MethodType\r\n\r\n import numpy as np\r\n\r\n@@ -7,14 +8,20 @@ from matplotlib import _api, cbook\r\n from matplotlib.gridspec import SubplotSpec\r\n\r\n from .axes_divider import Size, SubplotDivider, Divider\r\n-from .mpl_axes import Axes\r\n+from .mpl_axes import Axes, SimpleAxisArtist\r\n\r\n\r\n def _tick_only(ax, bottom_on, left_on):\r\n     bottom_off = not bottom_on\r\n     left_off = not left_on\r\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\r\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\r\n+    if isinstance(ax.axis, MethodType):\r\n+        bottom = SimpleAxisArtist(ax.xaxis, 1, ax.spines[\"bottom\"])\r\n+        left = SimpleAxisArtist(ax.yaxis, 1, ax.spines[\"left\"])\r\n+    else:\r\n+        bottom = ax.axis[\"bottom\"]\r\n+        left = ax.axis[\"left\"]\r\n+    bottom.toggle(ticklabels=bottom_off, label=bottom_off)\r\n+    left.toggle(ticklabels=left_off, label=left_off)\r\n\r\n\r\n class CbarAxesBase:\r\n```\r\nseems to be enough.",
        "created_at": "2023-05-31T21:36:23Z",
        "version": "3.7",
        "FAIL_TO_PASS": "[\"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_with_axes_class_not_overriding_axis\"]",
        "PASS_TO_PASS": "[\"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_divider_append_axes\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_twin_axes_empty_and_removed[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_axesgrid_colorbar_log_smoketest\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_inset_colorbar_tight_layout_smoketest\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_inset_locator[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_inset_axes[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_inset_axes_complete\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_fill_facecolor[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_zooming_with_inverted_axes[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_anchored_direction_arrows[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_anchored_direction_arrows_many_args[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_axes_locatable_position\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_image_grid_each_left_label_mode_all[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_image_grid_single_bottom[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_image_grid_label_mode_deprecation_warning\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_image_grid[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_gettightbbox\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[gca-gca-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[gca-gca-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[host-host-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[host-host-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[host-parasite-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[host-parasite-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[parasite-host-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[parasite-host-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[parasite-parasite-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[parasite-parasite-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_anchored_artists[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_hbox_divider\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_vbox_divider\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_axes_class_tuple\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_axes_lists\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_axes_position[row]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_axes_position[column]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_errors[rect0-None-TypeError-Incorrect\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_errors[111--1-ValueError-ngrids\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_errors[111-7-ValueError-ngrids\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_divider_errors[None-TypeError-anchor\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_divider_errors[CC-ValueError-'CC'\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_divider_errors[anchor2-TypeError-anchor\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_mark_inset_unstales_viewlim[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_auto_adjustable\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_rgb_axes[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_insetposition[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_imagegrid_cbar_mode_edge[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_imagegrid\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_removal\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_anchored_locator_base_call[png]\"]",
        "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
        "generated_tests": [
            "import unittest\nfrom mpl_toolkits.axes_grid1 import AxesGrid\nfrom cartopy.crs import PlateCarree\nfrom cartopy.mpl.geoaxes import GeoAxes\nimport matplotlib.pyplot as plt\n\nclass TestAxesGrid(unittest.TestCase):\n    def test_axes_grid_with_geoaxes(self):\n        fig = plt.figure()\n        axes_class = (GeoAxes, dict(map_projection=PlateCarree()))\n        try:\n            gr = AxesGrid(fig, 111, nrows_ncols=(1,1), axes_class=axes_class)\n        except TypeError as e:\n            self.fail(\"AxesGrid raised TypeError unexpectedly!\")",
            "import unittest\nfrom mpl_toolkits.axes_grid1 import AxesGrid\nfrom cartopy.crs import PlateCarree\nfrom cartopy.mpl.geoaxes import GeoAxes\nimport matplotlib.pyplot as plt\n\nclass TestAxesGrid(unittest.TestCase):\n    def test_axes_grid_with_geoaxes(self):\n        fig = plt.figure()\n        axes_class = (GeoAxes, dict(map_projection=PlateCarree()))\n        try:\n            gr = AxesGrid(fig, 111, nrows_ncols=(1,1), axes_class=axes_class)\n        except TypeError as e:\n            self.fail(\"AxesGrid raised TypeError unexpectedly!\")",
            "import unittest\nfrom mpl_toolkits.axes_grid1 import AxesGrid\nfrom cartopy.crs import PlateCarree\nfrom cartopy.mpl.geoaxes import GeoAxes\nimport matplotlib.pyplot as plt\n\nclass TestAxesGrid(unittest.TestCase):\n    def test_axes_grid_with_geoaxes(self):\n        fig = plt.figure()\n        axes_class = (GeoAxes, dict(map_projection=PlateCarree()))\n        try:\n            gr = AxesGrid(fig, 111, nrows_ncols=(1,1), axes_class=axes_class)\n        except TypeError as e:\n            self.fail(\"AxesGrid raised TypeError unexpectedly!\")",
            "import unittest\nfrom mpl_toolkits.axes_grid1 import AxesGrid\nfrom cartopy.crs import PlateCarree\nfrom cartopy.mpl.geoaxes import GeoAxes\nimport matplotlib.pyplot as plt\n\nclass TestAxesGrid(unittest.TestCase):\n    def test_axes_grid_with_geoaxes(self):\n        fig = plt.figure()\n        axes_class = (GeoAxes, dict(map_projection=PlateCarree()))\n        try:\n            gr = AxesGrid(fig, 111, nrows_ncols=(1,1), axes_class=axes_class)\n        except TypeError as e:\n            self.fail(\"AxesGrid raised TypeError unexpectedly!\")",
            "import unittest\nfrom mpl_toolkits.axes_grid1 import AxesGrid\nfrom cartopy.crs import PlateCarree\nfrom cartopy.mpl.geoaxes import GeoAxes\nimport matplotlib.pyplot as plt\n\nclass TestAxesGrid(unittest.TestCase):\n    def test_axes_grid_with_geoaxes(self):\n        fig = plt.figure()\n        axes_class = (GeoAxes, dict(map_projection=PlateCarree()))\n        try:\n            gr = AxesGrid(fig, 111, nrows_ncols=(1,1), axes_class=axes_class)\n        except TypeError as e:\n            self.fail(\"AxesGrid raised TypeError unexpectedly!\")"
        ],
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/matplotlib/lib/matplotlib/tests/test_axes.py"
    }
]