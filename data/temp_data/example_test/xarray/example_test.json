[
    {
        "repo": "pydata/xarray",
        "instance_id": "pydata__xarray-4493",
        "base_commit": "a5f53e203c52a7605d5db799864046471115d04f",
        "patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -120,6 +120,16 @@ def as_variable(obj, name=None) -> \"Union[Variable, IndexVariable]\":\n     if isinstance(obj, Variable):\n         obj = obj.copy(deep=False)\n     elif isinstance(obj, tuple):\n+        if isinstance(obj[1], DataArray):\n+            # TODO: change into TypeError\n+            warnings.warn(\n+                (\n+                    \"Using a DataArray object to construct a variable is\"\n+                    \" ambiguous, please extract the data using the .data property.\"\n+                    \" This will raise a TypeError in 0.19.0.\"\n+                ),\n+                DeprecationWarning,\n+            )\n         try:\n             obj = Variable(*obj)\n         except (TypeError, ValueError) as error:\n",
        "test_patch": "diff --git a/xarray/tests/test_dask.py b/xarray/tests/test_dask.py\n--- a/xarray/tests/test_dask.py\n+++ b/xarray/tests/test_dask.py\n@@ -1233,7 +1233,7 @@ def test_map_blocks_to_array(map_ds):\n         lambda x: x.drop_vars(\"x\"),\n         lambda x: x.expand_dims(k=[1, 2, 3]),\n         lambda x: x.expand_dims(k=3),\n-        lambda x: x.assign_coords(new_coord=(\"y\", x.y * 2)),\n+        lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n         lambda x: x.astype(np.int32),\n         lambda x: x.x,\n     ],\ndiff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -4959,13 +4959,13 @@ def test_reduce_keepdims(self):\n         # Coordinates involved in the reduction should be removed\n         actual = ds.mean(keepdims=True)\n         expected = Dataset(\n-            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, keepdims=True))}, coords={\"c\": ds.c}\n+            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, keepdims=True).data)}, coords={\"c\": ds.c}\n         )\n         assert_identical(expected, actual)\n \n         actual = ds.mean(\"x\", keepdims=True)\n         expected = Dataset(\n-            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, axis=0, keepdims=True))},\n+            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, axis=0, keepdims=True).data)},\n             coords={\"y\": ds.y, \"c\": ds.c},\n         )\n         assert_identical(expected, actual)\ndiff --git a/xarray/tests/test_interp.py b/xarray/tests/test_interp.py\n--- a/xarray/tests/test_interp.py\n+++ b/xarray/tests/test_interp.py\n@@ -190,7 +190,7 @@ def func(obj, dim, new_x):\n             \"w\": xdest[\"w\"],\n             \"z2\": xdest[\"z2\"],\n             \"y\": da[\"y\"],\n-            \"x\": ((\"z\", \"w\"), xdest),\n+            \"x\": ((\"z\", \"w\"), xdest.data),\n             \"x2\": ((\"z\", \"w\"), func(da[\"x2\"], \"x\", xdest)),\n         },\n     )\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -8,7 +8,7 @@\n import pytest\n import pytz\n \n-from xarray import Coordinate, Dataset, IndexVariable, Variable, set_options\n+from xarray import Coordinate, DataArray, Dataset, IndexVariable, Variable, set_options\n from xarray.core import dtypes, duck_array_ops, indexing\n from xarray.core.common import full_like, ones_like, zeros_like\n from xarray.core.indexing import (\n@@ -1081,6 +1081,9 @@ def test_as_variable(self):\n         td = np.array([timedelta(days=x) for x in range(10)])\n         assert as_variable(td, \"time\").dtype.kind == \"m\"\n \n+        with pytest.warns(DeprecationWarning):\n+            as_variable((\"x\", DataArray([])))\n+\n     def test_repr(self):\n         v = Variable([\"time\", \"x\"], [[1, 2, 3], [4, 5, 6]], {\"foo\": \"bar\"})\n         expected = dedent(\n",
        "problem_statement": "DataSet.update causes chunked dask DataArray to evalute its values eagerly \n**What happened**:\r\nUsed `DataSet.update` to update a chunked dask DataArray, but the DataArray is no longer chunked after the update.\r\n\r\n**What you expected to happen**:\r\nThe chunked DataArray should still be chunked after the update\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nfoo = xr.DataArray(np.random.randn(3, 3), dims=(\"x\", \"y\")).chunk()  # foo is chunked\r\nds = xr.Dataset({\"foo\": foo, \"bar\": (\"x\", [1, 2, 3])})  # foo is still chunked here\r\nds  # you can verify that foo is chunked\r\n```\r\n```python\r\nupdate_dict = {\"foo\": ((\"x\", \"y\"), ds.foo[1:, :]), \"bar\": (\"x\", ds.bar[1:])}\r\nupdate_dict[\"foo\"][1]  # foo is still chunked\r\n```\r\n```python\r\nds.update(update_dict)\r\nds  # now foo is no longer chunked\r\n```\r\n\r\n**Environment**:\r\n\r\n<details><summary>Output of <tt>xr.show_versions()</tt></summary>\r\n\r\n```\r\ncommit: None\r\npython: 3.8.3 (default, Jul  2 2020, 11:26:31) \r\n[Clang 10.0.0 ]\r\npython-bits: 64\r\nOS: Darwin\r\nOS-release: 19.6.0\r\nmachine: x86_64\r\nprocessor: i386\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: en_US.UTF-8\r\nlibhdf5: 1.10.6\r\nlibnetcdf: None\r\n\r\nxarray: 0.16.0\r\npandas: 1.0.5\r\nnumpy: 1.18.5\r\nscipy: 1.5.0\r\nnetCDF4: None\r\npydap: None\r\nh5netcdf: None\r\nh5py: 2.10.0\r\nNio: None\r\nzarr: None\r\ncftime: None\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: None\r\ndask: 2.20.0\r\ndistributed: 2.20.0\r\nmatplotlib: 3.2.2\r\ncartopy: None\r\nseaborn: None\r\nnumbagg: None\r\npint: None\r\nsetuptools: 49.2.0.post20200714\r\npip: 20.1.1\r\nconda: None\r\npytest: 5.4.3\r\nIPython: 7.16.1\r\nsphinx: None\r\n```\r\n\r\n</details>\nDataset constructor with DataArray triggers computation\nIs it intentional that creating a Dataset with a DataArray and dimension names for a single variable causes computation of that variable?  In other words, why does ```xr.Dataset(dict(a=('d0', xr.DataArray(da.random.random(10)))))``` cause the dask array to compute?\r\n\r\nA longer example:\r\n\r\n```python\r\nimport dask.array as da\r\nimport xarray as xr\r\nx = da.random.randint(1, 10, size=(100, 25))\r\nds = xr.Dataset(dict(a=xr.DataArray(x, dims=('x', 'y'))))\r\ntype(ds.a.data)\r\ndask.array.core.Array\r\n\r\n# Recreate the dataset with the same array, but also redefine the dimensions\r\nds2 = xr.Dataset(dict(a=(('x', 'y'), ds.a))\r\ntype(ds2.a.data)\r\nnumpy.ndarray\r\n```\r\n\r\n\n",
        "hints_text": "that's because `xarray.core.variable.as_compatible_data` doesn't consider `DataArray` objects: https://github.com/pydata/xarray/blob/333e8dba55f0165ccadf18f2aaaee9257a4d716b/xarray/core/variable.py#L202-L203 and thus falls back to `DataArray.values`: https://github.com/pydata/xarray/blob/333e8dba55f0165ccadf18f2aaaee9257a4d716b/xarray/core/variable.py#L219 I think that's a bug and it should be fine to use\r\n```python\r\n    if isinstance(data, (DataArray, Variable)):\r\n        return data.data\r\n```\r\nbut I didn't check if that would break anything. Are you up for sending in a PR?\r\n\r\nFor now, you can work around that by manually retrieving `data`:\r\n```python\r\nIn [2]: foo = xr.DataArray(np.random.randn(3, 3), dims=(\"x\", \"y\")).chunk()  # foo is chunked\r\n   ...: ds = xr.Dataset({\"foo\": foo, \"bar\": (\"x\", [1, 2, 3])})  # foo is still chunked here\r\n   ...: ds\r\nOut[2]: \r\n<xarray.Dataset>\r\nDimensions:  (x: 3, y: 3)\r\nDimensions without coordinates: x, y\r\nData variables:\r\n    foo      (x, y) float64 dask.array<chunksize=(3, 3), meta=np.ndarray>\r\n    bar      (x) int64 1 2 3\r\n\r\nIn [3]: ds2 = ds.assign(\r\n   ...:     {\r\n   ...:         \"foo\": lambda ds: ((\"x\", \"y\"), ds.foo[1:, :].data),\r\n   ...:         \"bar\": lambda ds: (\"x\", ds.bar[1:]),\r\n   ...:     }\r\n   ...: )\r\n   ...: ds2\r\nOut[3]: \r\n<xarray.Dataset>\r\nDimensions:  (x: 2, y: 3)\r\nDimensions without coordinates: x, y\r\nData variables:\r\n    foo      (x, y) float64 dask.array<chunksize=(2, 3), meta=np.ndarray>\r\n    bar      (x) int64 2 3\r\n```\n> xarray.core.variable.as_compatible_data doesn't consider DataArray objects:\r\n\r\nI don't think DataArrays are expected at that level though. BUT I'm probably wrong.\r\n\r\n> {\"foo\": ((\"x\", \"y\"), ds.foo[1:, :]), \"bar\": (\"x\", ds.bar[1:])}\r\n\r\nThis syntax is weird. You should be able to do `update_dict = {\"foo\": ds.foo[1:, :], \"bar\": ds.bar[1:]}` . \r\n\r\nFor the simple example,  `ds.update(update_dict)` and `ds.assign(update_dict)` both fail because you can't align dimensions without labels when the dimension size is different between variables (I find this confusing). \r\n\r\n@chunhochow What are you trying to do? Overwrite the existing `foo` and `bar` variables?\n> when the dimension size is different between variables (I find this confusing).\r\n\r\nI guess the issue is that the dataset has `x` at a certain size and by reassigning we're trying to set `x` to a different size. I *think* the failure is expected in this case, and it could be solved by assigning labels to `x`.\r\n\r\nThinking about the initial problem some more, it might be better to simply point to `isel`:\r\n```python\r\nds2 = ds.isel(x=slice(1, None))\r\nds2\r\n```\r\nshould do the same, but without having to worry about manually reconstructing a valid dataset. \nYes, I'm trying to drop the last \"bin\" of data (the edge has problems) along all the DataArrays along the dimension `x`, But I couldn't figure out the syntax for how to do it from reading the documentation. Thank you! I will try `isel` next week when I get back to it!\n",
        "created_at": "2020-10-06T22:00:41Z",
        "version": "0.12",
        "FAIL_TO_PASS": "[\"xarray/tests/test_variable.py::TestVariable::test_as_variable\"]",
        "PASS_TO_PASS": "[\"xarray/tests/test_dask.py::test_raise_if_dask_computes\", \"xarray/tests/test_dask.py::TestVariable::test_basics\", \"xarray/tests/test_dask.py::TestVariable::test_copy\", \"xarray/tests/test_dask.py::TestVariable::test_chunk\", \"xarray/tests/test_dask.py::TestVariable::test_indexing\", \"xarray/tests/test_dask.py::TestVariable::test_squeeze\", \"xarray/tests/test_dask.py::TestVariable::test_equals\", \"xarray/tests/test_dask.py::TestVariable::test_transpose\", \"xarray/tests/test_dask.py::TestVariable::test_shift\", \"xarray/tests/test_dask.py::TestVariable::test_roll\", \"xarray/tests/test_dask.py::TestVariable::test_unary_op\", \"xarray/tests/test_dask.py::TestVariable::test_binary_op\", \"xarray/tests/test_dask.py::TestVariable::test_repr\", \"xarray/tests/test_dask.py::TestVariable::test_pickle\", \"xarray/tests/test_dask.py::TestVariable::test_reduce\", \"xarray/tests/test_dask.py::TestVariable::test_missing_values\", \"xarray/tests/test_dask.py::TestVariable::test_concat\", \"xarray/tests/test_dask.py::TestVariable::test_missing_methods\", \"xarray/tests/test_dask.py::TestVariable::test_univariate_ufunc\", \"xarray/tests/test_dask.py::TestVariable::test_bivariate_ufunc\", \"xarray/tests/test_dask.py::TestVariable::test_compute\", \"xarray/tests/test_dask.py::TestVariable::test_persist\", \"xarray/tests/test_dask.py::TestVariable::test_tokenize_duck_dask_array\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_rechunk\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_new_chunk\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_dataset\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_array\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_compute\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_persist\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_concat_loads_variables\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_rolling\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby_first\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_reindex\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_to_dataset_roundtrip\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_merge\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_ufuncs\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_where_dispatching\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_simultaneous_compute\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dot\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_repr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_repr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_pickle\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_pickle\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_getattr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_getattr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_values\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_from_dask_variable\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_tokenize_duck_dask_array\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_2D\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_coordinates\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_not_daskarray\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_no_coordinate\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_dim_order\", \"xarray/tests/test_dask.py::test_dask_kwargs_variable[load]\", \"xarray/tests/test_dask.py::test_dask_kwargs_variable[compute]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataarray[load]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataarray[compute]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataarray[persist]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataset[load]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataset[compute]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataset[persist]\", \"xarray/tests/test_dask.py::test_persist_Dataset[<lambda>0]\", \"xarray/tests/test_dask.py::test_persist_DataArray[<lambda>0]\", \"xarray/tests/test_dask.py::test_persist_DataArray[<lambda>1]\", \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\", \"xarray/tests/test_dask.py::test_basic_compute\", \"xarray/tests/test_dask.py::test_dask_layers_and_dependencies\", \"xarray/tests/test_dask.py::test_unify_chunks\", \"xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>0-obj0]\", \"xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>0-obj1]\", \"xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>1-obj0]\", \"xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>1-obj1]\", \"xarray/tests/test_dask.py::test_auto_chunk_da[obj0]\", \"xarray/tests/test_dask.py::test_make_meta\", \"xarray/tests/test_dask.py::test_identical_coords_no_computes\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj0]\", \"xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj1]\", \"xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj2]\", \"xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj3]\", \"xarray/tests/test_dask.py::test_token_changes_when_buffer_changes[obj0]\", \"xarray/tests/test_dask.py::test_token_changes_when_buffer_changes[obj1]\", \"xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>0]\", \"xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>1]\", \"xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>2]\", \"xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>0]\", \"xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>1]\", \"xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>2]\", \"xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>0]\", \"xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>1]\", \"xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>2]\", \"xarray/tests/test_dask.py::test_recursive_token\", \"xarray/tests/test_dask.py::test_normalize_token_with_backend\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[broadcast_equals]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[equals]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[no_conflicts]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_merge[broadcast_equals]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_merge[equals]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_merge[identical]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_merge[no_conflicts]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>0-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>0-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>1-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>1-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>2-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>2-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>3-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>3-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>4-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>4-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>5-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>5-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>6-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>6-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>7-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>7-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>8-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>8-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>9-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>9-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>10-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>10-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>11-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>11-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>12-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>12-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>13-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>13-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>14-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>14-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>15-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>15-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>16-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>16-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>17-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>17-obj1]\", \"xarray/tests/test_dask.py::test_more_transforms_pass_lazy_array_equiv\", \"xarray/tests/test_dask.py::test_optimize\", \"xarray/tests/test_dataset.py::TestDataset::test_repr\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_period_index\", \"xarray/tests/test_dataset.py::TestDataset::test_unicode_data\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_nep18\", \"xarray/tests/test_dataset.py::TestDataset::test_info\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_1d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_0d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_deprecated\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_compat\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_asarray\", \"xarray/tests/test_dataset.py::TestDataset::test_get_index\", \"xarray/tests/test_dataset.py::TestDataset::test_attr_access\", \"xarray/tests/test_dataset.py::TestDataset::test_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_modify_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_modify\", \"xarray/tests/test_dataset.py::TestDataset::test_update_index\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_set\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape\", \"xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_failures\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals\", \"xarray/tests/test_dataset.py::TestDataset::test_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_chunk\", \"xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_index\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_head\", \"xarray/tests/test_dataset.py::TestDataset::test_tail\", \"xarray/tests/test_dataset.py::TestDataset::test_thin\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_method\", \"xarray/tests/test_dataset.py::TestDataset::test_loc\", \"xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_warning\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_method\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_align\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exact\", \"xarray/tests/test_dataset.py::TestDataset::test_align_override\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_align_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_align_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_align_non_unique\", \"xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned\", \"xarray/tests/test_dataset.py::TestDataset::test_variable_indexing\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_variables\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_copy\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_rename\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_old_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_swap_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reorder_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_stack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_update\", \"xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_update_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_time_season\", \"xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_returns_new_type\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_iter\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math_virtual\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_nan\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_order\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_and_first\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_min_count\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_with_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_loffset\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_last_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_old_api\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_ds_da_are_the_same\", \"xarray/tests/test_dataset.py::TestDataset::test_ds_resample_apply_func_args\", \"xarray/tests/test_dataset.py::TestDataset::test_to_array\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns\", \"xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_pickle\", \"xarray/tests/test_dataset.py::TestDataset::test_lazy_load\", \"xarray/tests/test_dataset.py::TestDataset::test_dropna\", \"xarray/tests/test_dataset.py::TestDataset::test_fillna\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]\", \"xarray/tests/test_dataset.py::TestDataset::test_where\", \"xarray/tests/test_dataset.py::TestDataset::test_where_other\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_strings\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]\", \"xarray/tests/test_dataset.py::TestDataset::test_rank\", \"xarray/tests/test_dataset.py::TestDataset::test_count\", \"xarray/tests/test_dataset.py::TestDataset::test_map\", \"xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math\", \"xarray/tests/test_dataset.py::TestDataset::test_unary_ops\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords_none\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_multidim\", \"xarray/tests/test_dataset.py::TestDataset::test_real_and_imag\", \"xarray/tests/test_dataset.py::TestDataset::test_setattr_raises\", \"xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting\", \"xarray/tests/test_dataset.py::TestDataset::test_full_like\", \"xarray/tests/test_dataset.py::TestDataset::test_combine_first\", \"xarray/tests/test_dataset.py::TestDataset::test_sortby\", \"xarray/tests/test_dataset.py::TestDataset::test_attribute_access\", \"xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_output\", \"xarray/tests/test_dataset.py::TestDataset::test_pad\", \"xarray/tests/test_dataset.py::TestDataset::test_astype_attrs\", \"xarray/tests/test_dataset.py::test_isin[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dataset\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_error_message_on_set_supplied\", \"xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[None]\", \"xarray/tests/test_dataset.py::test_dir_non_string[None]\", \"xarray/tests/test_dataset.py::test_dir_unicode[None]\", \"xarray/tests/test_dataset.py::test_coarsen_absent_dims_error[1]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-False]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-True]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords_cftime\", \"xarray/tests/test_dataset.py::test_coarsen_keep_attrs\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[reduce-argument0]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[mean-argument1]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[construct-argument2]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[count-argument3]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs_deprecated\", \"xarray/tests/test_dataset.py::test_rolling_properties[1]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_exp[1]\", \"xarray/tests/test_dataset.py::test_rolling_exp_keep_attrs[1]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-False]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-center2]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[2]\", \"xarray/tests/test_dataset.py::test_differentiate[1-True]\", \"xarray/tests/test_dataset.py::test_differentiate[1-False]\", \"xarray/tests/test_dataset.py::test_differentiate[2-True]\", \"xarray/tests/test_dataset.py::test_differentiate[2-False]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[True]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[False]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[True]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[False]\", \"xarray/tests/test_dataset.py::test_integrate[True]\", \"xarray/tests/test_dataset.py::test_integrate[False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]\", \"xarray/tests/test_dataset.py::test_no_dict\", \"xarray/tests/test_dataset.py::test_subclass_slots\", \"xarray/tests/test_dataset.py::test_weakref\", \"xarray/tests/test_dataset.py::test_deepcopy_obj_array\", \"xarray/tests/test_interp.py::test_keywargs\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-x-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-x-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-y-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-y-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d[1-x-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[1-x-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d[1-y-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[1-y-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d_methods[cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d_methods[zero]\", \"xarray/tests/test_interp.py::test_interpolate_vectorize[False]\", \"xarray/tests/test_interp.py::test_interpolate_vectorize[True]\", \"xarray/tests/test_interp.py::test_interpolate_nd[3]\", \"xarray/tests/test_interp.py::test_interpolate_nd[4]\", \"xarray/tests/test_interp.py::test_interpolate_nd_nd\", \"xarray/tests/test_interp.py::test_interpolate_nd_with_nan\", \"xarray/tests/test_interp.py::test_interpolate_scalar[0-linear]\", \"xarray/tests/test_interp.py::test_interpolate_scalar[1-linear]\", \"xarray/tests/test_interp.py::test_interpolate_nd_scalar[3-linear]\", \"xarray/tests/test_interp.py::test_interpolate_nd_scalar[4-linear]\", \"xarray/tests/test_interp.py::test_nans[True]\", \"xarray/tests/test_interp.py::test_nans[False]\", \"xarray/tests/test_interp.py::test_errors[True]\", \"xarray/tests/test_interp.py::test_errors[False]\", \"xarray/tests/test_interp.py::test_dtype\", \"xarray/tests/test_interp.py::test_sorted\", \"xarray/tests/test_interp.py::test_dimension_wo_coords\", \"xarray/tests/test_interp.py::test_dataset\", \"xarray/tests/test_interp.py::test_interpolate_dimorder[0]\", \"xarray/tests/test_interp.py::test_interpolate_dimorder[3]\", \"xarray/tests/test_interp.py::test_interp_like\", \"xarray/tests/test_interp.py::test_datetime[x_new0-expected0]\", \"xarray/tests/test_interp.py::test_datetime[x_new1-expected1]\", \"xarray/tests/test_interp.py::test_datetime[x_new2-expected2]\", \"xarray/tests/test_interp.py::test_datetime[x_new3-expected3]\", \"xarray/tests/test_interp.py::test_datetime[x_new4-0.5]\", \"xarray/tests/test_interp.py::test_datetime_single_string\", \"xarray/tests/test_interp.py::test_cftime\", \"xarray/tests/test_interp.py::test_cftime_type_error\", \"xarray/tests/test_interp.py::test_cftime_list_of_strings\", \"xarray/tests/test_interp.py::test_cftime_single_string\", \"xarray/tests/test_interp.py::test_datetime_to_non_datetime_error\", \"xarray/tests/test_interp.py::test_cftime_to_non_cftime_error\", \"xarray/tests/test_interp.py::test_datetime_interp_noerror\", \"xarray/tests/test_interp.py::test_3641\", \"xarray/tests/test_interp.py::test_decompose[nearest]\", \"xarray/tests/test_interp.py::test_decompose[linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_advanced[linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_advanced[nearest]\", \"xarray/tests/test_variable.py::TestVariable::test_properties\", \"xarray/tests/test_variable.py::TestVariable::test_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_dict\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_1d\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_int\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_float\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_string\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_object\", \"xarray/tests/test_variable.py::TestVariable::test_0d_object_array_with_list\", \"xarray/tests/test_variable.py::TestVariable::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_0d_time_data\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_object_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_data\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestVariable::test_1d_math\", \"xarray/tests/test_variable.py::TestVariable::test_1d_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_array_interface\", \"xarray/tests/test_variable.py::TestVariable::test___array__\", \"xarray/tests/test_variable.py::TestVariable::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_eq_all_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestVariable::test_concat\", \"xarray/tests/test_variable.py::TestVariable::test_concat_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestVariable::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestVariable::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index\", \"xarray/tests/test_variable.py::TestVariable::test_copy_with_data\", \"xarray/tests/test_variable.py::TestVariable::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestVariable::test_replace\", \"xarray/tests/test_variable.py::TestVariable::test_real_and_imag\", \"xarray/tests/test_variable.py::TestVariable::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestVariable::test_multiindex\", \"xarray/tests/test_variable.py::TestVariable::test_load\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_advanced\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_uint\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_error\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg0-np_arg0]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg1-np_arg1]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg2-np_arg2]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg3-np_arg3]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg4-np_arg4]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window\", \"xarray/tests/test_variable.py::TestVariable::test_data_and_values\", \"xarray/tests/test_variable.py::TestVariable::test_numpy_same_methods\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion_scalar\", \"xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion_scalar\", \"xarray/tests/test_variable.py::TestVariable::test_0d_str\", \"xarray/tests/test_variable.py::TestVariable::test_0d_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_0d_timedelta\", \"xarray/tests/test_variable.py::TestVariable::test_equals_and_identical\", \"xarray/tests/test_variable.py::TestVariable::test_broadcast_equals\", \"xarray/tests/test_variable.py::TestVariable::test_no_conflicts\", \"xarray/tests/test_variable.py::TestVariable::test_repr\", \"xarray/tests/test_variable.py::TestVariable::test_repr_lazy_data\", \"xarray/tests/test_variable.py::TestVariable::test_detect_indexer_type\", \"xarray/tests/test_variable.py::TestVariable::test_indexer_type\", \"xarray/tests/test_variable.py::TestVariable::test_items\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_basic\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_2d_input\", \"xarray/tests/test_variable.py::TestVariable::test_isel\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_numpy_string\", \"xarray/tests/test_variable.py::TestVariable::test_indexing_0d_unicode\", \"xarray/tests/test_variable.py::TestVariable::test_shift[fill_value0]\", \"xarray/tests/test_variable.py::TestVariable::test_shift[2]\", \"xarray/tests/test_variable.py::TestVariable::test_shift[2.0]\", \"xarray/tests/test_variable.py::TestVariable::test_shift2d\", \"xarray/tests/test_variable.py::TestVariable::test_roll\", \"xarray/tests/test_variable.py::TestVariable::test_roll_consistency\", \"xarray/tests/test_variable.py::TestVariable::test_transpose\", \"xarray/tests/test_variable.py::TestVariable::test_transpose_0d\", \"xarray/tests/test_variable.py::TestVariable::test_squeeze\", \"xarray/tests/test_variable.py::TestVariable::test_get_axis_num\", \"xarray/tests/test_variable.py::TestVariable::test_set_dims\", \"xarray/tests/test_variable.py::TestVariable::test_set_dims_object_dtype\", \"xarray/tests/test_variable.py::TestVariable::test_stack\", \"xarray/tests/test_variable.py::TestVariable::test_stack_errors\", \"xarray/tests/test_variable.py::TestVariable::test_unstack\", \"xarray/tests/test_variable.py::TestVariable::test_unstack_errors\", \"xarray/tests/test_variable.py::TestVariable::test_unstack_2d\", \"xarray/tests/test_variable.py::TestVariable::test_stack_unstack_consistency\", \"xarray/tests/test_variable.py::TestVariable::test_broadcasting_math\", \"xarray/tests/test_variable.py::TestVariable::test_broadcasting_failures\", \"xarray/tests/test_variable.py::TestVariable::test_inplace_math\", \"xarray/tests/test_variable.py::TestVariable::test_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-0.25]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-0.25]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_chunked_dim_error\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[-0.1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[1.1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q3]\", \"xarray/tests/test_variable.py::TestVariable::test_rank_dask_raises\", \"xarray/tests/test_variable.py::TestVariable::test_rank\", \"xarray/tests/test_variable.py::TestVariable::test_big_endian_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_funcs\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims_dask\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keep_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_binary_ops_keep_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_count\", \"xarray/tests/test_variable.py::TestVariable::test_setitem\", \"xarray/tests/test_variable.py::TestVariable::test_setitem_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen_2d\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen_keep_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_properties\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_dict\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_int\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_float\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_string\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_object\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_0d_time_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_object_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_1d_math\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_1d_reduce\", \"xarray/tests/test_variable.py::TestVariableWithDask::test___array__\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_replace\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_real_and_imag\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_multiindex\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_load\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_advanced\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_error\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg0-np_arg0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg1-np_arg1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg2-np_arg2]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg3-np_arg3]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg4-np_arg4]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_fancy\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestVariableWithSparse::test_as_sparse\", \"xarray/tests/test_variable.py::TestIndexVariable::test_properties\", \"xarray/tests/test_variable.py::TestIndexVariable::test_attrs\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_dict\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_int\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_float\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_string\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_object\", \"xarray/tests/test_variable.py::TestIndexVariable::test_0d_object_array_with_list\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestIndexVariable::test_0d_time_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_object_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_1d_math\", \"xarray/tests/test_variable.py::TestIndexVariable::test_1d_reduce\", \"xarray/tests/test_variable.py::TestIndexVariable::test_array_interface\", \"xarray/tests/test_variable.py::TestIndexVariable::test___array__\", \"xarray/tests/test_variable.py::TestIndexVariable::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_eq_all_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_attrs\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestIndexVariable::test_replace\", \"xarray/tests/test_variable.py::TestIndexVariable::test_real_and_imag\", \"xarray/tests/test_variable.py::TestIndexVariable::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestIndexVariable::test_multiindex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_load\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestIndexVariable::test_init\", \"xarray/tests/test_variable.py::TestIndexVariable::test_to_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_multiindex_default_level_names\", \"xarray/tests/test_variable.py::TestIndexVariable::test_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_name\", \"xarray/tests/test_variable.py::TestIndexVariable::test_level_names\", \"xarray/tests/test_variable.py::TestIndexVariable::test_get_level_variable\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_periods\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_multiindex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[str]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[bytes]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_coordinate_alias\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_unchanged_types\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_converted_types\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_masked_array\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_datetime\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_zeros_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_ones_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_unsupported_type\", \"xarray/tests/test_variable.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_NumpyIndexingAdapter\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_LazilyOuterIndexedArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_CopyOnWriteArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_MemoryCachedArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_DaskIndexingAdapter\"]",
        "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
        "issue_title": "DataSet.update causes chunked dask DataArray to evalute its values eagerly ",
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/xarray/xarray/tests/test_dask.py",
        "searched_functions": [
            "def test_rechunk(self):\n        chunked = self.eager_array.chunk({\"x\": 2}).chunk({\"y\": 2})\n        assert chunked.chunks == ((2,) * 2, (2,) * 3)\n        self.assertLazyAndIdentical(self.lazy_array, chunked)",
            "def test_new_chunk(self):\n        chunked = self.eager_array.chunk()\n        assert chunked.data.name.startswith(\"xarray-<this-array>\")",
            "def test_optimize():\n    # https://github.com/pydata/xarray/issues/3698\n    a = dask.array.ones((10, 4), chunks=(5, 2))\n    arr = xr.DataArray(a).chunk(5)\n    (arr2,) = dask.optimize(arr)\n    arr2.compute()",
            "def test_raise_if_dask_computes():\n    data = da.from_array(np.random.RandomState(0).randn(4, 6), chunks=(2, 2))\n    with raises_regex(RuntimeError, \"Too many computes\"):\n        with raise_if_dask_computes():\n            data.compute()",
            "def test_compute(self):\n        u = self.eager_array\n        v = self.lazy_array\n\n        assert dask.is_dask_collection(v)\n        (v2,) = dask.compute(v + 1)\n        assert not dask.is_dask_collection(v2)\n\n        assert ((u + 1).data == v2.data).all()",
            "def test_values(self):\n        # Test that invoking the values property does not convert the dask\n        # backend to numpy\n        a = DataArray([1, 2]).chunk()\n        assert not a._in_memory\n        assert a.values.tolist() == [1, 2]\n        assert not a._in_memory",
            "def test_dataarray_pickle(self):\n        # Test that pickling/unpickling converts the dask backend\n        # to numpy in neither the data variable nor the non-index coords\n        data = build_dask_array(\"data\")\n        nonindex_coord = build_dask_array(\"coord\")\n        a1 = DataArray(data, dims=[\"x\"], coords={\"y\": (\"x\", nonindex_coord)})\n        a1.compute()\n        assert not a1._in_memory\n        assert not a1.coords[\"y\"]._in_memory\n        assert kernel_call_count == 2\n        a2 = pickle.loads(pickle.dumps(a1))\n        assert kernel_call_count == 2\n        assert_identical(a1, a2)\n        assert not a1._in_memory\n        assert not a2._in_memory\n        assert not a1.coords[\"y\"]._in_memory\n        assert not a2.coords[\"y\"]._in_memory",
            "def setUp(self):\n        self.values = np.random.randn(4, 6)\n        self.data = da.from_array(self.values, chunks=(2, 2))\n        self.eager_array = DataArray(\n            self.values, coords={\"x\": range(4)}, dims=(\"x\", \"y\"), name=\"foo\"\n        )\n        self.lazy_array = DataArray(\n            self.data, coords={\"x\": range(4)}, dims=(\"x\", \"y\"), name=\"foo\"\n        )",
            "def test_dask_kwargs_dataarray(method):\n    data = da.from_array(np.arange(3), chunks=(2,))\n    x = DataArray(data)\n    if method in [\"load\", \"compute\"]:\n        dask_func = \"dask.array.compute\"\n    else:\n        dask_func = \"dask.persist\"\n    # args should be passed on to \"dask_func\"\n    with mock.patch(dask_func) as mock_func:\n        getattr(x, method)(foo=\"bar\")\n    mock_func.assert_called_with(data, foo=\"bar\")",
            "def test_to_dask_dataframe_not_daskarray(self):\n        # Test if DataArray is not a dask array\n        x = np.random.randn(10)\n        y = np.arange(10, dtype=\"uint8\")\n        t = list(\"abcdefghij\")\n\n        ds = Dataset({\"a\": (\"t\", x), \"b\": (\"t\", y), \"t\": (\"t\", t)})\n\n        expected = pd.DataFrame({\"a\": x, \"b\": y}, index=pd.Index(t, name=\"t\"))\n\n        actual = ds.to_dask_dataframe(set_index=True)\n        assert isinstance(actual, dd.DataFrame)\n        assert_frame_equal(expected, actual.compute())"
        ]
    },
    {
        "repo": "pydata/xarray",
        "instance_id": "pydata__xarray-3364",
        "base_commit": "863e49066ca4d61c9adfe62aca3bf21b90e1af8c",
        "patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -312,15 +312,9 @@ def _dataset_concat(\n         to_merge = {var: [] for var in variables_to_merge}\n \n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n-\n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds:\n+                    to_merge[var].append(ds.variables[var])\n \n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(\n",
        "test_patch": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -782,12 +782,11 @@ def test_auto_combine_previously_failed(self):\n         actual = auto_combine(datasets, concat_dim=\"t\")\n         assert_identical(expected, actual)\n \n-    def test_auto_combine_still_fails(self):\n-        # concat can't handle new variables (yet):\n-        # https://github.com/pydata/xarray/issues/508\n+    def test_auto_combine_with_new_variables(self):\n         datasets = [Dataset({\"x\": 0}, {\"y\": 0}), Dataset({\"x\": 1}, {\"y\": 1, \"z\": 1})]\n-        with pytest.raises(ValueError):\n-            auto_combine(datasets, \"y\")\n+        actual = auto_combine(datasets, \"y\")\n+        expected = Dataset({\"x\": (\"y\", [0, 1])}, {\"y\": [0, 1], \"z\": 1})\n+        assert_identical(expected, actual)\n \n     def test_auto_combine_no_concat(self):\n         objs = [Dataset({\"x\": 0}), Dataset({\"y\": 1})]\ndiff --git a/xarray/tests/test_concat.py b/xarray/tests/test_concat.py\n--- a/xarray/tests/test_concat.py\n+++ b/xarray/tests/test_concat.py\n@@ -68,6 +68,22 @@ def test_concat_simple(self, data, dim, coords):\n         datasets = [g for _, g in data.groupby(dim, squeeze=False)]\n         assert_identical(data, concat(datasets, dim, coords=coords))\n \n+    def test_concat_merge_variables_present_in_some_datasets(self, data):\n+        # coordinates present in some datasets but not others\n+        ds1 = Dataset(data_vars={\"a\": (\"y\", [0.1])}, coords={\"x\": 0.1})\n+        ds2 = Dataset(data_vars={\"a\": (\"y\", [0.2])}, coords={\"z\": 0.2})\n+        actual = concat([ds1, ds2], dim=\"y\", coords=\"minimal\")\n+        expected = Dataset({\"a\": (\"y\", [0.1, 0.2])}, coords={\"x\": 0.1, \"z\": 0.2})\n+        assert_identical(expected, actual)\n+\n+        # data variables present in some datasets but not others\n+        split_data = [data.isel(dim1=slice(3)), data.isel(dim1=slice(3, None))]\n+        data0, data1 = deepcopy(split_data)\n+        data1[\"foo\"] = (\"bar\", np.random.randn(10))\n+        actual = concat([data0, data1], \"dim1\")\n+        expected = data.copy().assign(foo=data1.foo)\n+        assert_identical(expected, actual)\n+\n     def test_concat_2(self, data):\n         dim = \"dim2\"\n         datasets = [g for _, g in data.groupby(dim, squeeze=True)]\n@@ -190,11 +206,6 @@ def test_concat_errors(self):\n             concat([data0, data1], \"dim1\", compat=\"identical\")\n         assert_identical(data, concat([data0, data1], \"dim1\", compat=\"equals\"))\n \n-        with raises_regex(ValueError, \"present in some datasets\"):\n-            data0, data1 = deepcopy(split_data)\n-            data1[\"foo\"] = (\"bar\", np.random.randn(10))\n-            concat([data0, data1], \"dim1\")\n-\n         with raises_regex(ValueError, \"compat.* invalid\"):\n             concat(split_data, \"dim1\", compat=\"foobar\")\n \n",
        "problem_statement": "Ignore missing variables when concatenating datasets?\nSeveral users (@raj-kesavan, @richardotis, now myself) have wondered about how to concatenate xray Datasets with different variables.\n\nWith the current `xray.concat`, you need to awkwardly create dummy variables filled with `NaN` in datasets that don't have them (or drop mismatched variables entirely). Neither of these are great options -- `concat` should have an option (the default?) to take care of this for the user.\n\nThis would also be more consistent with `pd.concat`, which takes a more relaxed approach to matching dataframes with different variables (it does an outer join).\n\n",
        "hints_text": "Closing as stale, please reopen if still relevant",
        "created_at": "2019-10-01T21:15:54Z",
        "version": "0.12",
        "FAIL_TO_PASS": "[\"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_with_new_variables\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_merge_variables_present_in_some_datasets\"]",
        "PASS_TO_PASS": "[\"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_1d\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_2d\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_3d\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_single_dataset\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_redundant_nesting\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_ignore_empty_list\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_uneven_depth_input\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_uneven_length_input\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_infer_from_datasets\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_1d\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_2d\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_no_dimension_coords\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_coord_not_monotonic\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_coord_monotonically_decreasing\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_no_concatenation_needed\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_2d_plus_bystander_dim\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_string_coords\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_lexicographic_sort_string_coords\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_datetime_coords\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id0-new_id0]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id1-new_id1]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id2-new_id2]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id3-new_id3]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id4-new_id4]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_get_new_tile_ids\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_once[dim1]\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_once[new_dim]\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_only_first_dim\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_twice[dim1]\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_twice[new_dim]\", \"xarray/tests/test_combine.py::TestCheckShapeTileIDs::test_check_depths\", \"xarray/tests/test_combine.py::TestCheckShapeTileIDs::test_check_lengths\", \"xarray/tests/test_combine.py::TestNestedCombine::test_nested_concat\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[outer-expected0]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[inner-expected1]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[left-expected2]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[right-expected3]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join_exact\", \"xarray/tests/test_combine.py::TestNestedCombine::test_empty_input\", \"xarray/tests/test_combine.py::TestNestedCombine::test_nested_concat_along_new_dim\", \"xarray/tests/test_combine.py::TestNestedCombine::test_nested_merge\", \"xarray/tests/test_combine.py::TestNestedCombine::test_concat_multiple_dims\", \"xarray/tests/test_combine.py::TestNestedCombine::test_concat_name_symmetry\", \"xarray/tests/test_combine.py::TestNestedCombine::test_concat_one_dim_merge_another\", \"xarray/tests/test_combine.py::TestNestedCombine::test_auto_combine_2d\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_missing_data_new_dim\", \"xarray/tests/test_combine.py::TestNestedCombine::test_invalid_hypercube_input\", \"xarray/tests/test_combine.py::TestNestedCombine::test_merge_one_dim_concat_another\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_concat_over_redundant_nesting\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_fill_value[fill_value0]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_fill_value[2]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_fill_value[2.0]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[outer-expected0]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[inner-expected1]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[left-expected2]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[right-expected3]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join_exact\", \"xarray/tests/test_combine.py::TestCombineAuto::test_infer_order_from_coords\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_leaving_bystander_dimensions\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords_previously_failed\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords_still_fails\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords_no_concat\", \"xarray/tests/test_combine.py::TestCombineAuto::test_check_for_impossible_ordering\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_previously_failed\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_no_concat\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_order_by_appearance_not_coords\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_fill_value[fill_value0]\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_fill_value[2]\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_fill_value[2.0]\", \"xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_with_concat_dim\", \"xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_with_merge_and_concat\", \"xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_with_coords\", \"xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_without_coords\", \"xarray/tests/test_concat.py::test_concat_compat\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_2\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-all]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-all]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_precedence\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_data_vars\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_constant_index\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_size0\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_autoalign\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_errors\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_join_kwarg\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_promote_shape\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_do_not_promote\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_is_variable\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_multiindex\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[fill_value0]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2.0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_encoding\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_lazy\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[fill_value0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2.0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_join_kwarg\"]",
        "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
        "issue_title": "Ignore missing variables when concatenating datasets?",
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/xarray/xarray/tests/test_concat.py",
        "searched_functions": [
            "def test_concat_compat():\n    ds1 = Dataset(\n        {\n            \"has_x_y\": ((\"y\", \"x\"), [[1, 2]]),\n            \"has_x\": (\"x\", [1, 2]),\n            \"no_x_y\": (\"z\", [1, 2]),\n        },\n        coords={\"x\": [0, 1], \"y\": [0], \"z\": [-1, -2]},\n    )\n    ds2 = Dataset(\n        {\n            \"has_x_y\": ((\"y\", \"x\"), [[3, 4]]),\n            \"has_x\": (\"x\", [1, 2]),\n            \"no_x_y\": ((\"q\", \"z\"), [[1, 2]]),\n        },\n        coords={\"x\": [0, 1], \"y\": [1], \"z\": [-1, -2], \"q\": [0]},\n    )\n\n    result = concat([ds1, ds2], dim=\"y\", data_vars=\"minimal\", compat=\"broadcast_equals\")\n    assert_equal(ds2.no_x_y, result.no_x_y.transpose())\n\n    for var in [\"has_x\", \"no_x_y\"]:\n        assert \"y\" not in result[var]\n\n    with raises_regex(ValueError, \"coordinates in some datasets but not others\"):\n        concat([ds1, ds2], dim=\"q\")\n    with raises_regex(ValueError, \"'q' is not present in all datasets\"):\n        concat([ds2, ds1], dim=\"q\")",
            "def test_concat_data_vars(self):\n        data = Dataset({\"foo\": (\"x\", np.random.randn(10))})\n        objs = [data.isel(x=slice(5)), data.isel(x=slice(5, None))]\n        for data_vars in [\"minimal\", \"different\", \"all\", [], [\"foo\"]]:\n            actual = concat(objs, dim=\"x\", data_vars=data_vars)\n            assert_identical(data, actual)",
            "def test_concat_promote_shape(self):\n        # mixed dims within variables\n        objs = [Dataset({}, {\"x\": 0}), Dataset({\"x\": [1]})]\n        actual = concat(objs, \"x\")\n        expected = Dataset({\"x\": [0, 1]})\n        assert_identical(actual, expected)\n\n        objs = [Dataset({\"x\": [0]}), Dataset({}, {\"x\": 1})]\n        actual = concat(objs, \"x\")\n        assert_identical(actual, expected)\n\n        # mixed dims between variables\n        objs = [Dataset({\"x\": [2], \"y\": 3}), Dataset({\"x\": [4], \"y\": 5})]\n        actual = concat(objs, \"x\")\n        expected = Dataset({\"x\": [2, 4], \"y\": (\"x\", [3, 5])})\n        assert_identical(actual, expected)\n\n        # mixed dims in coord variable\n        objs = [Dataset({\"x\": [0]}, {\"y\": -1}), Dataset({\"x\": [1]}, {\"y\": (\"x\", [-2])})]\n        actual = concat(objs, \"x\")\n        expected = Dataset({\"x\": [0, 1]}, {\"y\": (\"x\", [-1, -2])})\n        assert_identical(actual, expected)\n\n        # scalars with mixed lengths along concat dim -- values should repeat\n        objs = [Dataset({\"x\": [0]}, {\"y\": -1}), Dataset({\"x\": [1, 2]}, {\"y\": -2})]\n        actual = concat(objs, \"x\")\n        expected = Dataset({\"x\": [0, 1, 2]}, {\"y\": (\"x\", [-1, -2, -2])})\n        assert_identical(actual, expected)\n\n        # broadcast 1d x 1d -> 2d\n        objs = [\n            Dataset({\"z\": (\"x\", [-1])}, {\"x\": [0], \"y\": [0]}),\n            Dataset({\"z\": (\"y\", [1])}, {\"x\": [1], \"y\": [0]}),\n        ]\n        actual = concat(objs, \"x\")\n        expected = Dataset({\"z\": ((\"x\", \"y\"), [[-1], [1]])}, {\"x\": [0, 1], \"y\": [0]})\n        assert_identical(actual, expected)",
            "def test_concat_dim_precedence(self, data):\n        # verify that the dim argument takes precedence over\n        # concatenating dataset variables of the same name\n        dim = (2 * data[\"dim1\"]).rename(\"dim1\")\n        datasets = [g for _, g in data.groupby(\"dim1\", squeeze=False)]\n        expected = data.copy()\n        expected[\"dim1\"] = dim\n        assert_identical(expected, concat(datasets, dim))",
            "def test_concat_constant_index(self):\n        # GH425\n        ds1 = Dataset({\"foo\": 1.5}, {\"y\": 1})\n        ds2 = Dataset({\"foo\": 2.5}, {\"y\": 1})\n        expected = Dataset({\"foo\": (\"y\", [1.5, 2.5]), \"y\": [1, 1]})\n        for mode in [\"different\", \"all\", [\"foo\"]]:\n            actual = concat([ds1, ds2], \"y\", data_vars=mode)\n            assert_identical(expected, actual)\n        with raises_regex(merge.MergeError, \"conflicting values\"):\n            # previously dim=\"y\", and raised error which makes no sense.\n            # \"foo\" has dimension \"y\" so minimal should concatenate it?\n            concat([ds1, ds2], \"new_dim\", data_vars=\"minimal\")",
            "def test_concat_dim_is_variable(self):\n        objs = [Dataset({\"x\": 0}), Dataset({\"x\": 1})]\n        coord = Variable(\"y\", [3, 4])\n        expected = Dataset({\"x\": (\"y\", [0, 1]), \"y\": [3, 4]})\n        actual = concat(objs, coord)\n        assert_identical(actual, expected)",
            "def test_concat_coords(self):\n        data = Dataset({\"foo\": (\"x\", np.random.randn(10))})\n        expected = data.assign_coords(c=(\"x\", [0] * 5 + [1] * 5))\n        objs = [\n            data.isel(x=slice(5)).assign_coords(c=0),\n            data.isel(x=slice(5, None)).assign_coords(c=1),\n        ]\n        for coords in [\"different\", \"all\", [\"c\"]]:\n            actual = concat(objs, dim=\"x\", coords=coords)\n            assert_identical(expected, actual)\n        for coords in [\"minimal\", []]:\n            with raises_regex(merge.MergeError, \"conflicting values\"):\n                concat(objs, dim=\"x\", coords=coords)",
            "def test_concat_join_kwarg(self):\n        ds1 = Dataset({\"a\": ((\"x\", \"y\"), [[0]])}, coords={\"x\": [0], \"y\": [0]})\n        ds2 = Dataset({\"a\": ((\"x\", \"y\"), [[0]])}, coords={\"x\": [1], \"y\": [0.0001]})\n\n        expected = {}\n        expected[\"outer\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), [[0, np.nan], [np.nan, 0]])},\n            {\"x\": [0, 1], \"y\": [0, 0.0001]},\n        )\n        expected[\"inner\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), [[], []])}, {\"x\": [0, 1], \"y\": []}\n        )\n        expected[\"left\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), np.array([0, np.nan], ndmin=2).T)},\n            coords={\"x\": [0, 1], \"y\": [0]},\n        )\n        expected[\"right\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), np.array([np.nan, 0], ndmin=2).T)},\n            coords={\"x\": [0, 1], \"y\": [0.0001]},\n        )\n        expected[\"override\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), np.array([0, 0], ndmin=2).T)},\n            coords={\"x\": [0, 1], \"y\": [0]},\n        )\n\n        with raises_regex(ValueError, \"indexes along dimension 'y'\"):\n            actual = concat([ds1, ds2], join=\"exact\", dim=\"x\")\n\n        for join in expected:\n            actual = concat([ds1, ds2], join=join, dim=\"x\")\n            assert_equal(actual, expected[join])",
            "def test_concat(self):\n        ds = Dataset(\n            {\n                \"foo\": ([\"x\", \"y\"], np.random.random((2, 3))),\n                \"bar\": ([\"x\", \"y\"], np.random.random((2, 3))),\n            },\n            {\"x\": [0, 1]},\n        )\n        foo = ds[\"foo\"]\n        bar = ds[\"bar\"]\n\n        # from dataset array:\n        expected = DataArray(\n            np.array([foo.values, bar.values]),\n            dims=[\"w\", \"x\", \"y\"],\n            coords={\"x\": [0, 1]},\n        )\n        actual = concat([foo, bar], \"w\")\n        assert_equal(expected, actual)\n        # from iteration:\n        grouped = [g for _, g in foo.groupby(\"x\")]\n        stacked = concat(grouped, ds[\"x\"])\n        assert_identical(foo, stacked)\n        # with an index as the 'dim' argument\n        stacked = concat(grouped, ds.indexes[\"x\"])\n        assert_identical(foo, stacked)\n\n        actual = concat([foo[0], foo[1]], pd.Index([0, 1])).reset_coords(drop=True)\n        expected = foo[:2].rename({\"x\": \"concat_dim\"})\n        assert_identical(expected, actual)\n\n        actual = concat([foo[0], foo[1]], [0, 1]).reset_coords(drop=True)\n        expected = foo[:2].rename({\"x\": \"concat_dim\"})\n        assert_identical(expected, actual)\n\n        with raises_regex(ValueError, \"not identical\"):\n            concat([foo, bar], dim=\"w\", compat=\"identical\")\n\n        with raises_regex(ValueError, \"not a valid argument\"):\n            concat([foo, bar], dim=\"w\", data_vars=\"minimal\")",
            "def test_concat_join_kwarg(self):\n        ds1 = Dataset(\n            {\"a\": ((\"x\", \"y\"), [[0]])}, coords={\"x\": [0], \"y\": [0]}\n        ).to_array()\n        ds2 = Dataset(\n            {\"a\": ((\"x\", \"y\"), [[0]])}, coords={\"x\": [1], \"y\": [0.0001]}\n        ).to_array()\n\n        expected = {}\n        expected[\"outer\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), [[0, np.nan], [np.nan, 0]])},\n            {\"x\": [0, 1], \"y\": [0, 0.0001]},\n        )\n        expected[\"inner\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), [[], []])}, {\"x\": [0, 1], \"y\": []}\n        )\n        expected[\"left\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), np.array([0, np.nan], ndmin=2).T)},\n            coords={\"x\": [0, 1], \"y\": [0]},\n        )\n        expected[\"right\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), np.array([np.nan, 0], ndmin=2).T)},\n            coords={\"x\": [0, 1], \"y\": [0.0001]},\n        )\n        expected[\"override\"] = Dataset(\n            {\"a\": ((\"x\", \"y\"), np.array([0, 0], ndmin=2).T)},\n            coords={\"x\": [0, 1], \"y\": [0]},\n        )\n\n        with raises_regex(ValueError, \"indexes along dimension 'y'\"):\n            actual = concat([ds1, ds2], join=\"exact\", dim=\"x\")\n\n        for join in expected:\n            actual = concat([ds1, ds2], join=join, dim=\"x\")\n            assert_equal(actual, expected[join].to_array())"
        ]
    },
    {
        "repo": "pydata/xarray",
        "instance_id": "pydata__xarray-4094",
        "base_commit": "a64cf2d5476e7bbda099b34c40b7be1880dbd39a",
        "patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,7 @@ def to_unstacked_dataset(self, dim, level=0):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            data_dict[k] = self.sel({variable_dim: k}, drop=True).squeeze(drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\n",
        "test_patch": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3031,6 +3031,14 @@ def test_to_stacked_array_dtype_dims(self):\n         assert y.dims == (\"x\", \"features\")\n \n     def test_to_stacked_array_to_unstacked_dataset(self):\n+\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+\n         # make a two dimensional dataset\n         a, b = create_test_stacked_array()\n         D = xr.Dataset({\"a\": a, \"b\": b})\n",
        "problem_statement": "to_unstacked_dataset broken for single-dim variables\n<!-- A short summary of the issue, if appropriate -->\r\n\r\n\r\n#### MCVE Code Sample\r\n\r\n```python\r\narr = xr.DataArray(\r\n     np.arange(3),\r\n     coords=[(\"x\", [0, 1, 2])],\r\n )\r\ndata = xr.Dataset({\"a\": arr, \"b\": arr})\r\nstacked = data.to_stacked_array('y', sample_dims=['x'])\r\nunstacked = stacked.to_unstacked_dataset('y')\r\n# MergeError: conflicting values for variable 'y' on objects to be combined. You can skip this check by specifying compat='override'.\r\n```\r\n\r\n#### Expected Output\r\nA working roundtrip.\r\n\r\n#### Problem Description\r\nI need to stack a bunch of variables and later unstack them again, however this doesn't work if the variables only have a single dimension.\r\n\r\n#### Versions\r\n\r\n<details><summary>Output of <tt>xr.show_versions()</tt></summary>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.7.3 (default, Mar 27 2019, 22:11:17) \r\n[GCC 7.3.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 4.15.0-96-generic\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_GB.UTF-8\r\nLOCALE: en_GB.UTF-8\r\nlibhdf5: 1.10.4\r\nlibnetcdf: 4.6.2\r\n\r\nxarray: 0.15.1\r\npandas: 1.0.3\r\nnumpy: 1.17.3\r\nscipy: 1.3.1\r\nnetCDF4: 1.4.2\r\npydap: None\r\nh5netcdf: None\r\nh5py: 2.10.0\r\nNio: None\r\nzarr: None\r\ncftime: 1.0.4.2\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: None\r\ndask: 2.10.1\r\ndistributed: 2.10.0\r\nmatplotlib: 3.1.1\r\ncartopy: None\r\nseaborn: 0.10.0\r\nnumbagg: None\r\nsetuptools: 41.0.0\r\npip: 19.0.3\r\nconda: 4.8.3\r\npytest: 5.3.5\r\nIPython: 7.9.0\r\nsphinx: None\r\n\r\n\r\n</details>\r\n\n",
        "hints_text": "",
        "created_at": "2020-05-26T00:36:02Z",
        "version": "0.12",
        "FAIL_TO_PASS": "[\"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset\"]",
        "PASS_TO_PASS": "[\"xarray/tests/test_dataset.py::TestDataset::test_repr\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_period_index\", \"xarray/tests/test_dataset.py::TestDataset::test_unicode_data\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_nep18\", \"xarray/tests/test_dataset.py::TestDataset::test_info\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_1d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_0d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_deprecated\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_compat\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_asarray\", \"xarray/tests/test_dataset.py::TestDataset::test_get_index\", \"xarray/tests/test_dataset.py::TestDataset::test_attr_access\", \"xarray/tests/test_dataset.py::TestDataset::test_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_modify_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_modify\", \"xarray/tests/test_dataset.py::TestDataset::test_update_index\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_set\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape\", \"xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_failures\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals\", \"xarray/tests/test_dataset.py::TestDataset::test_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_chunk\", \"xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_index\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_head\", \"xarray/tests/test_dataset.py::TestDataset::test_tail\", \"xarray/tests/test_dataset.py::TestDataset::test_thin\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_method\", \"xarray/tests/test_dataset.py::TestDataset::test_loc\", \"xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_warning\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_method\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exact\", \"xarray/tests/test_dataset.py::TestDataset::test_align_override\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_align_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_align_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_align_non_unique\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned\", \"xarray/tests/test_dataset.py::TestDataset::test_variable_indexing\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_variables\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_copy\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_rename\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_old_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_swap_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reorder_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_stack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_update\", \"xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_update_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_time_season\", \"xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_returns_new_type\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_iter\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math_virtual\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_nan\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_order\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_and_first\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_min_count\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_with_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_loffset\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_last_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_old_api\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_ds_da_are_the_same\", \"xarray/tests/test_dataset.py::TestDataset::test_ds_resample_apply_func_args\", \"xarray/tests/test_dataset.py::TestDataset::test_to_array\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns\", \"xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_pickle\", \"xarray/tests/test_dataset.py::TestDataset::test_lazy_load\", \"xarray/tests/test_dataset.py::TestDataset::test_dropna\", \"xarray/tests/test_dataset.py::TestDataset::test_fillna\", \"xarray/tests/test_dataset.py::TestDataset::test_where\", \"xarray/tests/test_dataset.py::TestDataset::test_where_other\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_strings\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]\", \"xarray/tests/test_dataset.py::TestDataset::test_rank\", \"xarray/tests/test_dataset.py::TestDataset::test_count\", \"xarray/tests/test_dataset.py::TestDataset::test_map\", \"xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math\", \"xarray/tests/test_dataset.py::TestDataset::test_unary_ops\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords_none\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_multidim\", \"xarray/tests/test_dataset.py::TestDataset::test_real_and_imag\", \"xarray/tests/test_dataset.py::TestDataset::test_setattr_raises\", \"xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting\", \"xarray/tests/test_dataset.py::TestDataset::test_full_like\", \"xarray/tests/test_dataset.py::TestDataset::test_combine_first\", \"xarray/tests/test_dataset.py::TestDataset::test_sortby\", \"xarray/tests/test_dataset.py::TestDataset::test_attribute_access\", \"xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_output\", \"xarray/tests/test_dataset.py::TestDataset::test_pad\", \"xarray/tests/test_dataset.py::test_isin[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dataset\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_error_message_on_set_supplied\", \"xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[None]\", \"xarray/tests/test_dataset.py::test_dir_non_string[None]\", \"xarray/tests/test_dataset.py::test_dir_unicode[None]\", \"xarray/tests/test_dataset.py::test_coarsen_absent_dims_error[1]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-False]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-True]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords_cftime\", \"xarray/tests/test_dataset.py::test_coarsen_keep_attrs\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs\", \"xarray/tests/test_dataset.py::test_rolling_properties[1]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_exp[1]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-False]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataset.py::test_differentiate[1-True]\", \"xarray/tests/test_dataset.py::test_differentiate[1-False]\", \"xarray/tests/test_dataset.py::test_differentiate[2-True]\", \"xarray/tests/test_dataset.py::test_differentiate[2-False]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[True]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[False]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[True]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[False]\", \"xarray/tests/test_dataset.py::test_integrate[True]\", \"xarray/tests/test_dataset.py::test_integrate[False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]\", \"xarray/tests/test_dataset.py::test_no_dict\", \"xarray/tests/test_dataset.py::test_subclass_slots\", \"xarray/tests/test_dataset.py::test_weakref\"]",
        "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
        "issue_title": "to_unstacked_dataset broken for single-dim variables",
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/xarray/xarray/tests/test_dataset.py",
        "searched_functions": [
            "def test_unstack_errors(self):\n        ds = Dataset({\"x\": [1, 2, 3]})\n        with raises_regex(ValueError, \"does not contain the dimensions\"):\n            ds.unstack(\"foo\")\n        with raises_regex(ValueError, \"do not have a MultiIndex\"):\n            ds.unstack(\"x\")",
            "def test_unstack_sparse(self):\n        ds = xr.Dataset(\n            {\"var\": ((\"x\",), np.arange(6))},\n            coords={\"x\": [0, 1, 2] * 2, \"y\": ((\"x\",), [\"a\"] * 3 + [\"b\"] * 3)},\n        )\n        # make ds incomplete\n        ds = ds.isel(x=[0, 2, 3, 4]).set_index(index=[\"x\", \"y\"])\n        # test fill_value\n        actual = ds.unstack(\"index\", sparse=True)\n        expected = ds.unstack(\"index\")\n        assert actual[\"var\"].variable._to_dense().equals(expected[\"var\"].variable)\n        assert actual[\"var\"].data.density < 1.0\n\n        actual = ds[\"var\"].unstack(\"index\", sparse=True)\n        expected = ds[\"var\"].unstack(\"index\")\n        assert actual.variable._to_dense().equals(expected.variable)\n        assert actual.data.density < 1.0",
            "def test_unstack(self):\n        index = pd.MultiIndex.from_product([[0, 1], [\"a\", \"b\"]], names=[\"x\", \"y\"])\n        ds = Dataset({\"b\": (\"z\", [0, 1, 2, 3]), \"z\": index})\n        expected = Dataset(\n            {\"b\": ((\"x\", \"y\"), [[0, 1], [2, 3]]), \"x\": [0, 1], \"y\": [\"a\", \"b\"]}\n        )\n        for dim in [\"z\", [\"z\"], None]:\n            actual = ds.unstack(dim)\n            assert_identical(actual, expected)",
            "def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n        # test when variables have different dimensionality\n        a, b = create_test_stacked_array()\n        sample_dims = [\"x\"]\n        D = xr.Dataset({\"a\": a, \"b\": b.isel(y=0)})\n\n        y = D.to_stacked_array(\"features\", sample_dims)\n        x = y.to_unstacked_dataset(\"features\")\n        assert_identical(D, x)",
            "def test_to_stacked_array_invalid_sample_dims(self):\n        data = xr.Dataset(\n            data_vars={\"a\": ((\"x\", \"y\"), [[0, 1, 2], [3, 4, 5]]), \"b\": (\"x\", [6, 7])},\n            coords={\"y\": [\"u\", \"v\", \"w\"]},\n        )\n        with pytest.raises(ValueError):\n            data.to_stacked_array(\"features\", sample_dims=[\"y\"])",
            "def test_stack_unstack_slow(self):\n        ds = Dataset(\n            {\n                \"a\": (\"x\", [0, 1]),\n                \"b\": ((\"x\", \"y\"), [[0, 1], [2, 3]]),\n                \"x\": [0, 1],\n                \"y\": [\"a\", \"b\"],\n            }\n        )\n        stacked = ds.stack(z=[\"x\", \"y\"])\n        actual = stacked.isel(z=slice(None, None, -1)).unstack(\"z\")\n        assert actual.broadcast_equals(ds)\n\n        stacked = ds[[\"b\"]].stack(z=[\"x\", \"y\"])\n        actual = stacked.isel(z=slice(None, None, -1)).unstack(\"z\")\n        assert actual.identical(ds[[\"b\"]])",
            "def test_to_stacked_array_to_unstacked_dataset(self):\n        # make a two dimensional dataset\n        a, b = create_test_stacked_array()\n        D = xr.Dataset({\"a\": a, \"b\": b})\n        sample_dims = [\"x\"]\n        y = D.to_stacked_array(\"features\", sample_dims).transpose(\"x\", \"features\")\n\n        x = y.to_unstacked_dataset(\"features\")\n        assert_identical(D, x)\n\n        # test on just one sample\n        x0 = y[0].to_unstacked_dataset(\"features\")\n        d0 = D.isel(x=0)\n        assert_identical(d0, x0)",
            "def test_stack_unstack_fast(self):\n        ds = Dataset(\n            {\n                \"a\": (\"x\", [0, 1]),\n                \"b\": ((\"x\", \"y\"), [[0, 1], [2, 3]]),\n                \"x\": [0, 1],\n                \"y\": [\"a\", \"b\"],\n            }\n        )\n        actual = ds.stack(z=[\"x\", \"y\"]).unstack(\"z\")\n        assert actual.broadcast_equals(ds)\n\n        actual = ds[[\"b\"]].stack(z=[\"x\", \"y\"]).unstack(\"z\")\n        assert actual.identical(ds[[\"b\"]])",
            "def test_unstack_fill_value(self):\n        ds = xr.Dataset(\n            {\"var\": ((\"x\",), np.arange(6))},\n            coords={\"x\": [0, 1, 2] * 2, \"y\": ((\"x\",), [\"a\"] * 3 + [\"b\"] * 3)},\n        )\n        # make ds incomplete\n        ds = ds.isel(x=[0, 2, 3, 4]).set_index(index=[\"x\", \"y\"])\n        # test fill_value\n        actual = ds.unstack(\"index\", fill_value=-1)\n        expected = ds.unstack(\"index\").fillna(-1).astype(int)\n        assert actual[\"var\"].dtype == int\n        assert_equal(actual, expected)\n\n        actual = ds[\"var\"].unstack(\"index\", fill_value=-1)\n        expected = ds[\"var\"].unstack(\"index\").fillna(-1).astype(int)\n        assert actual.equals(expected)",
            "def test_stack(self):\n        ds = Dataset(\n            {\"a\": (\"x\", [0, 1]), \"b\": ((\"x\", \"y\"), [[0, 1], [2, 3]]), \"y\": [\"a\", \"b\"]}\n        )\n\n        exp_index = pd.MultiIndex.from_product([[0, 1], [\"a\", \"b\"]], names=[\"x\", \"y\"])\n        expected = Dataset(\n            {\"a\": (\"z\", [0, 0, 1, 1]), \"b\": (\"z\", [0, 1, 2, 3]), \"z\": exp_index}\n        )\n        actual = ds.stack(z=[\"x\", \"y\"])\n        assert_identical(expected, actual)\n\n        actual = ds.stack(z=[...])\n        assert_identical(expected, actual)\n\n        # non list dims with ellipsis\n        actual = ds.stack(z=(...,))\n        assert_identical(expected, actual)\n\n        # ellipsis with given dim\n        actual = ds.stack(z=[..., \"y\"])\n        assert_identical(expected, actual)\n\n        exp_index = pd.MultiIndex.from_product([[\"a\", \"b\"], [0, 1]], names=[\"y\", \"x\"])\n        expected = Dataset(\n            {\"a\": (\"z\", [0, 1, 0, 1]), \"b\": (\"z\", [0, 2, 1, 3]), \"z\": exp_index}\n        )\n        actual = ds.stack(z=[\"y\", \"x\"])\n        assert_identical(expected, actual)"
        ]
    },
    {
        "repo": "pydata/xarray",
        "instance_id": "pydata__xarray-4248",
        "base_commit": "98dc1f4ea18738492e074e9e51ddfed5cd30ab94",
        "patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -261,6 +261,8 @@ def inline_variable_array_repr(var, max_width):\n         return inline_dask_repr(var.data)\n     elif isinstance(var._data, sparse_array_type):\n         return inline_sparse_repr(var.data)\n+    elif hasattr(var._data, \"_repr_inline_\"):\n+        return var._data._repr_inline_(max_width)\n     elif hasattr(var._data, \"__array_function__\"):\n         return maybe_truncate(repr(var._data).replace(\"\\n\", \" \"), max_width)\n     else:\n",
        "test_patch": "diff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py\n--- a/xarray/tests/test_formatting.py\n+++ b/xarray/tests/test_formatting.py\n@@ -7,6 +7,7 @@\n \n import xarray as xr\n from xarray.core import formatting\n+from xarray.core.npcompat import IS_NEP18_ACTIVE\n \n from . import raises_regex\n \n@@ -391,6 +392,44 @@ def test_array_repr(self):\n         assert actual == expected\n \n \n+@pytest.mark.skipif(not IS_NEP18_ACTIVE, reason=\"requires __array_function__\")\n+def test_inline_variable_array_repr_custom_repr():\n+    class CustomArray:\n+        def __init__(self, value, attr):\n+            self.value = value\n+            self.attr = attr\n+\n+        def _repr_inline_(self, width):\n+            formatted = f\"({self.attr}) {self.value}\"\n+            if len(formatted) > width:\n+                formatted = f\"({self.attr}) ...\"\n+\n+            return formatted\n+\n+        def __array_function__(self, *args, **kwargs):\n+            return NotImplemented\n+\n+        @property\n+        def shape(self):\n+            return self.value.shape\n+\n+        @property\n+        def dtype(self):\n+            return self.value.dtype\n+\n+        @property\n+        def ndim(self):\n+            return self.value.ndim\n+\n+    value = CustomArray(np.array([20, 40]), \"m\")\n+    variable = xr.Variable(\"x\", value)\n+\n+    max_width = 10\n+    actual = formatting.inline_variable_array_repr(variable, max_width=10)\n+\n+    assert actual == value._repr_inline_(max_width)\n+\n+\n def test_set_numpy_options():\n     original_options = np.get_printoptions()\n     with formatting.set_numpy_options(threshold=10):\n",
        "problem_statement": "Feature request: show units in dataset overview\nHere's a hypothetical dataset:\r\n\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 3, x: 988, y: 822)\r\nCoordinates:\r\n  * x         (x) float64 ...\r\n  * y         (y) float64 ...\r\n  * time      (time) datetime64[ns] ...\r\nData variables:\r\n    rainfall  (time, y, x) float32 ...\r\n    max_temp  (time, y, x) float32 ...\r\n```\r\n\r\nIt would be really nice if the units of the coordinates and of the data variables were shown in the `Dataset` repr, for example as:\r\n\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 3, x: 988, y: 822)\r\nCoordinates:\r\n  * x, in metres         (x)            float64 ...\r\n  * y, in metres         (y)            float64 ...\r\n  * time                 (time)         datetime64[ns] ...\r\nData variables:\r\n    rainfall, in mm      (time, y, x)   float32 ...\r\n    max_temp, in deg C   (time, y, x)   float32 ...\r\n```\n",
        "hints_text": "I would love to see this.\r\n\r\nWhat would we want the exact formatting to be? Square brackets to copy how units from `attrs['units']` are displayed on plots? e.g.\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 3, x: 988, y: 822)\r\nCoordinates:\r\n  * x [m]             (x)            float64 ...\r\n  * y [m]             (y)            float64 ...\r\n  * time [s]          (time)         datetime64[ns] ...\r\nData variables:\r\n    rainfall [mm]     (time, y, x)   float32 ...\r\n    max_temp [deg C]  (time, y, x)   float32 ...\r\n```\r\nThe lack of vertical alignment is kind of ugly...\r\n\r\nThere are now two cases to discuss: units in `attrs`, and unit-aware arrays like pint. (If we do the latter we may not need the former though...)\r\n\r\nfrom @keewis on #3616:\r\n\r\n>At the moment, the formatting.diff_*_repr functions that provide the pretty-printing for assert_* use repr to format NEP-18 strings, truncating the result if it is too long. In the case of pint's quantities, this makes the pretty printing useless since only a few values are visible and the unit is in the truncated part.\r\n>\r\n> What should we about this? Does pint have to change its repr?\r\n\r\nWe could presumably just extract the units from pint's repr to display them separately. I don't know if that raises questions about generality of duck-typing arrays though @dcherian ? Is it fine to make units a special-case?\nit was argued in pint that the unit is part of the data, so we should keep it as close to the data as possible. How about\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 3, x: 988, y: 822)\r\nCoordinates:\r\n  * x             (x)          [m]     float64 ...\r\n  * y             (y)          [m]     float64 ...\r\n  * time          (time)       [s]     datetime64[ns] ...\r\nData variables:\r\n    rainfall      (time, y, x) [mm]    float32 ...\r\n    max_temp      (time, y, x) [deg C] float32 ...\r\n```\r\nor\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 3, x: 988, y: 822)\r\nCoordinates:\r\n  * x             (x)             float64 [m] ...\r\n  * y             (y)             float64 [m] ...\r\n  * time          (time)          datetime64[ns] [s] ...\r\nData variables:\r\n    rainfall      (time, y, x)    float32 [mm] ...\r\n    max_temp      (time, y, x)    float32 [deg C] ...\r\n```\r\nThe issue with the second example is that it is easy to confuse with numpy's dtype, though. Maybe we should use parentheses instead?\r\n\r\nre special casing: I think would be fine for attributes since we already special case them for plotting, but I don't know about duck arrays. Even if we want to special case them, there are many unit libraries with different interfaces so we would either need to special case all of them or require a specific interface (or a function to retrieve the necessary data?).\r\n\r\nAlso, we should keep in mind is that using more horizontal space for the units results in less space for data. And we should not forget about https://github.com/dask/dask/issues/5329#issue-485927396, where a different kind of format was proposed, at least for the values of a `DataArray`.\nInstead of trying to come up with our own formatting, how about supporting a `_repr_short_(self, length)` method on the duck array (with a fall back to the current behavior)? That way duck arrays have to explicitly define the format (or have a compatibility package like `pint-xarray` provide it for them) if they want something different from their normal repr and we don't have to add duck array specific code.\r\n\r\nThis won't help with displaying the `units` attributes (which we don't really need once we have support for pint arrays in indexes).",
        "created_at": "2020-07-22T14:54:03Z",
        "version": "0.12",
        "FAIL_TO_PASS": "[\"xarray/tests/test_formatting.py::test_inline_variable_array_repr_custom_repr\"]",
        "PASS_TO_PASS": "[\"xarray/tests/test_formatting.py::TestFormatting::test_get_indexer_at_least_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_first_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_array_flat\", \"xarray/tests/test_formatting.py::TestFormatting::test_pretty_print\", \"xarray/tests/test_formatting.py::TestFormatting::test_maybe_truncate\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_timestamp_out_of_bounds\", \"xarray/tests/test_formatting.py::TestFormatting::test_attribute_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_array_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_attrs_repr_with_array\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_dataset_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_array_repr\", \"xarray/tests/test_formatting.py::test_set_numpy_options\", \"xarray/tests/test_formatting.py::test_short_numpy_repr\", \"xarray/tests/test_formatting.py::test_large_array_repr_length\"]",
        "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
        "issue_title": "Feature request: show units in dataset overview",
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/xarray/xarray/tests/test_units.py",
        "searched_functions": [
            "def test_where_dataset(fill_value, unit, error, dtype):\n    array1 = np.linspace(0, 5, 10).astype(dtype) * unit_registry.m\n    array2 = np.linspace(-5, 0, 10).astype(dtype) * unit_registry.m\n\n    ds = xr.Dataset(data_vars={\"a\": (\"x\", array1), \"b\": (\"x\", array2)})\n    cond = array1 < 2 * unit_registry.m\n    fill_value = fill_value * unit\n\n    if error is not None and not (\n        np.isnan(fill_value) and not isinstance(fill_value, Quantity)\n    ):\n        with pytest.raises(error):\n            xr.where(cond, ds, fill_value)\n\n        return\n\n    expected = attach_units(\n        xr.where(\n            cond,\n            strip_units(ds),\n            strip_units(convert_units(fill_value, {None: unit_registry.m})),\n        ),\n        extract_units(ds),\n    )\n    actual = xr.where(cond, ds, fill_value)\n\n    assert_units_equal(expected, actual)\n    assert_identical(expected, actual)",
            "def test_concat_dataset(variant, unit, error, dtype):\n    original_unit = unit_registry.m\n\n    variants = {\n        \"data\": ((original_unit, unit), (1, 1), (1, 1)),\n        \"dims\": ((1, 1), (original_unit, unit), (1, 1)),\n        \"coords\": ((1, 1), (1, 1), (original_unit, unit)),\n    }\n    (\n        (data_unit1, data_unit2),\n        (dim_unit1, dim_unit2),\n        (coord_unit1, coord_unit2),\n    ) = variants.get(variant)\n\n    array1 = np.linspace(0, 5, 10).astype(dtype) * data_unit1\n    array2 = np.linspace(-5, 0, 5).astype(dtype) * data_unit2\n\n    x1 = np.arange(5, 15) * dim_unit1\n    x2 = np.arange(5) * dim_unit2\n\n    u1 = np.linspace(1, 2, 10).astype(dtype) * coord_unit1\n    u2 = np.linspace(0, 1, 5).astype(dtype) * coord_unit2\n\n    ds1 = xr.Dataset(data_vars={\"a\": (\"x\", array1)}, coords={\"x\": x1, \"u\": (\"x\", u1)})\n    ds2 = xr.Dataset(data_vars={\"a\": (\"x\", array2)}, coords={\"x\": x2, \"u\": (\"x\", u2)})\n\n    if error is not None:\n        with pytest.raises(error):\n            xr.concat([ds1, ds2], dim=\"x\")\n\n        return\n\n    units = extract_units(ds1)\n    expected = attach_units(\n        xr.concat([strip_units(ds1), strip_units(convert_units(ds2, units))], dim=\"x\"),\n        units,\n    )\n    actual = xr.concat([ds1, ds2], dim=\"x\")\n\n    assert_units_equal(expected, actual)\n    assert_identical(expected, actual)",
            "def test_merge_dataset(variant, unit, error, dtype):\n    original_unit = unit_registry.m\n\n    variants = {\n        \"data\": ((original_unit, unit), (1, 1), (1, 1)),\n        \"dims\": ((1, 1), (original_unit, unit), (1, 1)),\n        \"coords\": ((1, 1), (1, 1), (original_unit, unit)),\n    }\n    (\n        (data_unit1, data_unit2),\n        (dim_unit1, dim_unit2),\n        (coord_unit1, coord_unit2),\n    ) = variants.get(variant)\n\n    array1 = np.zeros(shape=(2, 3), dtype=dtype) * data_unit1\n    array2 = np.zeros(shape=(2, 3), dtype=dtype) * data_unit1\n\n    x = np.arange(11, 14) * dim_unit1\n    y = np.arange(2) * dim_unit1\n    u = np.arange(3) * coord_unit1\n\n    ds1 = xr.Dataset(\n        data_vars={\"a\": ((\"y\", \"x\"), array1), \"b\": ((\"y\", \"x\"), array2)},\n        coords={\"x\": x, \"y\": y, \"u\": (\"x\", u)},\n    )\n    ds2 = xr.Dataset(\n        data_vars={\n            \"a\": ((\"y\", \"x\"), np.ones_like(array1) * data_unit2),\n            \"b\": ((\"y\", \"x\"), np.ones_like(array2) * data_unit2),\n        },\n        coords={\n            \"x\": np.arange(3) * dim_unit2,\n            \"y\": np.arange(2, 4) * dim_unit2,\n            \"u\": (\"x\", np.arange(-3, 0) * coord_unit2),\n        },\n    )\n    ds3 = xr.Dataset(\n        data_vars={\n            \"a\": ((\"y\", \"x\"), np.full_like(array1, np.nan) * data_unit2),\n            \"b\": ((\"y\", \"x\"), np.full_like(array2, np.nan) * data_unit2),\n        },\n        coords={\n            \"x\": np.arange(3, 6) * dim_unit2,\n            \"y\": np.arange(4, 6) * dim_unit2,\n            \"u\": (\"x\", np.arange(3, 6) * coord_unit2),\n        },\n    )\n\n    func = function(xr.merge)\n    if error is not None:\n        with pytest.raises(error):\n            func([ds1, ds2, ds3])\n\n        return\n\n    units = extract_units(ds1)\n    convert_and_strip = lambda ds: strip_units(convert_units(ds, units))\n    expected = attach_units(\n        func([convert_and_strip(ds1), convert_and_strip(ds2), convert_and_strip(ds3)]),\n        units,\n    )\n    actual = func([ds1, ds2, ds3])\n\n    assert_units_equal(expected, actual)\n    assert_allclose(expected, actual)",
            "def test_where(self, variant, unit, error, dtype):\n        original_unit = unit_registry.m\n        array1 = np.linspace(0, 1, 10).astype(dtype) * original_unit\n        array2 = np.linspace(-1, 0, 10).astype(dtype) * original_unit\n\n        ds = xr.Dataset({\"a\": (\"x\", array1), \"b\": (\"x\", array2)})\n        units = extract_units(ds)\n\n        condition = ds < 0.5 * original_unit\n        other = np.linspace(-2, -1, 10).astype(dtype) * unit\n        variant_kwargs = {\n            \"masking\": {\"cond\": condition},\n            \"replacing_scalar\": {\"cond\": condition, \"other\": -1 * unit},\n            \"replacing_array\": {\"cond\": condition, \"other\": other},\n            \"dropping\": {\"cond\": condition, \"drop\": True},\n        }\n        kwargs = variant_kwargs.get(variant)\n        if variant not in (\"masking\", \"dropping\") and error is not None:\n            with pytest.raises(error):\n                ds.where(**kwargs)\n\n            return\n\n        kwargs_without_units = {\n            key: strip_units(convert_units(value, {None: original_unit}))\n            for key, value in kwargs.items()\n        }\n\n        expected = attach_units(strip_units(ds).where(**kwargs_without_units), units,)\n        actual = ds.where(**kwargs)\n\n        assert_units_equal(expected, actual)\n        assert_equal(expected, actual)",
            "def test_align_dataset(value, unit, variant, error, dtype):\n    if variant == \"coords\" and (\n        value != dtypes.NA or isinstance(unit, unit_registry.Unit)\n    ):\n        pytest.xfail(\n            reason=(\n                \"fill_value is used for both data variables and coords. \"\n                \"See https://github.com/pydata/xarray/issues/4165\"\n            )\n        )\n\n    fill_value = dtypes.get_fill_value(dtype) if value == dtypes.NA else value\n\n    original_unit = unit_registry.m\n\n    variants = {\n        \"data\": ((original_unit, unit), (1, 1), (1, 1)),\n        \"dims\": ((1, 1), (original_unit, unit), (1, 1)),\n        \"coords\": ((1, 1), (1, 1), (original_unit, unit)),\n    }\n    (\n        (data_unit1, data_unit2),\n        (dim_unit1, dim_unit2),\n        (coord_unit1, coord_unit2),\n    ) = variants.get(variant)\n\n    array1 = np.linspace(0, 10, 2 * 5).reshape(2, 5).astype(dtype) * data_unit1\n    array2 = np.linspace(0, 10, 2 * 5).reshape(2, 5).astype(dtype) * data_unit2\n\n    x = np.arange(2) * dim_unit1\n    y1 = np.arange(5) * dim_unit1\n    y2 = np.arange(2, 7) * dim_unit2\n\n    u1 = np.array([3, 5, 7, 8, 9]) * coord_unit1\n    u2 = np.array([7, 8, 9, 11, 13]) * coord_unit2\n\n    coords1 = {\"x\": x, \"y\": y1}\n    coords2 = {\"x\": x, \"y\": y2}\n    if variant == \"coords\":\n        coords1[\"u\"] = (\"y\", u1)\n        coords2[\"u\"] = (\"y\", u2)\n\n    ds1 = xr.Dataset(data_vars={\"a\": ((\"x\", \"y\"), array1)}, coords=coords1)\n    ds2 = xr.Dataset(data_vars={\"a\": ((\"x\", \"y\"), array2)}, coords=coords2)\n\n    fill_value = fill_value * data_unit2\n    func = function(xr.align, join=\"outer\", fill_value=fill_value)\n    if error is not None and (value != dtypes.NA or isinstance(fill_value, Quantity)):\n        with pytest.raises(error):\n            func(ds1, ds2)\n\n        return\n\n    stripped_kwargs = {\n        key: strip_units(\n            convert_units(value, {None: data_unit1 if data_unit2 != 1 else None})\n        )\n        for key, value in func.kwargs.items()\n    }\n    units_a = extract_units(ds1)\n    units_b = extract_units(ds2)\n    expected_a, expected_b = func(\n        strip_units(ds1), strip_units(convert_units(ds2, units_a)), **stripped_kwargs,\n    )\n    expected_a = attach_units(expected_a, units_a)\n    if isinstance(array2, Quantity):\n        expected_b = convert_units(attach_units(expected_b, units_a), units_b)\n    else:\n        expected_b = attach_units(expected_b, units_b)\n\n    actual_a, actual_b = func(ds1, ds2)\n\n    assert_units_equal(expected_a, actual_a)\n    assert_allclose(expected_a, actual_a)\n    assert_units_equal(expected_b, actual_b)\n    assert_allclose(expected_b, actual_b)",
            "def extract_units(obj):\n    if isinstance(obj, xr.Dataset):\n        vars_units = {\n            name: array_extract_units(value) for name, value in obj.data_vars.items()\n        }\n        coords_units = {\n            name: array_extract_units(value) for name, value in obj.coords.items()\n        }\n\n        units = {**vars_units, **coords_units}\n    elif isinstance(obj, xr.DataArray):\n        vars_units = {obj.name: array_extract_units(obj)}\n        coords_units = {\n            name: array_extract_units(value) for name, value in obj.coords.items()\n        }\n\n        units = {**vars_units, **coords_units}\n    elif isinstance(obj, xr.Variable):\n        vars_units = {None: array_extract_units(obj.data)}\n\n        units = {**vars_units}\n    elif isinstance(obj, Quantity):\n        vars_units = {None: array_extract_units(obj)}\n\n        units = {**vars_units}\n    else:\n        units = {}\n\n    return units",
            "def test_replication_dataset(func, variant, dtype):\n    unit = unit_registry.m\n\n    variants = {\n        \"data\": ((unit_registry.m, unit_registry.Pa), 1, 1),\n        \"dims\": ((1, 1), unit, 1),\n        \"coords\": ((1, 1), 1, unit),\n    }\n    (data_unit1, data_unit2), dim_unit, coord_unit = variants.get(variant)\n\n    array1 = np.linspace(0, 10, 20).astype(dtype) * data_unit1\n    array2 = np.linspace(5, 10, 10).astype(dtype) * data_unit2\n    x = np.arange(20).astype(dtype) * dim_unit\n    y = np.arange(10).astype(dtype) * dim_unit\n    u = np.linspace(0, 1, 10) * coord_unit\n\n    ds = xr.Dataset(\n        data_vars={\"a\": (\"x\", array1), \"b\": (\"y\", array2)},\n        coords={\"x\": x, \"y\": y, \"u\": (\"y\", u)},\n    )\n    units = {\n        name: unit\n        for name, unit in extract_units(ds).items()\n        if name not in ds.data_vars\n    }\n\n    expected = attach_units(func(strip_units(ds)), units)\n\n    actual = func(ds)\n\n    assert_units_equal(expected, actual)\n    assert_identical(expected, actual)",
            "def test_init(self, shared, unit, error, dtype):\n        original_unit = unit_registry.m\n        scaled_unit = unit_registry.mm\n\n        a = np.linspace(0, 1, 10).astype(dtype) * unit_registry.Pa\n        b = np.linspace(-1, 0, 10).astype(dtype) * unit_registry.degK\n\n        values_a = np.arange(a.shape[0])\n        dim_a = values_a * original_unit\n        coord_a = dim_a.to(scaled_unit)\n\n        values_b = np.arange(b.shape[0])\n        dim_b = values_b * unit\n        coord_b = (\n            dim_b.to(scaled_unit)\n            if unit_registry.is_compatible_with(dim_b, scaled_unit)\n            and unit != scaled_unit\n            else dim_b * 1000\n        )\n\n        variants = {\n            \"nothing\": ({}, {}),\n            \"dims\": ({\"x\": dim_a}, {\"x\": dim_b}),\n            \"coords\": (\n                {\"x\": values_a, \"y\": (\"x\", coord_a)},\n                {\"x\": values_b, \"y\": (\"x\", coord_b)},\n            ),\n        }\n        coords_a, coords_b = variants.get(shared)\n\n        dims_a, dims_b = (\"x\", \"y\") if shared == \"nothing\" else (\"x\", \"x\")\n\n        a = xr.DataArray(data=a, coords=coords_a, dims=dims_a)\n        b = xr.DataArray(data=b, coords=coords_b, dims=dims_b)\n\n        if error is not None and shared != \"nothing\":\n            with pytest.raises(error):\n                xr.Dataset(data_vars={\"a\": a, \"b\": b})\n\n            return\n\n        actual = xr.Dataset(data_vars={\"a\": a, \"b\": b})\n\n        units = merge_mappings(\n            extract_units(a.rename(\"a\")), extract_units(b.rename(\"b\"))\n        )\n        expected = attach_units(\n            xr.Dataset(data_vars={\"a\": strip_units(a), \"b\": strip_units(b)}), units\n        )\n\n        assert_units_equal(expected, actual)\n        assert_equal(expected, actual)",
            "def test_replication_full_like_dataset(variant, dtype):\n    unit = unit_registry.m\n\n    variants = {\n        \"data\": ((unit_registry.s, unit_registry.Pa), 1, 1),\n        \"dims\": ((1, 1), unit, 1),\n        \"coords\": ((1, 1), 1, unit),\n    }\n    (data_unit1, data_unit2), dim_unit, coord_unit = variants.get(variant)\n\n    array1 = np.linspace(0, 10, 20).astype(dtype) * data_unit1\n    array2 = np.linspace(5, 10, 10).astype(dtype) * data_unit2\n    x = np.arange(20).astype(dtype) * dim_unit\n    y = np.arange(10).astype(dtype) * dim_unit\n\n    u = np.linspace(0, 1, 10) * coord_unit\n\n    ds = xr.Dataset(\n        data_vars={\"a\": (\"x\", array1), \"b\": (\"y\", array2)},\n        coords={\"x\": x, \"y\": y, \"u\": (\"y\", u)},\n    )\n\n    fill_value = -1 * unit_registry.degK\n\n    units = {\n        **extract_units(ds),\n        **{name: unit_registry.degK for name in ds.data_vars},\n    }\n    expected = attach_units(\n        xr.full_like(strip_units(ds), fill_value=strip_units(fill_value)), units\n    )\n    actual = xr.full_like(ds, fill_value=fill_value)\n\n    assert_units_equal(expected, actual)\n    assert_identical(expected, actual)",
            "def test_bivariate_ufunc(self, unit, error, dtype):\n        original_unit = unit_registry.m\n        array = np.arange(10).astype(dtype) * original_unit\n        data_array = xr.DataArray(data=array)\n\n        if error is not None:\n            with pytest.raises(error):\n                np.maximum(data_array, 1 * unit)\n\n            return\n\n        expected_units = {None: original_unit}\n        expected = attach_units(\n            np.maximum(\n                strip_units(data_array),\n                strip_units(convert_units(1 * unit, expected_units)),\n            ),\n            expected_units,\n        )\n\n        actual = np.maximum(data_array, 1 * unit)\n        assert_units_equal(expected, actual)\n        assert_identical(expected, actual)\n\n        actual = np.maximum(1 * unit, data_array)\n        assert_units_equal(expected, actual)\n        assert_identical(expected, actual)"
        ]
    },
    {
        "repo": "pydata/xarray",
        "instance_id": "pydata__xarray-5131",
        "base_commit": "e56905889c836c736152b11a7e6117a229715975",
        "patch": "diff --git a/xarray/core/groupby.py b/xarray/core/groupby.py\n--- a/xarray/core/groupby.py\n+++ b/xarray/core/groupby.py\n@@ -436,7 +436,7 @@ def __iter__(self):\n         return zip(self._unique_coord.values, self._iter_grouped())\n \n     def __repr__(self):\n-        return \"{}, grouped over {!r} \\n{!r} groups with labels {}.\".format(\n+        return \"{}, grouped over {!r}\\n{!r} groups with labels {}.\".format(\n             self.__class__.__name__,\n             self._unique_coord.name,\n             self._unique_coord.size,\n",
        "test_patch": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ def test_da_groupby_assign_coords():\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
        "problem_statement": "Trailing whitespace in DatasetGroupBy text representation\nWhen displaying a DatasetGroupBy in an interactive Python session, the first line of output contains a trailing whitespace. The first example in the documentation demonstrate this:\r\n\r\n```pycon\r\n>>> import xarray as xr, numpy as np\r\n>>> ds = xr.Dataset(\r\n...     {\"foo\": ((\"x\", \"y\"), np.random.rand(4, 3))},\r\n...     coords={\"x\": [10, 20, 30, 40], \"letters\": (\"x\", list(\"abba\"))},\r\n... )\r\n>>> ds.groupby(\"letters\")\r\nDatasetGroupBy, grouped over 'letters' \r\n2 groups with labels 'a', 'b'.\r\n```\r\n\r\nThere is a trailing whitespace in the first line of output which is \"DatasetGroupBy, grouped over 'letters' \". This can be seen more clearly by converting the object to a string (note the whitespace before `\\n`):\r\n\r\n```pycon\r\n>>> str(ds.groupby(\"letters\"))\r\n\"DatasetGroupBy, grouped over 'letters' \\n2 groups with labels 'a', 'b'.\"\r\n```\r\n\r\n\r\nWhile this isn't a problem in itself, it causes an issue for us because we use flake8 in continuous integration to verify that our code is correctly formatted and we also have doctests that rely on DatasetGroupBy textual representation. Flake8 reports a violation on the trailing whitespaces in our docstrings. If we remove the trailing whitespaces, our doctests fail because the expected output doesn't match the actual output. So we have conflicting constraints coming from our tools which both seem reasonable. Trailing whitespaces are forbidden by flake8 because, among other reasons, they lead to noisy git diffs. Doctest want the expected output to be exactly the same as the actual output and considers a trailing whitespace to be a significant difference. We could configure flake8 to ignore this particular violation for the files in which we have these doctests, but this may cause other trailing whitespaces to creep in our code, which we don't want. Unfortunately it's not possible to just add `# NoQA` comments to get flake8 to ignore the violation only for specific lines because that creates a difference between expected and actual output from doctest point of view. Flake8 doesn't allow to disable checks for blocks of code either.\r\n\r\nIs there a reason for having this trailing whitespace in DatasetGroupBy representation? Whould it be OK to remove it? If so please let me know and I can make a pull request.\n",
        "hints_text": "I don't think this is intentional and we are happy to take a PR. The problem seems to be here:\r\n\r\nhttps://github.com/pydata/xarray/blob/c7c4aae1fa2bcb9417e498e7dcb4acc0792c402d/xarray/core/groupby.py#L439\r\n\r\nYou will also have to fix the tests (maybe other places):\r\n\r\nhttps://github.com/pydata/xarray/blob/c7c4aae1fa2bcb9417e498e7dcb4acc0792c402d/xarray/tests/test_groupby.py#L391\r\nhttps://github.com/pydata/xarray/blob/c7c4aae1fa2bcb9417e498e7dcb4acc0792c402d/xarray/tests/test_groupby.py#L408\r\n",
        "created_at": "2021-04-08T09:19:30Z",
        "version": "0.12",
        "FAIL_TO_PASS": "[\"xarray/tests/test_groupby.py::test_groupby_repr[obj0-x]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj0-y]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj0-z]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj0-month]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj1-x]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj1-y]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj1-z]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj1-month]\", \"xarray/tests/test_groupby.py::test_groupby_repr_datetime[obj0]\", \"xarray/tests/test_groupby.py::test_groupby_repr_datetime[obj1]\"]",
        "PASS_TO_PASS": "[\"xarray/tests/test_groupby.py::test_consolidate_slices\", \"xarray/tests/test_groupby.py::test_groupby_dims_property\", \"xarray/tests/test_groupby.py::test_multi_index_groupby_map\", \"xarray/tests/test_groupby.py::test_multi_index_groupby_sum\", \"xarray/tests/test_groupby.py::test_groupby_da_datetime\", \"xarray/tests/test_groupby.py::test_groupby_duplicate_coordinate_labels\", \"xarray/tests/test_groupby.py::test_groupby_input_mutation\", \"xarray/tests/test_groupby.py::test_groupby_map_shrink_groups[obj0]\", \"xarray/tests/test_groupby.py::test_groupby_map_shrink_groups[obj1]\", \"xarray/tests/test_groupby.py::test_groupby_map_change_group_size[obj0]\", \"xarray/tests/test_groupby.py::test_groupby_map_change_group_size[obj1]\", \"xarray/tests/test_groupby.py::test_da_groupby_map_func_args\", \"xarray/tests/test_groupby.py::test_ds_groupby_map_func_args\", \"xarray/tests/test_groupby.py::test_da_groupby_empty\", \"xarray/tests/test_groupby.py::test_da_groupby_quantile\", \"xarray/tests/test_groupby.py::test_ds_groupby_quantile\", \"xarray/tests/test_groupby.py::test_da_groupby_assign_coords\", \"xarray/tests/test_groupby.py::test_groupby_drops_nans\", \"xarray/tests/test_groupby.py::test_groupby_grouping_errors\", \"xarray/tests/test_groupby.py::test_groupby_reduce_dimension_error\", \"xarray/tests/test_groupby.py::test_groupby_multiple_string_args\", \"xarray/tests/test_groupby.py::test_groupby_bins_timeseries\", \"xarray/tests/test_groupby.py::test_groupby_none_group_name\", \"xarray/tests/test_groupby.py::test_groupby_getitem\"]",
        "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
        "issue_title": "Trailing whitespace in DatasetGroupBy text representation",
        "test_file": "/home/fdse/wy/RepoCodeEdit/data/raw_repo_lite/xarray/xarray/tests/test_groupby.py",
        "searched_functions": [
            "def test_groupby_grouping_errors():\n    dataset = xr.Dataset({\"foo\": (\"x\", [1, 1, 1])}, {\"x\": [1, 2, 3]})\n    with raises_regex(ValueError, \"None of the data falls within bins with edges\"):\n        dataset.groupby_bins(\"x\", bins=[0.1, 0.2, 0.3])\n\n    with raises_regex(ValueError, \"None of the data falls within bins with edges\"):\n        dataset.to_array().groupby_bins(\"x\", bins=[0.1, 0.2, 0.3])\n\n    with raises_regex(ValueError, \"All bin edges are NaN.\"):\n        dataset.groupby_bins(\"x\", bins=[np.nan, np.nan, np.nan])\n\n    with raises_regex(ValueError, \"All bin edges are NaN.\"):\n        dataset.to_array().groupby_bins(\"x\", bins=[np.nan, np.nan, np.nan])\n\n    with raises_regex(ValueError, \"Failed to group data.\"):\n        dataset.groupby(dataset.foo * np.nan)\n\n    with raises_regex(ValueError, \"Failed to group data.\"):\n        dataset.to_array().groupby(dataset.foo * np.nan)",
            "def test_multi_index_groupby_map(dataset):\n    # regression test for GH873\n    ds = dataset.isel(z=1, drop=True)[[\"foo\"]]\n    expected = 2 * ds\n    actual = (\n        ds.stack(space=[\"x\", \"y\"])\n        .groupby(\"space\")\n        .map(lambda x: 2 * x)\n        .unstack(\"space\")\n    )\n    assert_equal(expected, actual)",
            "def test_groupby_drops_nans():\n    # GH2383\n    # nan in 2D data variable (requires stacking)\n    ds = xr.Dataset(\n        {\n            \"variable\": ((\"lat\", \"lon\", \"time\"), np.arange(60.0).reshape((4, 3, 5))),\n            \"id\": ((\"lat\", \"lon\"), np.arange(12.0).reshape((4, 3))),\n        },\n        coords={\"lat\": np.arange(4), \"lon\": np.arange(3), \"time\": np.arange(5)},\n    )\n\n    ds[\"id\"].values[0, 0] = np.nan\n    ds[\"id\"].values[3, 0] = np.nan\n    ds[\"id\"].values[-1, -1] = np.nan\n\n    grouped = ds.groupby(ds.id)\n\n    # non reduction operation\n    expected = ds.copy()\n    expected.variable.values[0, 0, :] = np.nan\n    expected.variable.values[-1, -1, :] = np.nan\n    expected.variable.values[3, 0, :] = np.nan\n    actual = grouped.map(lambda x: x).transpose(*ds.variable.dims)\n    assert_identical(actual, expected)\n\n    # reduction along grouped dimension\n    actual = grouped.mean()\n    stacked = ds.stack({\"xy\": [\"lat\", \"lon\"]})\n    expected = (\n        stacked.variable.where(stacked.id.notnull()).rename({\"xy\": \"id\"}).to_dataset()\n    )\n    expected[\"id\"] = stacked.id.values\n    assert_identical(actual, expected.dropna(\"id\").transpose(*actual.dims))\n\n    # reduction operation along a different dimension\n    actual = grouped.mean(\"time\")\n    expected = ds.mean(\"time\").where(ds.id.notnull())\n    assert_identical(actual, expected)\n\n    # NaN in non-dimensional coordinate\n    array = xr.DataArray([1, 2, 3], [(\"x\", [1, 2, 3])])\n    array[\"x1\"] = (\"x\", [1, 1, np.nan])\n    expected = xr.DataArray(3, [(\"x1\", [1])])\n    actual = array.groupby(\"x1\").sum()\n    assert_equal(expected, actual)\n\n    # NaT in non-dimensional coordinate\n    array[\"t\"] = (\n        \"x\",\n        [\n            np.datetime64(\"2001-01-01\"),\n            np.datetime64(\"2001-01-01\"),\n            np.datetime64(\"NaT\"),\n        ],\n    )\n    expected = xr.DataArray(3, [(\"t\", [np.datetime64(\"2001-01-01\")])])\n    actual = array.groupby(\"t\").sum()\n    assert_equal(expected, actual)\n\n    # test for repeated coordinate labels\n    array = xr.DataArray([0, 1, 2, 4, 3, 4], [(\"x\", [np.nan, 1, 1, np.nan, 2, np.nan])])\n    expected = xr.DataArray([3, 3], [(\"x\", [1, 2])])\n    actual = array.groupby(\"x\").sum()\n    assert_equal(expected, actual)",
            "def dataset():\n    ds = xr.Dataset(\n        {\"foo\": ((\"x\", \"y\", \"z\"), np.random.randn(3, 4, 2))},\n        {\"x\": [\"a\", \"b\", \"c\"], \"y\": [1, 2, 3, 4], \"z\": [1, 2]},\n    )\n    ds[\"boo\"] = ((\"z\", \"y\"), [[\"f\", \"g\", \"h\", \"j\"]] * 2)\n\n    return ds",
            "def test_groupby_getitem(dataset):\n\n    assert_identical(dataset.sel(x=\"a\"), dataset.groupby(\"x\")[\"a\"])\n    assert_identical(dataset.sel(z=1), dataset.groupby(\"z\")[1])\n\n    assert_identical(dataset.foo.sel(x=\"a\"), dataset.foo.groupby(\"x\")[\"a\"])\n    assert_identical(dataset.foo.sel(z=1), dataset.foo.groupby(\"z\")[1])\n\n    actual = dataset.groupby(\"boo\")[\"f\"].unstack().transpose(\"x\", \"y\", \"z\")\n    expected = dataset.sel(y=[1], z=[1, 2]).transpose(\"x\", \"y\", \"z\")\n    assert_identical(expected, actual)",
            "def test_groupby_dims_property(dataset):\n    assert dataset.groupby(\"x\").dims == dataset.isel(x=1).dims\n    assert dataset.groupby(\"y\").dims == dataset.isel(y=1).dims\n\n    stacked = dataset.stack({\"xy\": (\"x\", \"y\")})\n    assert stacked.groupby(\"xy\").dims == stacked.isel(xy=0).dims",
            "def array(dataset):\n    return dataset[\"foo\"]",
            "def test_groupby_repr(obj, dim):\n    actual = repr(obj.groupby(dim))\n    expected = \"%sGroupBy\" % obj.__class__.__name__\n    expected += \", grouped over %r \" % dim\n    expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n    if dim == \"x\":\n        expected += \"1, 2, 3, 4, 5.\"\n    elif dim == \"y\":\n        expected += \"0, 1, 2, 3, 4, 5, ..., 15, 16, 17, 18, 19.\"\n    elif dim == \"z\":\n        expected += \"'a', 'b', 'c'.\"\n    elif dim == \"month\":\n        expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n    assert actual == expected",
            "def test_multi_index_groupby_sum():\n    # regression test for GH873\n    ds = xr.Dataset(\n        {\"foo\": ((\"x\", \"y\", \"z\"), np.ones((3, 4, 2)))},\n        {\"x\": [\"a\", \"b\", \"c\"], \"y\": [1, 2, 3, 4]},\n    )\n    expected = ds.sum(\"z\")\n    actual = ds.stack(space=[\"x\", \"y\"]).groupby(\"space\").sum(\"z\").unstack(\"space\")\n    assert_equal(expected, actual)",
            "def test_groupby_none_group_name():\n    # GH158\n    # xarray should not fail if a DataArray's name attribute is None\n\n    data = np.arange(10) + 10\n    da = xr.DataArray(data)  # da.name = None\n    key = xr.DataArray(np.floor_divide(data, 2))\n\n    mean = da.groupby(key).mean()\n    assert \"group\" in mean.dims"
        ]
    }
]